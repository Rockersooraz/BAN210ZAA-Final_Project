*------------------------------------------------------------*
User:                Nikee
Date:                August 07, 2022
Time:                18:56:20
Site:                70192439
Platform:            X64_8HOME
Maintenance Release: 9.04.01M3P062415
EM Version:          14.1
* 
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "August 07, 2022" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "18:56:04" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                August 07, 2022
Time:                18:56:04
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O1GVL_Y3 "D:\\BAN210PA\Workspaces\EMWS1\Reg\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O1GVL_Y3 new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG "D:\\BAN210PA\Workspaces\EMWS1\Reg\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "August 07, 2022" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "18:56:04" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                Nikee";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70192439";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_8HOME";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.04.01M3P062415";
MPRINT(EM_DIAGRAM):   put "EM Version:          14.1";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "D:\\BAN210PA\Workspaces\EMWS1\Reg\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN "D:\\BAN210PA\Workspaces\EMWS1\Reg\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "D:\\BAN210PA\Workspaces\EMWS1\Reg\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "D:\\BAN210PA\Workspaces\EMWS1\Reg\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "August 07, 2022" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "18:56:04" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                Nikee";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "D:\\BAN210PA\Workspaces\EMWS1\Reg\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "D:\\BAN210PA\Workspaces\EMWS1\Reg\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "D:\\BAN210PA\Workspaces\EMWS1\Reg\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'D:\\BAN210PA\Workspaces\EMWS1\Reg\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'D:\\BAN210PA\Workspaces\EMWS1\Reg\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
21896      proc freq data=EMWS1.Reg_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS1.Reg_VariableSet noprint;
21897      table ROLE*LEVEL/out=WORK.RegMETA;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.RegMETA;
21898      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 11 observations read from the data set EMWS1.REG_VARIABLESET.
NOTE: The data set WORK.REGMETA has 4 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.05 seconds
      cpu time            0.01 seconds
 
 
21899      proc print data=WORK.RegMETA label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.RegMETA label noobs;
21900      var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
21901      label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency Count";
21902      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
21903      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
21904      run;
 
NOTE: There were 4 observations read from the data set WORK.REGMETA.
NOTE: The PROCEDURE PRINT printed page 1.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.06 seconds
      cpu time            0.01 seconds
 
 
21905      title10;
MPRINT(EM_DIAGRAM):   title10;
21906      %let EMNORLEN = %DMNORLEN;
MPRINT(EM_DIAGRAM):
EMWS1.Trans_TRAIN EMWS1.Trans_TRAIN
EMWS1.Trans_TRAIN EMWS1.Trans_TRAIN EMWS1 Trans_TRAIN
EMWS1.Trans_TRAIN EMWS1.Trans_TRAIN
EMWS1.Trans_TRAIN EMWS1.Trans_TRAIN EMWS1 Trans_TRAIN
MPRINT(EM_DIAGRAM):    proc dmdb data=EMWS1.Trans_TRAIN classout=WORK._DMDBCLASSTARGET(keep=NAME NRAW CRAW LEVEL FREQUENCY NMISSPERCENT);
MPRINT(EM_DIAGRAM):   class class(DESC) ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set WORK._DMDBCLASSTARGET;
MPRINT(EM_DIAGRAM):   where ^(NRAW eq . and CRAW eq '') and NAME="class";
MPRINT(EM_DIAGRAM):   if _N_=1 then call symput('_newevent', strip(LEVEL));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DMDBCLASSTARGET out=_TEMPCLASS(keep=LEVEL FREQUENCY NMISSPERCENT rename=(LEVEL=class));
MPRINT(EM_DIAGRAM):   by LEVEL;
MPRINT(EM_DIAGRAM):   where ^(NRAW eq . and CRAW eq '') and NAME="class";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _TEMPCLASS;
MPRINT(EM_DIAGRAM):   set _TEMPCLASS;
MPRINT(EM_DIAGRAM):   NMISSPERCENT= NMISSPERCENT/100;
MPRINT(EM_DIAGRAM):   run;
>>>>>>>>>>>>>> TARGET(   USE='Y'
                         REPORT='N'
                         NAME='class'
                         ROLE='TARGET'
                         LEVEL='NOMINAL'
                         ORDER=''
                         CREATOR=''
                         FORMATTYPE='CATEGORY'
                         FAMILY=''
                         LOWERLIMIT=.
                         UPPERLIMIT=.
                         DISTRIBUTION=''
                         COMMENT=''
                         PRICE=.
                         TYPE='C'
                         LABEL='class'
                         FORMAT='$20.'
                         INFORMAT='$20.'
                         INDEX='N'
                         INDEXTYPE='NONE'
                         LENGTH=20
                      )[17733]
MPRINT(EM_DIAGRAM):
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * EM: DMDBClass Macro ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * EM: DMDBVar Macro ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * EM: Create DMDB;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc dmdb batch data=EMWS1.Trans_TRAIN dmdbcat=WORK.EM_DMDB maxlevel = 513 ;
MPRINT(EM_DIAGRAM):   class
MPRINT(DMDBCLASS):   class(DESC)
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   target class ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   *--- end code ---*;
WORK.EM_DMDB WORK.EM_DMDB
WORK.EM_DMDB WORK.EM_DMDB WORK EM_DMDB
MPRINT(EM_DIAGRAM):    proc datasets lib=EMWS1 nolist;
MPRINT(EM_DIAGRAM):   modify Reg_class_DD(type=PROFIT label= class);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Reg: Determine decision variables for class;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data WORK.Reg_SCORE;
MPRINT(EM_DIAGRAM):   set EMWS1.Trans_TRAIN;
MPRINT(EM_DIAGRAM):   keep class;
MPRINT(EM_DIAGRAM):   keep 'P_classrecurrence_events'n;
MPRINT(EM_DIAGRAM):   'P_classrecurrence_events'n = 0.5;
MPRINT(EM_DIAGRAM):   keep 'P_classno_recurrence_events'n;
MPRINT(EM_DIAGRAM):   'P_classno_recurrence_events'n = 0.5;
MPRINT(EM_DIAGRAM):   if _N_=1 then do;
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   stop;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS1.Reg_class_DM;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg_class_DM;
MPRINT(EM_DIAGRAM):   where _TYPE_ ^in('FREQ', 'BESTPROFIT', 'COMPUTEDPROFIT', 'EXPECTEDPROFIT', 'BESTLOSS', 'COMPUTEDLOSS', 'EXPECTEDLOSS', 'ROI', 'INVESTMENTCOST', 'MODELDECISION');
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify class(type=PROFIT label= class);
MPRINT(EM_DIAGRAM):   label DECISION1= 'RECURRENCE-EVENTS';
MPRINT(EM_DIAGRAM):   label DECISION2= 'NO-RECURRENCE-EVENTS';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    data EMWS1.Reg_class_DM;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg_class_DM end=eof;
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   if eof then do;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
21991      data WORK.Reg_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
MPRINT(EM_DIAGRAM):    data WORK.Reg_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
21992      length ORDER $20;
MPRINT(EM_DIAGRAM):   length ORDER $20;
21993      label VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,  NOQUOTE))" EVENT = "%sysfunc(sasmsg(sashelp.dmine, assmt_event_vlabel, NOQUOTE))" NUMLEVELS = "%sysfunc(sasmsg(sashelp.dmine, rpt_numcat_vlabel, NOQUOTE))" LEVEL =
21994         "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" ORDER = "%sysfunc(sasmsg(sashelp.dmine, meta_order_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label VARIABLE = "Target" EVENT = "Event" NUMLEVELS = "Number of Levels" LEVEL = "Measurement Level" ORDER = "Order" LABEL = "Label";
21995      set EMWS1.REG_CLASS_DM( where=(_TYPE_="TARGET"));
MPRINT(EM_DIAGRAM):   set EMWS1.REG_CLASS_DM( where=(_TYPE_="TARGET"));
21996      NumLevels=2;
MPRINT(EM_DIAGRAM):   NumLevels=2;
21997      select(upcase(ORDER));
MPRINT(EM_DIAGRAM):   select(upcase(ORDER));
21998      when('DESC') ORDER = 'Descending';
MPRINT(EM_DIAGRAM):   when('DESC') ORDER = 'Descending';
21999      when('ASC') ORDER = 'Ascending';
MPRINT(EM_DIAGRAM):   when('ASC') ORDER = 'Ascending';
22000      when('FMTDESC') ORDER = 'Formatted Descending';
MPRINT(EM_DIAGRAM):   when('FMTDESC') ORDER = 'Formatted Descending';
22001      when('FMTASC') ORDER = 'Formatted Ascending';
MPRINT(EM_DIAGRAM):   when('FMTASC') ORDER = 'Formatted Ascending';
22002      otherwise ORDER = 'Descending';
MPRINT(EM_DIAGRAM):   otherwise ORDER = 'Descending';
22003      end;
MPRINT(EM_DIAGRAM):   end;
22004      output;
MPRINT(EM_DIAGRAM):   output;
22005      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.REG_CLASS_DM.
      WHERE _TYPE_='TARGET';
NOTE: The data set WORK.REG_EVENT has 1 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.06 seconds
 
 
22006      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
22007      proc print data=WORK.Reg_EVENT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=WORK.Reg_EVENT noobs label;
22008      var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
MPRINT(EM_DIAGRAM):   var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
22009      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
22010      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_modelEvent_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Model Events";
MPRINT(EM_DIAGRAM):   run;
22011      run;
 
NOTE: There were 1 observations read from the data set WORK.REG_EVENT.
NOTE: The PROCEDURE PRINT printed page 2.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
22012      title10;
MPRINT(EM_DIAGRAM):   title10;
"No decisions defined for target "class"."
22013      proc print data = EMWS1.Reg_class_DM noobs label;
MPRINT(EM_DIAGRAM):    proc print data = EMWS1.Reg_class_DM noobs label;
22014      var _type_ variable label;
MPRINT(EM_DIAGRAM):   var _type_ variable label;
22015      where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
MPRINT(EM_DIAGRAM):   where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
22016      label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))" VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Type" VARIABLE = "Variable" LABEL = "Label";
22017      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
22018      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Predicted and decision variables";
MPRINT(EM_DIAGRAM):   run;
22019      run;
 
NOTE: There were 7 observations read from the data set EMWS1.REG_CLASS_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 3.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
22020      title10;
MPRINT(EM_DIAGRAM):   title10;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Reg: Preparing metadata for Training *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data WORK.M0I1L37X;
MPRINT(EM_DIAGRAM):   set WORK.M0I1L37X;
MPRINT(EM_DIAGRAM):   where use = 'Y' or (role = 'INPUT' and use = 'D') ;
MPRINT(EM_DIAGRAM):   if (role = 'REJECTED') then role = 'INPUT';
MPRINT(EM_DIAGRAM):   if use = 'D' then use = 'Y';
MPRINT(EM_DIAGRAM):   run;
22030      data WORK.M0I1L37X;
MPRINT(EM_DIAGRAM):    data WORK.M0I1L37X;
22031      set WORK.M0I1L37X end=eof;
MPRINT(EM_DIAGRAM):   set WORK.M0I1L37X end=eof;
22032      output;
MPRINT(EM_DIAGRAM):   output;
22033      if eof then do;
MPRINT(EM_DIAGRAM):   if eof then do;
22034      NAME="";
MPRINT(EM_DIAGRAM):   NAME="";
22035      ROLE="COST";
MPRINT(EM_DIAGRAM):   ROLE="COST";
22036      LEVEL="INTERVAL";
MPRINT(EM_DIAGRAM):   LEVEL="INTERVAL";
22037      TYPE="N";
MPRINT(EM_DIAGRAM):   TYPE="N";
22038      output;
MPRINT(EM_DIAGRAM):   output;
22039      end;
MPRINT(EM_DIAGRAM):   end;
22040      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 10 observations read from the data set WORK.M0I1L37X.
NOTE: The data set WORK.M0I1L37X has 11 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
NOTE: There were 2 observations read from the data set EMWS1.REG_CLASS_DD.
NOTE: The data set WORK.CLASS has 2 observations and 7 variables.
NOTE: There were 2 observations read from the data set EMWS1.REG_CLASS_DD.
NOTE: The data set WORK.CLASS has 2 observations and 7 variables.
22041      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
22042      * Reg: Create decision matrix;
MPRINT(EM_DIAGRAM):   * Reg: Create decision matrix;
22043      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
22044      data WORK.class(label="class");
MPRINT(EM_DIAGRAM):   data WORK.class(label="class");
22045        length   class                            $  32
22046                 COUNT                                8
22047                 DATAPRIOR                            8
22048                 TRAINPRIOR                           8
22049                 DECPRIOR                             8
22050                 DECISION1                            8
22051                 DECISION2                            8
22052                 ;
MPRINT(EM_DIAGRAM):   length class $ 32 COUNT 8 DATAPRIOR 8 TRAINPRIOR 8 DECPRIOR 8 DECISION1 8 DECISION2 8 ;
22053
22054        label    COUNT="Level Counts"
22055                 DATAPRIOR="Data Proportions"
22056                 TRAINPRIOR="Training Proportions"
22057                 DECPRIOR="Decision Priors"
22058                 DECISION1="RECURRENCE-EVENTS"
22059                 DECISION2="NO-RECURRENCE-EVENTS"
22060                 ;
MPRINT(EM_DIAGRAM):   label COUNT= "Level Counts" DATAPRIOR= "Data Proportions" TRAINPRIOR= "Training Proportions" DECPRIOR= "Decision Priors" DECISION1= "RECURRENCE-EVENTS" DECISION2= "NO-RECURRENCE-EVENTS" ;
22061      class="RECURRENCE-EVENTS"; COUNT=33; DATAPRIOR=0.29203539823008; TRAINPRIOR=0.29203539823008; DECPRIOR=.; DECISION1=1; DECISION2=0;
MPRINT(EM_DIAGRAM):   class="RECURRENCE-EVENTS";
MPRINT(EM_DIAGRAM):   COUNT=33;
MPRINT(EM_DIAGRAM):   DATAPRIOR=0.29203539823008;
MPRINT(EM_DIAGRAM):   TRAINPRIOR=0.29203539823008;
MPRINT(EM_DIAGRAM):   DECPRIOR=.;
MPRINT(EM_DIAGRAM):   DECISION1=1;
MPRINT(EM_DIAGRAM):   DECISION2=0;
22062      output;
MPRINT(EM_DIAGRAM):   output;
22063      class="NO-RECURRENCE-EVENTS"; COUNT=80; DATAPRIOR=0.70796460176991; TRAINPRIOR=0.70796460176991; DECPRIOR=.; DECISION1=0; DECISION2=1;
MPRINT(EM_DIAGRAM):   class="NO-RECURRENCE-EVENTS";
MPRINT(EM_DIAGRAM):   COUNT=80;
MPRINT(EM_DIAGRAM):   DATAPRIOR=0.70796460176991;
MPRINT(EM_DIAGRAM):   TRAINPRIOR=0.70796460176991;
MPRINT(EM_DIAGRAM):   DECPRIOR=.;
MPRINT(EM_DIAGRAM):   DECISION1=0;
MPRINT(EM_DIAGRAM):   DECISION2=1;
22064      output;
MPRINT(EM_DIAGRAM):   output;
22065      ;
MPRINT(EM_DIAGRAM):   ;
22066      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK.CLASS has 2 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
22067      proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
22068      modify class(type=PROFIT label=class);
MPRINT(EM_DIAGRAM):   modify class(type=PROFIT label= class);
MPRINT(EM_DIAGRAM):   label DECISION1= 'RECURRENCE-EVENTS';
MPRINT(EM_DIAGRAM):   label DECISION2= 'NO-RECURRENCE-EVENTS';
MPRINT(EM_DIAGRAM):   run;
22069      label DECISION1= 'RECURRENCE-EVENTS';
22070      label DECISION2= 'NO-RECURRENCE-EVENTS';
22071      run;
 
NOTE: MODIFY was successful for WORK.CLASS.DATA.
22072      quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
22073      data EM_DMREG / view=EM_DMREG;
MPRINT(EM_DIAGRAM):   data EM_DMREG / view=EM_DMREG;
22074      set EMWS1.Trans_TRAIN(keep=
22075      REP_deg_malig age breast breast_quad class inv_nodes irradiat menopause
22076      node_caps tumor_size );
MPRINT(EM_DIAGRAM):   set EMWS1.Trans_TRAIN(keep= REP_deg_malig age breast breast_quad class inv_nodes irradiat menopause node_caps tumor_size );
22077      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: DATA STEP view saved on file WORK.EM_DMREG.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.TRANS_TRAIN.VIEW used (Total process time):
      real time           0.09 seconds
      cpu time            0.06 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.10 seconds
      cpu time            0.07 seconds
 
 
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Reg: DMDBClass Macro ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
22078      *------------------------------------------------------------* ;
22079      * Reg: DMDBClass Macro ;
22080      *------------------------------------------------------------* ;
22081      %macro DMDBClass;
22082          age(ASC) breast(ASC) breast_quad(ASC) class(DESC) inv_nodes(ASC) irradiat(ASC)
22083         menopause(ASC) node_caps(ASC) tumor_size(ASC)
22084      %mend DMDBClass;
22085      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
22086      * Reg: DMDBVar Macro ;
MPRINT(EM_DIAGRAM):   * Reg: DMDBVar Macro ;
22087      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
22088      %macro DMDBVar;
22089          REP_deg_malig
22090      %mend DMDBVar;
22091      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
22092      * Reg: Create DMDB;
MPRINT(EM_DIAGRAM):   * Reg: Create DMDB;
22093      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
22094      proc dmdb batch data=WORK.EM_DMREG
22095      dmdbcat=WORK.Reg_DMDB
22096      maxlevel = 513
22097      ;
MPRINT(EM_DIAGRAM):   proc dmdb batch data=WORK.EM_DMREG dmdbcat=WORK.Reg_DMDB maxlevel = 513 ;
MPRINT(EM_DIAGRAM):   class
22098      class %DMDBClass;
MPRINT(DMDBCLASS):   age(ASC) breast(ASC) breast_quad(ASC) class(DESC) inv_nodes(ASC) irradiat(ASC) menopause(ASC) node_caps(ASC) tumor_size(ASC)
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   var
22099      var %DMDBVar;
MPRINT(DMDBVAR):   REP_deg_malig
MPRINT(EM_DIAGRAM):  ;
22100      target
22101      class
22102      ;
MPRINT(EM_DIAGRAM):   target class ;
22103      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Records processed = 113   Memory used = 511K.
NOTE: There were 113 observations read from the data set EMWS1.PART_TRAIN.
NOTE: There were 113 observations read from the data set EMWS1.REPL_TRAIN.
NOTE: There were 113 observations read from the data set EMWS1.IMPT_TRAIN.
NOTE: View WORK.EM_DMREG.VIEW used (Total process time):
      real time           0.11 seconds
      cpu time            0.09 seconds
 
NOTE: There were 113 observations read from the data set EMWS1.TRANS_TRAIN.
NOTE: There were 113 observations read from the data set WORK.EM_DMREG.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.12 seconds
      cpu time            0.11 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   *--- end code ---*;
22104      quit;
22105      *--- end code ---*;
 
22106      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
22107      * Reg: Run DMREG procedure;
MPRINT(EM_DIAGRAM):   * Reg: Run DMREG procedure;
22108      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
22109      proc dmreg data=EM_DMREG dmdbcat=WORK.Reg_DMDB
22110      validata = EMWS1.Trans_VALIDATE
22111      outest = EMWS1.Reg_EMESTIMATE
22112      outterms = EMWS1.Reg_OUTTERMS
22113      outmap= EMWS1.Reg_MAPDS namelen=200
22114      ;
MPRINT(EM_DIAGRAM):   proc dmreg data=EM_DMREG dmdbcat=WORK.Reg_DMDB validata = EMWS1.Trans_VALIDATE outest = EMWS1.Reg_EMESTIMATE outterms = EMWS1.Reg_OUTTERMS outmap= EMWS1.Reg_MAPDS namelen=200 ;
22115      class
22116      class
22117      age
22118      breast
22119      breast_quad
22120      inv_nodes
22121      irradiat
22122      menopause
22123      node_caps
22124      tumor_size
22125      ;
MPRINT(EM_DIAGRAM):   class class age breast breast_quad inv_nodes irradiat menopause node_caps tumor_size ;
22126      model class =
22127      REP_deg_malig
22128      age
22129      breast
22130      breast_quad
22131      inv_nodes
22132      irradiat
22133      menopause
22134      node_caps
22135      tumor_size
22136      /level=nominal
22137      coding=DEVIATION
22138      nodesignprint
22139      ;
MPRINT(EM_DIAGRAM):   model class = REP_deg_malig age breast breast_quad inv_nodes irradiat menopause node_caps tumor_size /level=nominal coding=DEVIATION nodesignprint ;
22140      ;
MPRINT(EM_DIAGRAM):   ;
22141      score data=EMWS1.Trans_TEST
22142      out=_null_
22143      outfit=EMWS1.Reg_FITTEST
22144      role = TEST
22145      ;
MPRINT(EM_DIAGRAM):   score data=EMWS1.Trans_TEST out=_null_ outfit=EMWS1.Reg_FITTEST role = TEST ;
22146      code file="D:\\BAN210PA\Workspaces\EMWS1\Reg\EMPUBLISHSCORE.sas"
22147      group=Reg
22148      ;
MPRINT(EM_DIAGRAM):   code file="D:\\BAN210PA\Workspaces\EMWS1\Reg\EMPUBLISHSCORE.sas" group=Reg ;
22149      code file="D:\\BAN210PA\Workspaces\EMWS1\Reg\EMFLOWSCORE.sas"
22150      group=Reg
22151      residual
22152      ;
MPRINT(EM_DIAGRAM):   code file="D:\\BAN210PA\Workspaces\EMWS1\Reg\EMFLOWSCORE.sas" group=Reg residual ;
22153      run;
MPRINT(EM_DIAGRAM):   run;
 
 
NOTE: PROC DMREG is modeling the probability that class='recurrence-events'.
NOTE: Convergence criterion (GCONV=1E-6) satisfied.
NOTE: External file D:\\BAN210PA\Workspaces\EMWS1\Reg\EMPUBLISHSCORE.sas opened.
NOTE: External file D:\\BAN210PA\Workspaces\EMWS1\Reg\EMFLOWSCORE.sas opened.
NOTE: There were 88 observations read from the data set EMWS1.PART_TEST.
NOTE: There were 88 observations read from the data set EMWS1.REPL_TEST.
NOTE: View EMWS1.TRANS_TEST.VIEW used (Total process time):
      real time           2.55 seconds
      cpu time            0.32 seconds
 
NOTE: There were 88 observations read from the data set EMWS1.IMPT_TEST.
NOTE: There were 85 observations read from the data set EMWS1.PART_VALIDATE.
NOTE: There were 85 observations read from the data set EMWS1.REPL_VALIDATE.
NOTE: View EMWS1.TRANS_VALIDATE.VIEW used (Total process time):
      real time           2.78 seconds
      cpu time            0.40 seconds
 
NOTE: There were 85 observations read from the data set EMWS1.IMPT_VALIDATE.
NOTE: There were 113 observations read from the data set EMWS1.PART_TRAIN.
NOTE: There were 113 observations read from the data set EMWS1.REPL_TRAIN.
NOTE: There were 113 observations read from the data set EMWS1.IMPT_TRAIN.
NOTE: View WORK.EM_DMREG.VIEW used (Total process time):
      real time           3.00 seconds
      cpu time            0.53 seconds
 
NOTE: There were 113 observations read from the data set EMWS1.TRANS_TRAIN.
NOTE: There were 113 observations read from the data set WORK.EM_DMREG.
NOTE: There were 85 observations read from the data set EMWS1.TRANS_VALIDATE.
NOTE: There were 88 observations read from the data set EMWS1.TRANS_TEST.
NOTE: The data set EMWS1.REG_EMESTIMATE has 3 observations and 66 variables.
NOTE: The data set EMWS1.REG_OUTTERMS has 32 observations and 7 variables.
NOTE: The data set EMWS1.REG_MAPDS has 3 observations and 33 variables.
NOTE: The data set EMWS1.REG_FITTEST has 1 observations and 14 variables.
NOTE: The PROCEDURE DMREG printed pages 4-5.
NOTE: PROCEDURE DMREG used (Total process time):
      real time           3.32 seconds
      cpu time            0.56 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
22154      quit;
 
22155      proc datasets lib=WORK nolist;
MPRINT(EM_DIAGRAM):    proc datasets lib=WORK nolist;
22156      delete Reg_DMDB;
MPRINT(EM_DIAGRAM):   delete Reg_DMDB;
22157      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The file WORK.REG_DMDB (memtype=DATA) was not found, but appears on a DELETE statement.
22158      quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
22159      proc datasets lib=WORK nolist;
MPRINT(EM_DIAGRAM):    proc datasets lib=WORK nolist;
22160      delete Reg_DMDB / memtype=catalog;
MPRINT(EM_DIAGRAM):   delete Reg_DMDB / memtype=catalog;
22161      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Deleting WORK.REG_DMDB (memtype=CATALOG).
22162      quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
22163      data WORK.ESTIMATE;
MPRINT(EM_DIAGRAM):    data WORK.ESTIMATE;
22164      length _NAME_ $32;
MPRINT(EM_DIAGRAM):   length _NAME_ $32;
22165      set EMWS1.Reg_EMESTIMATE;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg_EMESTIMATE;
22166      drop _AIC_--_VMISC_
22167      ;
MPRINT(EM_DIAGRAM):   drop _AIC_--_VMISC_ ;
22168      where _TYPE_ in('PARMS', 'T', 'P');
MPRINT(EM_DIAGRAM):   where _TYPE_ in('PARMS', 'T', 'P');
22169      select(_TYPE_);
MPRINT(EM_DIAGRAM):   select(_TYPE_);
22170      when('PARMS') _NAME_='Coefficient';
MPRINT(EM_DIAGRAM):   when('PARMS') _NAME_='Coefficient';
22171      when('T') _NAME_='tValue';
MPRINT(EM_DIAGRAM):   when('T') _NAME_='tValue';
22172      when('P') _NAME_='PValue';
MPRINT(EM_DIAGRAM):   when('P') _NAME_='PValue';
22173      otherwise;
MPRINT(EM_DIAGRAM):   otherwise;
22174      end;
MPRINT(EM_DIAGRAM):   end;
22175      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set EMWS1.REG_EMESTIMATE.
      WHERE _TYPE_ in ('P', 'PARMS', 'T');
NOTE: The data set WORK.ESTIMATE has 3 observations and 34 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
22176      proc transpose data=WORK.ESTIMATE out=WORK.ESTIMATE(rename=(_NAME_=Effect));
MPRINT(EM_DIAGRAM):   proc transpose data=WORK.ESTIMATE out=WORK.ESTIMATE(rename=(_NAME_=Effect));
22177      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set WORK.ESTIMATE.
NOTE: The data set WORK.ESTIMATE has 32 observations and 5 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
22178      proc transpose data=EMWS1.Reg_MAPDS out=WORK.MAP(rename=(_NAME_=Effect INPUT=Variable
22179      TARGET=TargetLevel
22180      ));
MPRINT(EM_DIAGRAM):   proc transpose data=EMWS1.Reg_MAPDS out=WORK.MAP(rename=(_NAME_=Effect INPUT=Variable TARGET=TargetLevel ));
22181      var 'REP_deg_malig_RECURRENCE_EVENTS'n--'tumor_size45N49_RECURRENCE_EVENT'n;
MPRINT(EM_DIAGRAM):   var 'REP_deg_malig_RECURRENCE_EVENTS'n--'tumor_size45N49_RECURRENCE_EVENT'n;
22182      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set EMWS1.REG_MAPDS.
NOTE: The data set WORK.MAP has 31 observations and 5 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
22183      proc sort data=WORK.MAP;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.MAP;
22184      by Effect;
MPRINT(EM_DIAGRAM):   by Effect;
22185      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 31 observations read from the data set WORK.MAP.
NOTE: The data set WORK.MAP has 31 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
22186      proc sort data=WORK.ESTIMATE;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.ESTIMATE;
22187      by Effect;
MPRINT(EM_DIAGRAM):   by Effect;
22188      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 32 observations read from the data set WORK.ESTIMATE.
NOTE: The data set WORK.ESTIMATE has 32 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
22189      data EMWS1.Reg_EFFECTS(rename=(_LABEL_=EffectLabel));
MPRINT(EM_DIAGRAM):   data EMWS1.Reg_EFFECTS(rename=(_LABEL_=EffectLabel));
22190      length Variable ClassLevel $32;
MPRINT(EM_DIAGRAM):   length Variable ClassLevel $32;
22191      merge WORK.ESTIMATE WORK.MAP;
MPRINT(EM_DIAGRAM):   merge WORK.ESTIMATE WORK.MAP;
22192      by Effect;
MPRINT(EM_DIAGRAM):   by Effect;
22193      label Effect = "%sysfunc(sasmsg(sashelp.dmine, rpt_effect_vlabel, NOQUOTE))" Variable = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" Sign = "%sysfunc(sasmsg(sashelp.dmine, rpt_sign_vlabel, NOQUOTE))" ClassLevel =
22194         "%sysfunc(sasmsg(sashelp.dmine, rpt_level_vlabel, NOQUOTE))" Abscoefficient = "%sysfunc(sasmsg(sashelp.dmine, rpt_abscoefficient_vlabel, NOQUOTE))" Coefficient = "%sysfunc(sasmsg(sashelp.dmine, rpt_coefficient_vlabel, NOQUOTE))" _LABEL_ =
22195         "%sysfunc(sasmsg(sashelp.dmine, rpt_effectLabel_vlabel, NOQUOTE))" CODE = "%sysfunc(sasmsg(sashelp.dmine, rpt_scorecodevar_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label Effect = "Effect" Variable = "Variable" Sign = "Sign" ClassLevel = "Level" Abscoefficient = "Absolute Coefficient" Coefficient = "Coefficient" _LABEL_ = "Effect Label" CODE = "Score Code Variable";
22196      label tvalue = "%sysfunc(sasmsg(sashelp.dmine, rpt_tvalue_vlabel,         NOQUOTE))" abstvalue = "%sysfunc(sasmsg(sashelp.dmine, rpt_absoluteTvalue_vlabel, NOQUOTE))" PValue = "%sysfunc(sasmsg(sashelp.dmine, rpt_pvalue_vlabel,         NOQUOTE))"
22196    ! ;
MPRINT(EM_DIAGRAM):   label tvalue = "T-value" abstvalue = "Absolute T-value" PValue = "P Value";
22197      abstvalue = abs(tValue);
MPRINT(EM_DIAGRAM):   abstvalue = abs(tValue);
22198      drop pos;
MPRINT(EM_DIAGRAM):   drop pos;
22199      length TargetLevel $32;
MPRINT(EM_DIAGRAM):   length TargetLevel $32;
WARNING: Length of character variable TargetLevel has already been set. Use the LENGTH statement as the very first statement in the DATA STEP to declare the length of a character variable.
22200      label TargetLevel = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetLevel_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label TargetLevel = "Target Level";
22201      if index(Effect, 'Intercept') then do;
MPRINT(EM_DIAGRAM):   if index(Effect, 'Intercept') then do;
22202      variable = 'Intercept';
MPRINT(EM_DIAGRAM):   variable = 'Intercept';
22203      TargetLevel = scan(_LABEL_, 2, '=');
MPRINT(EM_DIAGRAM):   TargetLevel = scan(_LABEL_, 2, '=');
22204      end;
MPRINT(EM_DIAGRAM):   end;
22205      if ^indexc(variable, '*') then do;
MPRINT(EM_DIAGRAM):   if ^indexc(variable, '*') then do;
22206      if length(effect)>length(variable) then classlevel = substr(effect, length(variable)+1);
MPRINT(EM_DIAGRAM):   if length(effect)>length(variable) then classlevel = substr(effect, length(variable)+1);
22207      pos = index(classlevel, '_'!!TargetLevel);
MPRINT(EM_DIAGRAM):   pos = index(classlevel, '_'!!TargetLevel);
22208      if pos> 1 then classlevel = substr(classlevel, 1, pos-1);
MPRINT(EM_DIAGRAM):   if pos> 1 then classlevel = substr(classlevel, 1, pos-1);
22209      else classlevel = '';
MPRINT(EM_DIAGRAM):   else classlevel = '';
22210      end;
MPRINT(EM_DIAGRAM):   end;
22211      if Effect eq '' then Effect = Variable;
MPRINT(EM_DIAGRAM):   if Effect eq '' then Effect = Variable;
22212      if coefficient < 0 then sign = '-';
MPRINT(EM_DIAGRAM):   if coefficient < 0 then sign = '-';
22213      else sign = '+';
MPRINT(EM_DIAGRAM):   else sign = '+';
22214      abscoefficient = abs(coefficient);
MPRINT(EM_DIAGRAM):   abscoefficient = abs(coefficient);
22215      if _LABEL_ = '' then _LABEL_ = Effect;
MPRINT(EM_DIAGRAM):   if _LABEL_ = '' then _LABEL_ = Effect;
22216      if coefficient ne . then output;
MPRINT(EM_DIAGRAM):   if coefficient ne . then output;
22217      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Missing values were generated as a result of performing an operation on missing values.
      Each place is given by: (Number of times) at (Line):(Column).
      3 at 22197:13
NOTE: There were 32 observations read from the data set WORK.ESTIMATE.
NOTE: There were 31 observations read from the data set WORK.MAP.
NOTE: The data set EMWS1.REG_EFFECTS has 32 observations and 12 variables.
NOTE: DATA statement used (Total process time):
      real time           0.09 seconds
      cpu time            0.03 seconds
 
 
22218      proc sort data =EMWS1.Reg_EFFECTS;
MPRINT(EM_DIAGRAM):    proc sort data =EMWS1.Reg_EFFECTS;
22219      by
22220      TargetLevel
22221      descending abstvalue;
MPRINT(EM_DIAGRAM):   by TargetLevel descending abstvalue;
22222      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 32 observations read from the data set EMWS1.REG_EFFECTS.
NOTE: The data set EMWS1.REG_EFFECTS has 32 observations and 12 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
22223      data EMWS1.Reg_EFFECTS;
MPRINT(EM_DIAGRAM):   data EMWS1.Reg_EFFECTS;
22224      set EMWS1.Reg_EFFECTS;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg_EFFECTS;
22225      format TEffectNum 3.;
MPRINT(EM_DIAGRAM):   format TEffectNum 3.;
22226      label TEffectNum = "%sysfunc(sasmsg(sashelp.dmine, rpt_teffectnum_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label TEffectNum = "TScore Number";
22227      retain TEffectNum;
MPRINT(EM_DIAGRAM):   retain TEffectNum;
22228      by TargetLevel;
MPRINT(EM_DIAGRAM):   by TargetLevel;
22229      if first.TargetLevel then TEffectNum =1;
MPRINT(EM_DIAGRAM):   if first.TargetLevel then TEffectNum =1;
22230      else TEffectNum + 1;
MPRINT(EM_DIAGRAM):   else TEffectNum + 1;
22231      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 32 observations read from the data set EMWS1.REG_EFFECTS.
NOTE: The data set EMWS1.REG_EFFECTS has 32 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
22232      proc sort data =EMWS1.Reg_EFFECTS;
MPRINT(EM_DIAGRAM):    proc sort data =EMWS1.Reg_EFFECTS;
22233      by
22234      TargetLevel
22235      descending absCoefficient;
MPRINT(EM_DIAGRAM):   by TargetLevel descending absCoefficient;
22236      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 32 observations read from the data set EMWS1.REG_EFFECTS.
NOTE: The data set EMWS1.REG_EFFECTS has 32 observations and 13 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
22237      data EMWS1.Reg_EFFECTS;
MPRINT(EM_DIAGRAM):   data EMWS1.Reg_EFFECTS;
22238      set EMWS1.Reg_EFFECTS;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg_EFFECTS;
22239      format EffectNum 3.;
MPRINT(EM_DIAGRAM):   format EffectNum 3.;
22240      label EffectNum = "%sysfunc(sasmsg(sashelp.dmine, rpt_effectnum_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label EffectNum = "Effect Number";
22241      retain EffectNum;
MPRINT(EM_DIAGRAM):   retain EffectNum;
22242      by TargetLevel;
MPRINT(EM_DIAGRAM):   by TargetLevel;
22243      if first.TargetLevel then EffectNum =1;
MPRINT(EM_DIAGRAM):   if first.TargetLevel then EffectNum =1;
22244      else EffectNum + 1;
MPRINT(EM_DIAGRAM):   else EffectNum + 1;
22245      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 32 observations read from the data set EMWS1.REG_EFFECTS.
NOTE: The data set EMWS1.REG_EFFECTS has 32 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "August 07, 2022" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "18:56:15" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                August 07, 2022
Time:                18:56:15
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O116LCIT "D:\\BAN210PA\Workspaces\EMWS1\Reg\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O116LCIT new;
MPRINT(EM_DIAGRAM):   run;
22347      filename emflow "D:\\BAN210PA\Workspaces\EMWS1\Reg\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "D:\\BAN210PA\Workspaces\EMWS1\Reg\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Reg: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
22348      *------------------------------------------------------------*;
22349      * Reg: Scoring DATA data;
22350      *------------------------------------------------------------*;
22351      data EMWS1.Reg_TRAIN
22352      / view=EMWS1.Reg_TRAIN
22353      ;
MPRINT(EM_DIAGRAM):   data EMWS1.Reg_TRAIN / view=EMWS1.Reg_TRAIN ;
22354      set EMWS1.Trans_TRAIN
22355      ;
MPRINT(EM_DIAGRAM):   set EMWS1.Trans_TRAIN ;
22356      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file D:\\BAN210PA\Workspaces\EMWS1\Reg\EMFLOWSCORE.sas.
22357     +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
22358     +*** begin scoring code for regression;
MPRINT(EM_DIAGRAM):   *** begin scoring code for regression;
22359     +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
22360     +
22361     +length _WARN_ $4;
MPRINT(EM_DIAGRAM):   length _WARN_ $4;
22362     +label _WARN_ = 'Warnings' ;
MPRINT(EM_DIAGRAM):   label _WARN_ = 'Warnings' ;
22363     +
22364     +length I_class $ 20;
MPRINT(EM_DIAGRAM):   length I_class $ 20;
22365     +label I_class = 'Into: class' ;
MPRINT(EM_DIAGRAM):   label I_class = 'Into: class' ;
22366     +*** Target Values;
MPRINT(EM_DIAGRAM):   *** Target Values;
22367     +array REGDRF [2] $20 _temporary_ ('RECURRENCE-EVENTS' 'NO-RECURRENCE-EVENTS'
22368     +        );
MPRINT(EM_DIAGRAM):   array REGDRF [2] $20 _temporary_ ('RECURRENCE-EVENTS' 'NO-RECURRENCE-EVENTS' );
22369     +label U_class = 'Unnormalized Into: class' ;
MPRINT(EM_DIAGRAM):   label U_class = 'Unnormalized Into: class' ;
22370     +format U_class $20.;
MPRINT(EM_DIAGRAM):   format U_class $20.;
22371     +length U_class $ 20;
MPRINT(EM_DIAGRAM):   length U_class $ 20;
22372     +*** Unnormalized target values;
MPRINT(EM_DIAGRAM):   *** Unnormalized target values;
22373     +array REGDRU[2] $ 20 _temporary_ ('recurrence-events   '
22374     +'no-recurrence-events' );
MPRINT(EM_DIAGRAM):   array REGDRU[2] $ 20 _temporary_ ('recurrence-events   ' 'no-recurrence-events' );
22375     +
22376     +*** Generate dummy variables for class ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for class ;
22377     +drop _Y ;
MPRINT(EM_DIAGRAM):   drop _Y ;
22378     +label F_class = 'From: class' ;
MPRINT(EM_DIAGRAM):   label F_class = 'From: class' ;
22379     +length F_class $ 20;
MPRINT(EM_DIAGRAM):   length F_class $ 20;
22380     +F_class = put( class , $20. );
MPRINT(EM_DIAGRAM):   F_class = put( class , $20. );
22381     +%DMNORMIP( F_class )
MPRINT(DMNORMIP):   call dmnorm(F_class,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if missing( class ) then do;
MPRINT(EM_DIAGRAM):   _Y = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
22382     +if missing( class ) then do;
MPRINT(EM_DIAGRAM):   if F_class = 'NO-RECURRENCE-EVENTS' then do;
22383     +   _Y = .;
MPRINT(EM_DIAGRAM):   _Y = 1;
22384     +end;
MPRINT(EM_DIAGRAM):   end;
22385     +else do;
MPRINT(EM_DIAGRAM):   else if F_class = 'RECURRENCE-EVENTS' then do;
22386     +   if F_class = 'NO-RECURRENCE-EVENTS'  then do;
MPRINT(EM_DIAGRAM):   _Y = 0;
22387     +      _Y = 1;
MPRINT(EM_DIAGRAM):   end;
22388     +   end;
22389     +   else if F_class = 'RECURRENCE-EVENTS'  then do;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _Y = .;
22390     +      _Y = 0;
MPRINT(EM_DIAGRAM):   end;
22391     +   end;
MPRINT(EM_DIAGRAM):   end;
22392     +   else do;
MPRINT(EM_DIAGRAM):   drop _DM_BAD;
22393     +      _Y = .;
MPRINT(EM_DIAGRAM):   _DM_BAD=0;
22394     +   end;
22395     +end;
MPRINT(EM_DIAGRAM):   *** Check REP_deg_malig for missing values ;
22396     +
MPRINT(EM_DIAGRAM):   if missing( REP_deg_malig ) then do;
22397     +drop _DM_BAD;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
22398     +_DM_BAD=0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
22399     +
MPRINT(EM_DIAGRAM):   end;
22400     +*** Check REP_deg_malig for missing values ;
22401     +if missing( REP_deg_malig ) then do;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for age ;
22402     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   drop _1_0 _1_1 _1_2 _1_3 ;
22403     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
22404     +end;
MPRINT(EM_DIAGRAM):   _1_0 = 0;
22405     +
MPRINT(EM_DIAGRAM):   _1_1 = 0;
22406     +*** Generate dummy variables for age ;
MPRINT(EM_DIAGRAM):   _1_2 = 0;
22407     +drop _1_0 _1_1 _1_2 _1_3 ;
MPRINT(EM_DIAGRAM):   _1_3 = 0;
22408     +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   if missing( age ) then do;
22409     +_1_0 = 0;
MPRINT(EM_DIAGRAM):   _1_0 = .;
22410     +_1_1 = 0;
MPRINT(EM_DIAGRAM):   _1_1 = .;
22411     +_1_2 = 0;
MPRINT(EM_DIAGRAM):   _1_2 = .;
22412     +_1_3 = 0;
MPRINT(EM_DIAGRAM):   _1_3 = .;
22413     +if missing( age ) then do;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
22414     +   _1_0 = .;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
22415     +   _1_1 = .;
MPRINT(EM_DIAGRAM):   end;
22416     +   _1_2 = .;
22417     +   _1_3 = .;
MPRINT(EM_DIAGRAM):   else do;
22418     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   length _dm5 $ 5;
22419     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   drop _dm5 ;
22420     +end;
MPRINT(EM_DIAGRAM):   _dm5 = put( age , $5. );
22421     +else do;
22422     +   length _dm5 $ 5; drop _dm5 ;
MPRINT(DMNORMIP):   call dmnorm(_dm5,
22423     +   _dm5 = put( age , $5. );
22424     +   %DMNORMIP( _dm5 )
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
MPRINT(EM_DIAGRAM):   if _dm5 <= '50-59' then do;
MPRINT(EM_DIAGRAM):   if _dm5 <= '40-49' then do;
MPRINT(EM_DIAGRAM):   if _dm5 = '30-39' then do;
MPRINT(EM_DIAGRAM):   _1_0 = 1;
22425     +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
22426     +   if _dm5 <= '50-59'  then do;
MPRINT(EM_DIAGRAM):   end;
22427     +      if _dm5 <= '40-49'  then do;
22428     +         if _dm5 = '30-39'  then do;
MPRINT(EM_DIAGRAM):   else do;
22429     +            _1_0 = 1;
MPRINT(EM_DIAGRAM):   if _dm5 = '40-49' then do;
22430     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _1_1 = 1;
22431     +         end;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
22432     +         else do;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
22433     +            if _dm5 = '40-49'  then do;
MPRINT(EM_DIAGRAM):   end;
22434     +               _1_1 = 1;
22435     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   else do;
22436     +            end;
MPRINT(EM_DIAGRAM):   if _dm5 = '50-59' then do;
22437     +         end;
MPRINT(EM_DIAGRAM):   _1_2 = 1;
22438     +      end;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
22439     +      else do;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
22440     +         if _dm5 = '50-59'  then do;
MPRINT(EM_DIAGRAM):   end;
22441     +            _1_2 = 1;
22442     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   else do;
22443     +         end;
MPRINT(EM_DIAGRAM):   if _dm5 = '60-69' then do;
22444     +      end;
MPRINT(EM_DIAGRAM):   _1_3 = 1;
22445     +   end;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
22446     +   else do;
MPRINT(EM_DIAGRAM):   end;
22447     +      if _dm5 = '60-69'  then do;
MPRINT(EM_DIAGRAM):   else do;
22448     +         _1_3 = 1;
MPRINT(EM_DIAGRAM):   if _dm5 = '70-79' then do;
22449     +         _dm_find = 1;
MPRINT(EM_DIAGRAM):   _1_0 = -1;
22450     +      end;
MPRINT(EM_DIAGRAM):   _1_1 = -1;
22451     +      else do;
MPRINT(EM_DIAGRAM):   _1_2 = -1;
MPRINT(EM_DIAGRAM):   _1_3 = -1;
22452     +         if _dm5 = '70-79'  then do;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
22453     +            _1_0 = -1;
MPRINT(EM_DIAGRAM):   end;
22454     +            _1_1 = -1;
MPRINT(EM_DIAGRAM):   end;
22455     +            _1_2 = -1;
MPRINT(EM_DIAGRAM):   end;
22456     +            _1_3 = -1;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
22457     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _1_0 = .;
22458     +         end;
MPRINT(EM_DIAGRAM):   _1_1 = .;
22459     +      end;
MPRINT(EM_DIAGRAM):   _1_2 = .;
22460     +   end;
MPRINT(EM_DIAGRAM):   _1_3 = .;
22461     +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
22462     +      _1_0 = .;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
22463     +      _1_1 = .;
MPRINT(EM_DIAGRAM):   end;
22464     +      _1_2 = .;
MPRINT(EM_DIAGRAM):   end;
22465     +      _1_3 = .;
22466     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for breast ;
22467     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   drop _2_0 ;
22468     +   end;
MPRINT(EM_DIAGRAM):   if missing( breast ) then do;
22469     +end;
MPRINT(EM_DIAGRAM):   _2_0 = .;
22470     +
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
22471     +*** Generate dummy variables for breast ;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
22472     +drop _2_0 ;
MPRINT(EM_DIAGRAM):   end;
22473     +if missing( breast ) then do;
22474     +   _2_0 = .;
MPRINT(EM_DIAGRAM):   else do;
22475     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   length _dm5 $ 5;
22476     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   drop _dm5 ;
22477     +end;
MPRINT(EM_DIAGRAM):   _dm5 = put( breast , $5. );
22478     +else do;
22479     +   length _dm5 $ 5; drop _dm5 ;
MPRINT(DMNORMIP):   call dmnorm(_dm5,
22480     +   _dm5 = put( breast , $5. );
22481     +   %DMNORMIP( _dm5 )
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm5 = 'LEFT' then do;
MPRINT(EM_DIAGRAM):   _2_0 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm5 = 'RIGHT' then do;
22482     +   if _dm5 = 'LEFT'  then do;
MPRINT(EM_DIAGRAM):   _2_0 = -1;
22483     +      _2_0 = 1;
MPRINT(EM_DIAGRAM):   end;
22484     +   end;
22485     +   else if _dm5 = 'RIGHT'  then do;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _2_0 = .;
22486     +      _2_0 = -1;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
22487     +   end;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
22488     +   else do;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
22489     +      _2_0 = .;
22490     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for breast_quad ;
22491     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   drop _3_0 _3_1 _3_2 _3_3 _3_4 ;
22492     +   end;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
22493     +end;
MPRINT(EM_DIAGRAM):   _3_0 = 0;
22494     +
MPRINT(EM_DIAGRAM):   _3_1 = 0;
22495     +*** Generate dummy variables for breast_quad ;
MPRINT(EM_DIAGRAM):   _3_2 = 0;
22496     +drop _3_0 _3_1 _3_2 _3_3 _3_4 ;
MPRINT(EM_DIAGRAM):   _3_3 = 0;
22497     +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   _3_4 = 0;
22498     +_3_0 = 0;
MPRINT(EM_DIAGRAM):   if missing( breast_quad ) then do;
22499     +_3_1 = 0;
MPRINT(EM_DIAGRAM):   _3_0 = .;
22500     +_3_2 = 0;
MPRINT(EM_DIAGRAM):   _3_1 = .;
22501     +_3_3 = 0;
MPRINT(EM_DIAGRAM):   _3_2 = .;
22502     +_3_4 = 0;
MPRINT(EM_DIAGRAM):   _3_3 = .;
22503     +if missing( breast_quad ) then do;
MPRINT(EM_DIAGRAM):   _3_4 = .;
22504     +   _3_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
22505     +   _3_1 = .;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
22506     +   _3_2 = .;
MPRINT(EM_DIAGRAM):   end;
22507     +   _3_3 = .;
22508     +   _3_4 = .;
MPRINT(EM_DIAGRAM):   else do;
22509     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   length _dm9 $ 9;
22510     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   drop _dm9 ;
22511     +end;
22512     +else do;
22513     +   length _dm9 $ 9; drop _dm9 ;
22514     +   %DMNORMCP( breast_quad , _dm9 )
MPRINT(DMNORMCP):   _dm9=dmnorm(breast_quad,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):   if _dm9 = 'LEFT_LOW' then do;
MPRINT(EM_DIAGRAM):   _3_2 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm9 = 'LEFT_UP' then do;
22515     +   if _dm9 = 'LEFT_LOW'  then do;
MPRINT(EM_DIAGRAM):   _3_3 = 1;
22516     +      _3_2 = 1;
MPRINT(EM_DIAGRAM):   end;
22517     +   end;
22518     +   else if _dm9 = 'LEFT_UP'  then do;
MPRINT(EM_DIAGRAM):   else if _dm9 = 'RIGHT_UP' then do;
MPRINT(EM_DIAGRAM):   _3_0 = -1;
22519     +      _3_3 = 1;
MPRINT(EM_DIAGRAM):   _3_1 = -1;
22520     +   end;
MPRINT(EM_DIAGRAM):   _3_2 = -1;
22521     +   else if _dm9 = 'RIGHT_UP'  then do;
MPRINT(EM_DIAGRAM):   _3_3 = -1;
MPRINT(EM_DIAGRAM):   _3_4 = -1;
22522     +      _3_0 = -1;
MPRINT(EM_DIAGRAM):   end;
22523     +      _3_1 = -1;
22524     +      _3_2 = -1;
MPRINT(EM_DIAGRAM):   else if _dm9 = 'CENTRAL' then do;
22525     +      _3_3 = -1;
MPRINT(EM_DIAGRAM):   _3_1 = 1;
22526     +      _3_4 = -1;
MPRINT(EM_DIAGRAM):   end;
22527     +   end;
22528     +   else if _dm9 = 'CENTRAL'  then do;
MPRINT(EM_DIAGRAM):   else if _dm9 = 'RIGHT_LOW' then do;
MPRINT(EM_DIAGRAM):   _3_4 = 1;
22529     +      _3_1 = 1;
MPRINT(EM_DIAGRAM):   end;
22530     +   end;
22531     +   else if _dm9 = 'RIGHT_LOW'  then do;
MPRINT(EM_DIAGRAM):   else if _dm9 = '?' then do;
MPRINT(EM_DIAGRAM):   _3_0 = 1;
22532     +      _3_4 = 1;
MPRINT(EM_DIAGRAM):   end;
22533     +   end;
22534     +   else if _dm9 = '?'  then do;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _3_0 = .;
22535     +      _3_0 = 1;
MPRINT(EM_DIAGRAM):   _3_1 = .;
22536     +   end;
MPRINT(EM_DIAGRAM):   _3_2 = .;
22537     +   else do;
MPRINT(EM_DIAGRAM):   _3_3 = .;
MPRINT(EM_DIAGRAM):   _3_4 = .;
22538     +      _3_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
22539     +      _3_1 = .;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
22540     +      _3_2 = .;
MPRINT(EM_DIAGRAM):   end;
22541     +      _3_3 = .;
MPRINT(EM_DIAGRAM):   end;
22542     +      _3_4 = .;
22543     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for inv_nodes ;
22544     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   drop _4_0 _4_1 _4_2 _4_3 _4_4 ;
22545     +   end;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
22546     +end;
MPRINT(EM_DIAGRAM):   _4_0 = 0;
22547     +
MPRINT(EM_DIAGRAM):   _4_1 = 0;
22548     +*** Generate dummy variables for inv_nodes ;
MPRINT(EM_DIAGRAM):   _4_2 = 0;
22549     +drop _4_0 _4_1 _4_2 _4_3 _4_4 ;
MPRINT(EM_DIAGRAM):   _4_3 = 0;
22550     +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   _4_4 = 0;
22551     +_4_0 = 0;
MPRINT(EM_DIAGRAM):   if missing( inv_nodes ) then do;
22552     +_4_1 = 0;
MPRINT(EM_DIAGRAM):   _4_0 = .;
22553     +_4_2 = 0;
MPRINT(EM_DIAGRAM):   _4_1 = .;
22554     +_4_3 = 0;
MPRINT(EM_DIAGRAM):   _4_2 = .;
22555     +_4_4 = 0;
MPRINT(EM_DIAGRAM):   _4_3 = .;
22556     +if missing( inv_nodes ) then do;
MPRINT(EM_DIAGRAM):   _4_4 = .;
22557     +   _4_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
22558     +   _4_1 = .;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
22559     +   _4_2 = .;
MPRINT(EM_DIAGRAM):   end;
22560     +   _4_3 = .;
22561     +   _4_4 = .;
MPRINT(EM_DIAGRAM):   else do;
22562     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   length _dm5 $ 5;
22563     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   drop _dm5 ;
22564     +end;
MPRINT(EM_DIAGRAM):   _dm5 = put( inv_nodes , $5. );
22565     +else do;
22566     +   length _dm5 $ 5; drop _dm5 ;
MPRINT(DMNORMIP):   call dmnorm(_dm5,
22567     +   _dm5 = put( inv_nodes , $5. );
22568     +   %DMNORMIP( _dm5 )
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm5 = '0-2' then do;
MPRINT(EM_DIAGRAM):   _4_0 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm5 = '44625' then do;
22569     +   if _dm5 = '0-2'  then do;
MPRINT(EM_DIAGRAM):   _4_3 = 1;
22570     +      _4_0 = 1;
MPRINT(EM_DIAGRAM):   end;
22571     +   end;
22572     +   else if _dm5 = '44625'  then do;
MPRINT(EM_DIAGRAM):   else if _dm5 = '15-17' then do;
MPRINT(EM_DIAGRAM):   _4_1 = 1;
22573     +      _4_3 = 1;
MPRINT(EM_DIAGRAM):   end;
22574     +   end;
22575     +   else if _dm5 = '15-17'  then do;
MPRINT(EM_DIAGRAM):   else if _dm5 = '44815' then do;
MPRINT(EM_DIAGRAM):   _4_0 = -1;
22576     +      _4_1 = 1;
MPRINT(EM_DIAGRAM):   _4_1 = -1;
22577     +   end;
MPRINT(EM_DIAGRAM):   _4_2 = -1;
22578     +   else if _dm5 = '44815'  then do;
MPRINT(EM_DIAGRAM):   _4_3 = -1;
MPRINT(EM_DIAGRAM):   _4_4 = -1;
22579     +      _4_0 = -1;
MPRINT(EM_DIAGRAM):   end;
22580     +      _4_1 = -1;
22581     +      _4_2 = -1;
MPRINT(EM_DIAGRAM):   else if _dm5 = '44720' then do;
22582     +      _4_3 = -1;
MPRINT(EM_DIAGRAM):   _4_4 = 1;
22583     +      _4_4 = -1;
MPRINT(EM_DIAGRAM):   end;
22584     +   end;
22585     +   else if _dm5 = '44720'  then do;
MPRINT(EM_DIAGRAM):   else if _dm5 = '24-26' then do;
MPRINT(EM_DIAGRAM):   _4_2 = 1;
22586     +      _4_4 = 1;
MPRINT(EM_DIAGRAM):   end;
22587     +   end;
22588     +   else if _dm5 = '24-26'  then do;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _4_0 = .;
22589     +      _4_2 = 1;
MPRINT(EM_DIAGRAM):   _4_1 = .;
22590     +   end;
MPRINT(EM_DIAGRAM):   _4_2 = .;
22591     +   else do;
MPRINT(EM_DIAGRAM):   _4_3 = .;
MPRINT(EM_DIAGRAM):   _4_4 = .;
22592     +      _4_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
22593     +      _4_1 = .;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
22594     +      _4_2 = .;
MPRINT(EM_DIAGRAM):   end;
22595     +      _4_3 = .;
MPRINT(EM_DIAGRAM):   end;
22596     +      _4_4 = .;
22597     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for irradiat ;
22598     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   drop _5_0 ;
22599     +   end;
MPRINT(EM_DIAGRAM):   if missing( irradiat ) then do;
22600     +end;
MPRINT(EM_DIAGRAM):   _5_0 = .;
22601     +
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
22602     +*** Generate dummy variables for irradiat ;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
22603     +drop _5_0 ;
MPRINT(EM_DIAGRAM):   end;
22604     +if missing( irradiat ) then do;
22605     +   _5_0 = .;
MPRINT(EM_DIAGRAM):   else do;
22606     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   length _dm3 $ 3;
22607     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   drop _dm3 ;
22608     +end;
MPRINT(EM_DIAGRAM):   _dm3 = put( irradiat , $3. );
22609     +else do;
22610     +   length _dm3 $ 3; drop _dm3 ;
MPRINT(DMNORMIP):   call dmnorm(_dm3,
22611     +   _dm3 = put( irradiat , $3. );
22612     +   %DMNORMIP( _dm3 )
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm3 = 'NO' then do;
MPRINT(EM_DIAGRAM):   _5_0 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm3 = 'YES' then do;
22613     +   if _dm3 = 'NO'  then do;
MPRINT(EM_DIAGRAM):   _5_0 = -1;
22614     +      _5_0 = 1;
MPRINT(EM_DIAGRAM):   end;
22615     +   end;
22616     +   else if _dm3 = 'YES'  then do;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _5_0 = .;
22617     +      _5_0 = -1;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
22618     +   end;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
22619     +   else do;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
22620     +      _5_0 = .;
22621     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for menopause ;
22622     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   drop _6_0 _6_1 ;
22623     +   end;
MPRINT(EM_DIAGRAM):   if missing( menopause ) then do;
22624     +end;
MPRINT(EM_DIAGRAM):   _6_0 = .;
22625     +
MPRINT(EM_DIAGRAM):   _6_1 = .;
22626     +*** Generate dummy variables for menopause ;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
22627     +drop _6_0 _6_1 ;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
22628     +if missing( menopause ) then do;
MPRINT(EM_DIAGRAM):   end;
22629     +   _6_0 = .;
22630     +   _6_1 = .;
MPRINT(EM_DIAGRAM):   else do;
22631     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   length _dm7 $ 7;
22632     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   drop _dm7 ;
22633     +end;
MPRINT(EM_DIAGRAM):   _dm7 = put( menopause , $7. );
22634     +else do;
22635     +   length _dm7 $ 7; drop _dm7 ;
MPRINT(DMNORMIP):   call dmnorm(_dm7,
22636     +   _dm7 = put( menopause , $7. );
22637     +   %DMNORMIP( _dm7 )
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm7 = 'PREMENO' then do;
MPRINT(EM_DIAGRAM):   _6_0 = -1;
MPRINT(EM_DIAGRAM):   _6_1 = -1;
MPRINT(EM_DIAGRAM):   end;
22638     +   if _dm7 = 'PREMENO'  then do;
MPRINT(EM_DIAGRAM):   else if _dm7 = 'GE40' then do;
22639     +      _6_0 = -1;
MPRINT(EM_DIAGRAM):   _6_0 = 1;
22640     +      _6_1 = -1;
MPRINT(EM_DIAGRAM):   _6_1 = 0;
22641     +   end;
MPRINT(EM_DIAGRAM):   end;
22642     +   else if _dm7 = 'GE40'  then do;
MPRINT(EM_DIAGRAM):   else if _dm7 = 'LT40' then do;
22643     +      _6_0 = 1;
MPRINT(EM_DIAGRAM):   _6_0 = 0;
22644     +      _6_1 = 0;
MPRINT(EM_DIAGRAM):   _6_1 = 1;
22645     +   end;
MPRINT(EM_DIAGRAM):   end;
22646     +   else if _dm7 = 'LT40'  then do;
MPRINT(EM_DIAGRAM):   else do;
22647     +      _6_0 = 0;
MPRINT(EM_DIAGRAM):   _6_0 = .;
22648     +      _6_1 = 1;
MPRINT(EM_DIAGRAM):   _6_1 = .;
22649     +   end;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
22650     +   else do;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
22651     +      _6_0 = .;
MPRINT(EM_DIAGRAM):   end;
22652     +      _6_1 = .;
22653     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for node_caps ;
22654     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   drop _7_0 _7_1 ;
22655     +   end;
MPRINT(EM_DIAGRAM):   if missing( node_caps ) then do;
22656     +end;
MPRINT(EM_DIAGRAM):   _7_0 = .;
22657     +
MPRINT(EM_DIAGRAM):   _7_1 = .;
22658     +*** Generate dummy variables for node_caps ;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
22659     +drop _7_0 _7_1 ;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
22660     +if missing( node_caps ) then do;
MPRINT(EM_DIAGRAM):   end;
22661     +   _7_0 = .;
22662     +   _7_1 = .;
MPRINT(EM_DIAGRAM):   else do;
22663     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   length _dm3 $ 3;
22664     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   drop _dm3 ;
22665     +end;
22666     +else do;
22667     +   length _dm3 $ 3; drop _dm3 ;
MPRINT(DMNORMCP):   _dm3=dmnorm(node_caps,
22668     +   %DMNORMCP( node_caps , _dm3 )
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):   if _dm3 = 'NO' then do;
MPRINT(EM_DIAGRAM):   _7_0 = 0;
MPRINT(EM_DIAGRAM):   _7_1 = 1;
MPRINT(EM_DIAGRAM):   end;
22669     +   if _dm3 = 'NO'  then do;
MPRINT(EM_DIAGRAM):   else if _dm3 = 'YES' then do;
22670     +      _7_0 = 0;
MPRINT(EM_DIAGRAM):   _7_0 = -1;
22671     +      _7_1 = 1;
MPRINT(EM_DIAGRAM):   _7_1 = -1;
22672     +   end;
MPRINT(EM_DIAGRAM):   end;
22673     +   else if _dm3 = 'YES'  then do;
MPRINT(EM_DIAGRAM):   else if _dm3 = '?' then do;
22674     +      _7_0 = -1;
MPRINT(EM_DIAGRAM):   _7_0 = 1;
22675     +      _7_1 = -1;
MPRINT(EM_DIAGRAM):   _7_1 = 0;
22676     +   end;
MPRINT(EM_DIAGRAM):   end;
22677     +   else if _dm3 = '?'  then do;
MPRINT(EM_DIAGRAM):   else do;
22678     +      _7_0 = 1;
MPRINT(EM_DIAGRAM):   _7_0 = .;
22679     +      _7_1 = 0;
MPRINT(EM_DIAGRAM):   _7_1 = .;
22680     +   end;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
22681     +   else do;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
22682     +      _7_0 = .;
MPRINT(EM_DIAGRAM):   end;
22683     +      _7_1 = .;
22684     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for tumor_size ;
22685     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   drop _8_0 _8_1 _8_2 _8_3 _8_4 _8_5 _8_6 _8_7 _8_8 _8_9 ;
22686     +   end;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
22687     +end;
MPRINT(EM_DIAGRAM):   _8_0 = 0;
22688     +
MPRINT(EM_DIAGRAM):   _8_1 = 0;
22689     +*** Generate dummy variables for tumor_size ;
MPRINT(EM_DIAGRAM):   _8_2 = 0;
22690     +drop _8_0 _8_1 _8_2 _8_3 _8_4 _8_5 _8_6 _8_7 _8_8 _8_9 ;
MPRINT(EM_DIAGRAM):   _8_3 = 0;
22691     +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   _8_4 = 0;
22692     +_8_0 = 0;
MPRINT(EM_DIAGRAM):   _8_5 = 0;
22693     +_8_1 = 0;
MPRINT(EM_DIAGRAM):   _8_6 = 0;
22694     +_8_2 = 0;
MPRINT(EM_DIAGRAM):   _8_7 = 0;
22695     +_8_3 = 0;
MPRINT(EM_DIAGRAM):   _8_8 = 0;
22696     +_8_4 = 0;
MPRINT(EM_DIAGRAM):   _8_9 = 0;
22697     +_8_5 = 0;
MPRINT(EM_DIAGRAM):   if missing( tumor_size ) then do;
22698     +_8_6 = 0;
MPRINT(EM_DIAGRAM):   _8_0 = .;
22699     +_8_7 = 0;
MPRINT(EM_DIAGRAM):   _8_1 = .;
22700     +_8_8 = 0;
MPRINT(EM_DIAGRAM):   _8_2 = .;
22701     +_8_9 = 0;
MPRINT(EM_DIAGRAM):   _8_3 = .;
22702     +if missing( tumor_size ) then do;
MPRINT(EM_DIAGRAM):   _8_4 = .;
22703     +   _8_0 = .;
MPRINT(EM_DIAGRAM):   _8_5 = .;
22704     +   _8_1 = .;
MPRINT(EM_DIAGRAM):   _8_6 = .;
22705     +   _8_2 = .;
MPRINT(EM_DIAGRAM):   _8_7 = .;
22706     +   _8_3 = .;
MPRINT(EM_DIAGRAM):   _8_8 = .;
22707     +   _8_4 = .;
MPRINT(EM_DIAGRAM):   _8_9 = .;
22708     +   _8_5 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
22709     +   _8_6 = .;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
22710     +   _8_7 = .;
MPRINT(EM_DIAGRAM):   end;
22711     +   _8_8 = .;
22712     +   _8_9 = .;
MPRINT(EM_DIAGRAM):   else do;
22713     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   length _dm5 $ 5;
22714     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   drop _dm5 ;
22715     +end;
22716     +else do;
22717     +   length _dm5 $ 5; drop _dm5 ;
MPRINT(DMNORMCP):   _dm5=dmnorm(tumor_size,
22718     +   %DMNORMCP( tumor_size , _dm5 )
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
MPRINT(EM_DIAGRAM):   if _dm5 <= '35-39' then do;
MPRINT(EM_DIAGRAM):   if _dm5 <= '20-24' then do;
MPRINT(EM_DIAGRAM):   if _dm5 <= '15-19' then do;
MPRINT(EM_DIAGRAM):   if _dm5 = '0-4' then do;
22719     +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _8_0 = 1;
22720     +   if _dm5 <= '35-39'  then do;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
22721     +      if _dm5 <= '20-24'  then do;
MPRINT(EM_DIAGRAM):   end;
22722     +         if _dm5 <= '15-19'  then do;
22723     +            if _dm5 = '0-4'  then do;
MPRINT(EM_DIAGRAM):   else do;
22724     +               _8_0 = 1;
MPRINT(EM_DIAGRAM):   if _dm5 = '15-19' then do;
22725     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _8_1 = 1;
22726     +            end;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
22727     +            else do;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
22728     +               if _dm5 = '15-19'  then do;
MPRINT(EM_DIAGRAM):   end;
22729     +                  _8_1 = 1;
22730     +                  _dm_find = 1;
MPRINT(EM_DIAGRAM):   else do;
22731     +               end;
MPRINT(EM_DIAGRAM):   if _dm5 = '20-24' then do;
22732     +            end;
MPRINT(EM_DIAGRAM):   _8_2 = 1;
22733     +         end;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
22734     +         else do;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
22735     +            if _dm5 = '20-24'  then do;
MPRINT(EM_DIAGRAM):   end;
22736     +               _8_2 = 1;
22737     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   else do;
22738     +            end;
MPRINT(EM_DIAGRAM):   if _dm5 <= '30-34' then do;
22739     +         end;
MPRINT(EM_DIAGRAM):   if _dm5 = '25-29' then do;
22740     +      end;
MPRINT(EM_DIAGRAM):   _8_3 = 1;
22741     +      else do;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
22742     +         if _dm5 <= '30-34'  then do;
22743     +            if _dm5 = '25-29'  then do;
MPRINT(EM_DIAGRAM):   else do;
22744     +               _8_3 = 1;
MPRINT(EM_DIAGRAM):   if _dm5 = '30-34' then do;
22745     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _8_4 = 1;
22746     +            end;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
22747     +            else do;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
22748     +               if _dm5 = '30-34'  then do;
MPRINT(EM_DIAGRAM):   end;
22749     +                  _8_4 = 1;
22750     +                  _dm_find = 1;
MPRINT(EM_DIAGRAM):   else do;
22751     +               end;
MPRINT(EM_DIAGRAM):   if _dm5 = '35-39' then do;
22752     +            end;
MPRINT(EM_DIAGRAM):   _8_5 = 1;
22753     +         end;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
22754     +         else do;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
22755     +            if _dm5 = '35-39'  then do;
MPRINT(EM_DIAGRAM):   end;
22756     +               _8_5 = 1;
MPRINT(EM_DIAGRAM):   end;
22757     +               _dm_find = 1;
22758     +            end;
MPRINT(EM_DIAGRAM):   else do;
22759     +         end;
MPRINT(EM_DIAGRAM):   if _dm5 <= '44848' then do;
22760     +      end;
MPRINT(EM_DIAGRAM):   if _dm5 <= '44690' then do;
22761     +   end;
MPRINT(EM_DIAGRAM):   if _dm5 = '40-44' then do;
22762     +   else do;
MPRINT(EM_DIAGRAM):   _8_6 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
22763     +      if _dm5 <= '44848'  then do;
MPRINT(EM_DIAGRAM):   end;
22764     +         if _dm5 <= '44690'  then do;
22765     +            if _dm5 = '40-44'  then do;
MPRINT(EM_DIAGRAM):   else do;
22766     +               _8_6 = 1;
MPRINT(EM_DIAGRAM):   if _dm5 = '44690' then do;
22767     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _8_7 = 1;
22768     +            end;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
22769     +            else do;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
22770     +               if _dm5 = '44690'  then do;
MPRINT(EM_DIAGRAM):   end;
22771     +                  _8_7 = 1;
22772     +                  _dm_find = 1;
MPRINT(EM_DIAGRAM):   else do;
22773     +               end;
MPRINT(EM_DIAGRAM):   if _dm5 = '44848' then do;
22774     +            end;
MPRINT(EM_DIAGRAM):   _8_8 = 1;
22775     +         end;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
22776     +         else do;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
22777     +            if _dm5 = '44848'  then do;
MPRINT(EM_DIAGRAM):   end;
22778     +               _8_8 = 1;
22779     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   else do;
22780     +            end;
MPRINT(EM_DIAGRAM):   if _dm5 = '45-49' then do;
22781     +         end;
MPRINT(EM_DIAGRAM):   _8_9 = 1;
22782     +      end;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
22783     +      else do;
MPRINT(EM_DIAGRAM):   end;
22784     +         if _dm5 = '45-49'  then do;
MPRINT(EM_DIAGRAM):   else do;
22785     +            _8_9 = 1;
MPRINT(EM_DIAGRAM):   if _dm5 = '50-54' then do;
22786     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _8_0 = -1;
22787     +         end;
MPRINT(EM_DIAGRAM):   _8_1 = -1;
22788     +         else do;
MPRINT(EM_DIAGRAM):   _8_2 = -1;
MPRINT(EM_DIAGRAM):   _8_3 = -1;
22789     +            if _dm5 = '50-54'  then do;
MPRINT(EM_DIAGRAM):   _8_4 = -1;
22790     +               _8_0 = -1;
MPRINT(EM_DIAGRAM):   _8_5 = -1;
22791     +               _8_1 = -1;
MPRINT(EM_DIAGRAM):   _8_6 = -1;
22792     +               _8_2 = -1;
MPRINT(EM_DIAGRAM):   _8_7 = -1;
22793     +               _8_3 = -1;
MPRINT(EM_DIAGRAM):   _8_8 = -1;
22794     +               _8_4 = -1;
MPRINT(EM_DIAGRAM):   _8_9 = -1;
22795     +               _8_5 = -1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
22796     +               _8_6 = -1;
MPRINT(EM_DIAGRAM):   end;
22797     +               _8_7 = -1;
MPRINT(EM_DIAGRAM):   end;
22798     +               _8_8 = -1;
MPRINT(EM_DIAGRAM):   end;
22799     +               _8_9 = -1;
MPRINT(EM_DIAGRAM):   end;
22800     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
22801     +            end;
MPRINT(EM_DIAGRAM):   _8_0 = .;
22802     +         end;
MPRINT(EM_DIAGRAM):   _8_1 = .;
22803     +      end;
MPRINT(EM_DIAGRAM):   _8_2 = .;
22804     +   end;
MPRINT(EM_DIAGRAM):   _8_3 = .;
22805     +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   _8_4 = .;
22806     +      _8_0 = .;
MPRINT(EM_DIAGRAM):   _8_5 = .;
22807     +      _8_1 = .;
MPRINT(EM_DIAGRAM):   _8_6 = .;
22808     +      _8_2 = .;
MPRINT(EM_DIAGRAM):   _8_7 = .;
22809     +      _8_3 = .;
MPRINT(EM_DIAGRAM):   _8_8 = .;
22810     +      _8_4 = .;
MPRINT(EM_DIAGRAM):   _8_9 = .;
22811     +      _8_5 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
22812     +      _8_6 = .;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
22813     +      _8_7 = .;
MPRINT(EM_DIAGRAM):   end;
22814     +      _8_8 = .;
MPRINT(EM_DIAGRAM):   end;
22815     +      _8_9 = .;
22816     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   *** If missing inputs, use averages;
22817     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   if _DM_BAD > 0 then do;
22818     +   end;
MPRINT(EM_DIAGRAM):   _P0 = 0.2920353982;
22819     +end;
MPRINT(EM_DIAGRAM):   _P1 = 0.7079646018;
22820     +
MPRINT(EM_DIAGRAM):   goto REGDR1;
22821     +*** If missing inputs, use averages;
MPRINT(EM_DIAGRAM):   end;
22822     +if _DM_BAD > 0 then do;
22823     +   _P0 = 0.2920353982;
MPRINT(EM_DIAGRAM):   *** Compute Linear Predictor;
22824     +   _P1 = 0.7079646018;
MPRINT(EM_DIAGRAM):   drop _TEMP;
22825     +   goto REGDR1;
MPRINT(EM_DIAGRAM):   drop _LP0 ;
22826     +end;
MPRINT(EM_DIAGRAM):   _LP0 = 0;
22827     +
22828     +*** Compute Linear Predictor;
MPRINT(EM_DIAGRAM):   *** Effect: REP_deg_malig ;
22829     +drop _TEMP;
MPRINT(EM_DIAGRAM):   _TEMP = REP_deg_malig ;
22830     +drop _LP0 ;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.74188815265941 * _TEMP);
22831     +_LP0 = 0;
22832     +
MPRINT(EM_DIAGRAM):   *** Effect: age ;
22833     +***  Effect: REP_deg_malig ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
22834     +_TEMP = REP_deg_malig ;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1.2711526472824) * _TEMP * _1_0;
22835     +_LP0 = _LP0 + (    0.74188815265941 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 3.51118587377913) * _TEMP * _1_1;
22836     +
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1.77015584013962) * _TEMP * _1_2;
22837     +***  Effect: age ;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 3.24429045271765) * _TEMP * _1_3;
22838     +_TEMP = 1;
22839     +_LP0 = _LP0 + (     1.2711526472824) * _TEMP * _1_0;
MPRINT(EM_DIAGRAM):   *** Effect: breast ;
22840     +_LP0 = _LP0 + (    3.51118587377913) * _TEMP * _1_1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
22841     +_LP0 = _LP0 + (    1.77015584013962) * _TEMP * _1_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.55362156774278) * _TEMP * _2_0;
22842     +_LP0 = _LP0 + (    3.24429045271765) * _TEMP * _1_3;
22843     +
MPRINT(EM_DIAGRAM):   *** Effect: breast_quad ;
22844     +***  Effect: breast ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
22845     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 13.7360898428639) * _TEMP * _3_0;
22846     +_LP0 = _LP0 + (   -0.55362156774278) * _TEMP * _2_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1.34657631410209) * _TEMP * _3_1;
22847     +
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -2.87020658947285) * _TEMP * _3_2;
22848     +***  Effect: breast_quad ;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -3.60528108373917) * _TEMP * _3_3;
22849     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -2.02455025813794) * _TEMP * _3_4;
22850     +_LP0 = _LP0 + (    13.7360898428639) * _TEMP * _3_0;
22851     +_LP0 = _LP0 + (   -1.34657631410209) * _TEMP * _3_1;
MPRINT(EM_DIAGRAM):   *** Effect: inv_nodes ;
22852     +_LP0 = _LP0 + (   -2.87020658947285) * _TEMP * _3_2;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
22853     +_LP0 = _LP0 + (   -3.60528108373917) * _TEMP * _3_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -3.92999632834698) * _TEMP * _4_0;
22854     +_LP0 = _LP0 + (   -2.02455025813794) * _TEMP * _3_4;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1.85577896916898) * _TEMP * _4_1;
22855     +
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 11.4860062818446) * _TEMP * _4_2;
22856     +***  Effect: inv_nodes ;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -2.40138030631945) * _TEMP * _4_3;
22857     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1.69160020226667) * _TEMP * _4_4;
22858     +_LP0 = _LP0 + (   -3.92999632834698) * _TEMP * _4_0;
22859     +_LP0 = _LP0 + (   -1.85577896916898) * _TEMP * _4_1;
MPRINT(EM_DIAGRAM):   *** Effect: irradiat ;
22860     +_LP0 = _LP0 + (    11.4860062818446) * _TEMP * _4_2;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
22861     +_LP0 = _LP0 + (   -2.40138030631945) * _TEMP * _4_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.05106811531383) * _TEMP * _5_0;
22862     +_LP0 = _LP0 + (   -1.69160020226667) * _TEMP * _4_4;
22863     +
MPRINT(EM_DIAGRAM):   *** Effect: menopause ;
22864     +***  Effect: irradiat ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
22865     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 3.68241923615777) * _TEMP * _6_0;
22866     +_LP0 = _LP0 + (    0.05106811531383) * _TEMP * _5_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -8.03309066307678) * _TEMP * _6_1;
22867     +
22868     +***  Effect: menopause ;
MPRINT(EM_DIAGRAM):   *** Effect: node_caps ;
22869     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
22870     +_LP0 = _LP0 + (    3.68241923615777) * _TEMP * _6_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -9.61607022474882) * _TEMP * _7_0;
22871     +_LP0 = _LP0 + (   -8.03309066307678) * _TEMP * _6_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 4.8963217947722) * _TEMP * _7_1;
22872     +
22873     +***  Effect: node_caps ;
MPRINT(EM_DIAGRAM):   *** Effect: tumor_size ;
22874     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
22875     +_LP0 = _LP0 + (   -9.61607022474882) * _TEMP * _7_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -10.0604143863662) * _TEMP * _8_0;
22876     +_LP0 = _LP0 + (     4.8963217947722) * _TEMP * _7_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 4.6393813293927) * _TEMP * _8_1;
22877     +
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 5.07127301211026) * _TEMP * _8_2;
22878     +***  Effect: tumor_size ;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 5.06886354257634) * _TEMP * _8_3;
22879     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 5.07640420879079) * _TEMP * _8_4;
22880     +_LP0 = _LP0 + (   -10.0604143863662) * _TEMP * _8_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 3.66865920399611) * _TEMP * _8_5;
22881     +_LP0 = _LP0 + (     4.6393813293927) * _TEMP * _8_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 5.25094886049268) * _TEMP * _8_6;
22882     +_LP0 = _LP0 + (    5.07127301211026) * _TEMP * _8_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -8.25096914859845) * _TEMP * _8_7;
22883     +_LP0 = _LP0 + (    5.06886354257634) * _TEMP * _8_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -7.96985669817867) * _TEMP * _8_8;
22884     +_LP0 = _LP0 + (    5.07640420879079) * _TEMP * _8_4;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -8.99285729799633) * _TEMP * _8_9;
22885     +_LP0 = _LP0 + (    3.66865920399611) * _TEMP * _8_5;
22886     +_LP0 = _LP0 + (    5.25094886049268) * _TEMP * _8_6;
MPRINT(EM_DIAGRAM):   *** Naive Posterior Probabilities;
22887     +_LP0 = _LP0 + (   -8.25096914859845) * _TEMP * _8_7;
MPRINT(EM_DIAGRAM):   drop _MAXP _IY _P0 _P1;
22888     +_LP0 = _LP0 + (   -7.96985669817867) * _TEMP * _8_8;
MPRINT(EM_DIAGRAM):   drop _LPMAX;
22889     +_LP0 = _LP0 + (   -8.99285729799633) * _TEMP * _8_9;
MPRINT(EM_DIAGRAM):   _LPMAX= 0;
22890     +
MPRINT(EM_DIAGRAM):   _LP0 = -12.2948238272586 + _LP0;
22891     +*** Naive Posterior Probabilities;
MPRINT(EM_DIAGRAM):   if _LPMAX < _LP0 then _LPMAX = _LP0;
22892     +drop _MAXP _IY _P0 _P1;
MPRINT(EM_DIAGRAM):   _LP0 = exp(_LP0 - _LPMAX);
22893     +drop _LPMAX;
MPRINT(EM_DIAGRAM):   _LPMAX = exp(-_LPMAX);
22894     +_LPMAX= 0;
MPRINT(EM_DIAGRAM):   _P1 = 1 / (_LPMAX + _LP0);
22895     +_LP0 =    -12.2948238272586 + _LP0;
MPRINT(EM_DIAGRAM):   _P0 = _LP0 * _P1;
22896     +if _LPMAX < _LP0 then _LPMAX = _LP0;
MPRINT(EM_DIAGRAM):   _P1 = _LPMAX * _P1;
22897     +_LP0 = exp(_LP0 - _LPMAX);
22898     +_LPMAX = exp(-_LPMAX);
22899     +_P1 = 1 / (_LPMAX + _LP0);
22900     +_P0 = _LP0 * _P1;
22901     +_P1 = _LPMAX * _P1;
MPRINT(EM_DIAGRAM):   REGDR1: *** Residuals;
22902     +
MPRINT(EM_DIAGRAM):   if (_Y = .) then do;
22903     +REGDR1:
MPRINT(EM_DIAGRAM):   R_classrecurrence_events = .;
MPRINT(EM_DIAGRAM):   R_classno_recurrence_events = .;
22904     +
MPRINT(EM_DIAGRAM):   end;
22905     +*** Residuals;
22906     +if (_Y = .) then do;
MPRINT(EM_DIAGRAM):   else do;
22907     +   R_classrecurrence_events = .;
MPRINT(EM_DIAGRAM):   label R_classrecurrence_events = 'Residual: class=recurrence-events' ;
22908     +   R_classno_recurrence_events = .;
22909     +end;
22910     +else do;
MPRINT(EM_DIAGRAM):   label R_classno_recurrence_events = 'Residual: class=no-recurrence-events' ;
22911     +    label R_classrecurrence_events = 'Residual: class=recurrence-events' ;
MPRINT(EM_DIAGRAM):   R_classrecurrence_events = - _P0;
MPRINT(EM_DIAGRAM):   R_classno_recurrence_events = - _P1;
22912     +    label R_classno_recurrence_events =
MPRINT(EM_DIAGRAM):   select( _Y );
22913     +'Residual: class=no-recurrence-events' ;
MPRINT(EM_DIAGRAM):   when (0) R_classrecurrence_events = R_classrecurrence_events + 1;
MPRINT(EM_DIAGRAM):   when (1) R_classno_recurrence_events = R_classno_recurrence_events + 1;
22914     +   R_classrecurrence_events = - _P0;
MPRINT(EM_DIAGRAM):   end;
22915     +   R_classno_recurrence_events = - _P1;
MPRINT(EM_DIAGRAM):   end;
22916     +   select( _Y );
22917     +      when (0)  R_classrecurrence_events = R_classrecurrence_events + 1;
MPRINT(EM_DIAGRAM):   *** Posterior Probabilities and Predicted Level;
22918     +      when (1)  R_classno_recurrence_events = R_classno_recurrence_events + 1;
MPRINT(EM_DIAGRAM):   label P_classrecurrence_events = 'Predicted: class=recurrence-events' ;
22919     +   end;
22920     +end;
MPRINT(EM_DIAGRAM):   label P_classno_recurrence_events = 'Predicted: class=no-recurrence-events' ;
22921     +
22922     +*** Posterior Probabilities and Predicted Level;
MPRINT(EM_DIAGRAM):   P_classrecurrence_events = _P0;
22923     +label P_classrecurrence_events = 'Predicted: class=recurrence-events' ;
MPRINT(EM_DIAGRAM):   _MAXP = _P0;
MPRINT(EM_DIAGRAM):   _IY = 1;
22924     +label P_classno_recurrence_events = 'Predicted: class=no-recurrence-events' ;
MPRINT(EM_DIAGRAM):   P_classno_recurrence_events = _P1;
MPRINT(EM_DIAGRAM):   if (_P1 > _MAXP + 1E-8) then do;
22925     +P_classrecurrence_events = _P0;
MPRINT(EM_DIAGRAM):   _MAXP = _P1;
22926     +_MAXP = _P0;
MPRINT(EM_DIAGRAM):   _IY = 2;
22927     +_IY = 1;
MPRINT(EM_DIAGRAM):   end;
22928     +P_classno_recurrence_events = _P1;
MPRINT(EM_DIAGRAM):   I_class = REGDRF[_IY];
22929     +if (_P1 >  _MAXP + 1E-8) then do;
MPRINT(EM_DIAGRAM):   U_class = REGDRU[_IY];
22930     +   _MAXP = _P1;
22931     +   _IY = 2;
MPRINT(EM_DIAGRAM):   *************************************;
22932     +end;
MPRINT(EM_DIAGRAM):   ***** end scoring code for regression;
22933     +I_class = REGDRF[_IY];
MPRINT(EM_DIAGRAM):   *************************************;
22934     +U_class = REGDRU[_IY];
22935     +
22936     +*************************************;
22937     +***** end scoring code for regression;
22938     +*************************************;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
22939      run;
 
NOTE: DATA STEP view saved on file EMWS1.REG_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.TRANS_TRAIN.VIEW used (Total process time):
      real time           0.14 seconds
      cpu time            0.14 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.16 seconds
      cpu time            0.14 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
22940      quit;
22941      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
22942      filename emflow "D:\\BAN210PA\Workspaces\EMWS1\Reg\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "D:\\BAN210PA\Workspaces\EMWS1\Reg\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Reg: Scoring VALIDATE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
22943      *------------------------------------------------------------*;
22944      * Reg: Scoring VALIDATE data;
22945      *------------------------------------------------------------*;
22946      data EMWS1.Reg_VALIDATE
22947      / view=EMWS1.Reg_VALIDATE
22948      ;
MPRINT(EM_DIAGRAM):   data EMWS1.Reg_VALIDATE / view=EMWS1.Reg_VALIDATE ;
22949      set EMWS1.Trans_VALIDATE
22950      ;
MPRINT(EM_DIAGRAM):   set EMWS1.Trans_VALIDATE ;
22951      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file D:\\BAN210PA\Workspaces\EMWS1\Reg\EMFLOWSCORE.sas.
22952     +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
22953     +*** begin scoring code for regression;
MPRINT(EM_DIAGRAM):   *** begin scoring code for regression;
22954     +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
22955     +
22956     +length _WARN_ $4;
MPRINT(EM_DIAGRAM):   length _WARN_ $4;
22957     +label _WARN_ = 'Warnings' ;
MPRINT(EM_DIAGRAM):   label _WARN_ = 'Warnings' ;
22958     +
22959     +length I_class $ 20;
MPRINT(EM_DIAGRAM):   length I_class $ 20;
22960     +label I_class = 'Into: class' ;
MPRINT(EM_DIAGRAM):   label I_class = 'Into: class' ;
22961     +*** Target Values;
MPRINT(EM_DIAGRAM):   *** Target Values;
22962     +array REGDRF [2] $20 _temporary_ ('RECURRENCE-EVENTS' 'NO-RECURRENCE-EVENTS'
22963     +        );
MPRINT(EM_DIAGRAM):   array REGDRF [2] $20 _temporary_ ('RECURRENCE-EVENTS' 'NO-RECURRENCE-EVENTS' );
22964     +label U_class = 'Unnormalized Into: class' ;
MPRINT(EM_DIAGRAM):   label U_class = 'Unnormalized Into: class' ;
22965     +format U_class $20.;
MPRINT(EM_DIAGRAM):   format U_class $20.;
22966     +length U_class $ 20;
MPRINT(EM_DIAGRAM):   length U_class $ 20;
22967     +*** Unnormalized target values;
MPRINT(EM_DIAGRAM):   *** Unnormalized target values;
22968     +array REGDRU[2] $ 20 _temporary_ ('recurrence-events   '
22969     +'no-recurrence-events' );
MPRINT(EM_DIAGRAM):   array REGDRU[2] $ 20 _temporary_ ('recurrence-events   ' 'no-recurrence-events' );
22970     +
22971     +*** Generate dummy variables for class ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for class ;
22972     +drop _Y ;
MPRINT(EM_DIAGRAM):   drop _Y ;
22973     +label F_class = 'From: class' ;
MPRINT(EM_DIAGRAM):   label F_class = 'From: class' ;
22974     +length F_class $ 20;
MPRINT(EM_DIAGRAM):   length F_class $ 20;
22975     +F_class = put( class , $20. );
MPRINT(EM_DIAGRAM):   F_class = put( class , $20. );
22976     +%DMNORMIP( F_class )
MPRINT(DMNORMIP):   call dmnorm(F_class,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
22977     +if missing( class ) then do;
MPRINT(EM_DIAGRAM):   if missing( class ) then do;
22978     +   _Y = .;
MPRINT(EM_DIAGRAM):   _Y = .;
22979     +end;
MPRINT(EM_DIAGRAM):   end;
22980     +else do;
MPRINT(EM_DIAGRAM):   else do;
22981     +   if F_class = 'NO-RECURRENCE-EVENTS'  then do;
MPRINT(EM_DIAGRAM):   if F_class = 'NO-RECURRENCE-EVENTS' then do;
22982     +      _Y = 1;
MPRINT(EM_DIAGRAM):   _Y = 1;
22983     +   end;
MPRINT(EM_DIAGRAM):   end;
22984     +   else if F_class = 'RECURRENCE-EVENTS'  then do;
MPRINT(EM_DIAGRAM):   else if F_class = 'RECURRENCE-EVENTS' then do;
22985     +      _Y = 0;
MPRINT(EM_DIAGRAM):   _Y = 0;
22986     +   end;
MPRINT(EM_DIAGRAM):   end;
22987     +   else do;
MPRINT(EM_DIAGRAM):   else do;
22988     +      _Y = .;
MPRINT(EM_DIAGRAM):   _Y = .;
22989     +   end;
MPRINT(EM_DIAGRAM):   end;
22990     +end;
MPRINT(EM_DIAGRAM):   end;
22991     +
22992     +drop _DM_BAD;
MPRINT(EM_DIAGRAM):   drop _DM_BAD;
22993     +_DM_BAD=0;
MPRINT(EM_DIAGRAM):   _DM_BAD=0;
22994     +
22995     +*** Check REP_deg_malig for missing values ;
MPRINT(EM_DIAGRAM):   *** Check REP_deg_malig for missing values ;
22996     +if missing( REP_deg_malig ) then do;
MPRINT(EM_DIAGRAM):   if missing( REP_deg_malig ) then do;
22997     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
22998     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
22999     +end;
MPRINT(EM_DIAGRAM):   end;
23000     +
23001     +*** Generate dummy variables for age ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for age ;
23002     +drop _1_0 _1_1 _1_2 _1_3 ;
MPRINT(EM_DIAGRAM):   drop _1_0 _1_1 _1_2 _1_3 ;
23003     +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
23004     +_1_0 = 0;
MPRINT(EM_DIAGRAM):   _1_0 = 0;
23005     +_1_1 = 0;
MPRINT(EM_DIAGRAM):   _1_1 = 0;
23006     +_1_2 = 0;
MPRINT(EM_DIAGRAM):   _1_2 = 0;
23007     +_1_3 = 0;
MPRINT(EM_DIAGRAM):   _1_3 = 0;
23008     +if missing( age ) then do;
MPRINT(EM_DIAGRAM):   if missing( age ) then do;
23009     +   _1_0 = .;
MPRINT(EM_DIAGRAM):   _1_0 = .;
23010     +   _1_1 = .;
MPRINT(EM_DIAGRAM):   _1_1 = .;
23011     +   _1_2 = .;
MPRINT(EM_DIAGRAM):   _1_2 = .;
23012     +   _1_3 = .;
MPRINT(EM_DIAGRAM):   _1_3 = .;
23013     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
23014     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
23015     +end;
MPRINT(EM_DIAGRAM):   end;
23016     +else do;
MPRINT(EM_DIAGRAM):   else do;
23017     +   length _dm5 $ 5; drop _dm5 ;
MPRINT(EM_DIAGRAM):   length _dm5 $ 5;
MPRINT(EM_DIAGRAM):   drop _dm5 ;
23018     +   _dm5 = put( age , $5. );
MPRINT(EM_DIAGRAM):   _dm5 = put( age , $5. );
23019     +   %DMNORMIP( _dm5 )
MPRINT(DMNORMIP):   call dmnorm(_dm5,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
23020     +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
23021     +   if _dm5 <= '50-59'  then do;
MPRINT(EM_DIAGRAM):   if _dm5 <= '50-59' then do;
23022     +      if _dm5 <= '40-49'  then do;
MPRINT(EM_DIAGRAM):   if _dm5 <= '40-49' then do;
23023     +         if _dm5 = '30-39'  then do;
MPRINT(EM_DIAGRAM):   if _dm5 = '30-39' then do;
23024     +            _1_0 = 1;
MPRINT(EM_DIAGRAM):   _1_0 = 1;
23025     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
23026     +         end;
MPRINT(EM_DIAGRAM):   end;
23027     +         else do;
MPRINT(EM_DIAGRAM):   else do;
23028     +            if _dm5 = '40-49'  then do;
MPRINT(EM_DIAGRAM):   if _dm5 = '40-49' then do;
23029     +               _1_1 = 1;
MPRINT(EM_DIAGRAM):   _1_1 = 1;
23030     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
23031     +            end;
MPRINT(EM_DIAGRAM):   end;
23032     +         end;
MPRINT(EM_DIAGRAM):   end;
23033     +      end;
MPRINT(EM_DIAGRAM):   end;
23034     +      else do;
MPRINT(EM_DIAGRAM):   else do;
23035     +         if _dm5 = '50-59'  then do;
MPRINT(EM_DIAGRAM):   if _dm5 = '50-59' then do;
23036     +            _1_2 = 1;
MPRINT(EM_DIAGRAM):   _1_2 = 1;
23037     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
23038     +         end;
MPRINT(EM_DIAGRAM):   end;
23039     +      end;
MPRINT(EM_DIAGRAM):   end;
23040     +   end;
MPRINT(EM_DIAGRAM):   end;
23041     +   else do;
MPRINT(EM_DIAGRAM):   else do;
23042     +      if _dm5 = '60-69'  then do;
MPRINT(EM_DIAGRAM):   if _dm5 = '60-69' then do;
23043     +         _1_3 = 1;
MPRINT(EM_DIAGRAM):   _1_3 = 1;
23044     +         _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
23045     +      end;
MPRINT(EM_DIAGRAM):   end;
23046     +      else do;
MPRINT(EM_DIAGRAM):   else do;
23047     +         if _dm5 = '70-79'  then do;
MPRINT(EM_DIAGRAM):   if _dm5 = '70-79' then do;
23048     +            _1_0 = -1;
MPRINT(EM_DIAGRAM):   _1_0 = -1;
23049     +            _1_1 = -1;
MPRINT(EM_DIAGRAM):   _1_1 = -1;
23050     +            _1_2 = -1;
MPRINT(EM_DIAGRAM):   _1_2 = -1;
23051     +            _1_3 = -1;
MPRINT(EM_DIAGRAM):   _1_3 = -1;
23052     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
23053     +         end;
MPRINT(EM_DIAGRAM):   end;
23054     +      end;
MPRINT(EM_DIAGRAM):   end;
23055     +   end;
MPRINT(EM_DIAGRAM):   end;
23056     +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
23057     +      _1_0 = .;
MPRINT(EM_DIAGRAM):   _1_0 = .;
23058     +      _1_1 = .;
MPRINT(EM_DIAGRAM):   _1_1 = .;
23059     +      _1_2 = .;
MPRINT(EM_DIAGRAM):   _1_2 = .;
23060     +      _1_3 = .;
MPRINT(EM_DIAGRAM):   _1_3 = .;
23061     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
23062     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
23063     +   end;
MPRINT(EM_DIAGRAM):   end;
23064     +end;
MPRINT(EM_DIAGRAM):   end;
23065     +
23066     +*** Generate dummy variables for breast ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for breast ;
23067     +drop _2_0 ;
MPRINT(EM_DIAGRAM):   drop _2_0 ;
23068     +if missing( breast ) then do;
MPRINT(EM_DIAGRAM):   if missing( breast ) then do;
23069     +   _2_0 = .;
MPRINT(EM_DIAGRAM):   _2_0 = .;
23070     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
23071     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
23072     +end;
MPRINT(EM_DIAGRAM):   end;
23073     +else do;
MPRINT(EM_DIAGRAM):   else do;
23074     +   length _dm5 $ 5; drop _dm5 ;
MPRINT(EM_DIAGRAM):   length _dm5 $ 5;
MPRINT(EM_DIAGRAM):   drop _dm5 ;
23075     +   _dm5 = put( breast , $5. );
MPRINT(EM_DIAGRAM):   _dm5 = put( breast , $5. );
23076     +   %DMNORMIP( _dm5 )
MPRINT(DMNORMIP):   call dmnorm(_dm5,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
23077     +   if _dm5 = 'LEFT'  then do;
MPRINT(EM_DIAGRAM):   if _dm5 = 'LEFT' then do;
23078     +      _2_0 = 1;
MPRINT(EM_DIAGRAM):   _2_0 = 1;
23079     +   end;
MPRINT(EM_DIAGRAM):   end;
23080     +   else if _dm5 = 'RIGHT'  then do;
MPRINT(EM_DIAGRAM):   else if _dm5 = 'RIGHT' then do;
23081     +      _2_0 = -1;
MPRINT(EM_DIAGRAM):   _2_0 = -1;
23082     +   end;
MPRINT(EM_DIAGRAM):   end;
23083     +   else do;
MPRINT(EM_DIAGRAM):   else do;
23084     +      _2_0 = .;
MPRINT(EM_DIAGRAM):   _2_0 = .;
23085     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
23086     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
23087     +   end;
MPRINT(EM_DIAGRAM):   end;
23088     +end;
MPRINT(EM_DIAGRAM):   end;
23089     +
23090     +*** Generate dummy variables for breast_quad ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for breast_quad ;
23091     +drop _3_0 _3_1 _3_2 _3_3 _3_4 ;
MPRINT(EM_DIAGRAM):   drop _3_0 _3_1 _3_2 _3_3 _3_4 ;
23092     +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
23093     +_3_0 = 0;
MPRINT(EM_DIAGRAM):   _3_0 = 0;
23094     +_3_1 = 0;
MPRINT(EM_DIAGRAM):   _3_1 = 0;
23095     +_3_2 = 0;
MPRINT(EM_DIAGRAM):   _3_2 = 0;
23096     +_3_3 = 0;
MPRINT(EM_DIAGRAM):   _3_3 = 0;
23097     +_3_4 = 0;
MPRINT(EM_DIAGRAM):   _3_4 = 0;
23098     +if missing( breast_quad ) then do;
MPRINT(EM_DIAGRAM):   if missing( breast_quad ) then do;
23099     +   _3_0 = .;
MPRINT(EM_DIAGRAM):   _3_0 = .;
23100     +   _3_1 = .;
MPRINT(EM_DIAGRAM):   _3_1 = .;
23101     +   _3_2 = .;
MPRINT(EM_DIAGRAM):   _3_2 = .;
23102     +   _3_3 = .;
MPRINT(EM_DIAGRAM):   _3_3 = .;
23103     +   _3_4 = .;
MPRINT(EM_DIAGRAM):   _3_4 = .;
23104     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
23105     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
23106     +end;
MPRINT(EM_DIAGRAM):   end;
23107     +else do;
MPRINT(EM_DIAGRAM):   else do;
23108     +   length _dm9 $ 9; drop _dm9 ;
MPRINT(EM_DIAGRAM):   length _dm9 $ 9;
MPRINT(EM_DIAGRAM):   drop _dm9 ;
23109     +   %DMNORMCP( breast_quad , _dm9 )
MPRINT(DMNORMCP):   _dm9=dmnorm(breast_quad,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
23110     +   if _dm9 = 'LEFT_LOW'  then do;
MPRINT(EM_DIAGRAM):   if _dm9 = 'LEFT_LOW' then do;
23111     +      _3_2 = 1;
MPRINT(EM_DIAGRAM):   _3_2 = 1;
23112     +   end;
MPRINT(EM_DIAGRAM):   end;
23113     +   else if _dm9 = 'LEFT_UP'  then do;
MPRINT(EM_DIAGRAM):   else if _dm9 = 'LEFT_UP' then do;
23114     +      _3_3 = 1;
MPRINT(EM_DIAGRAM):   _3_3 = 1;
23115     +   end;
MPRINT(EM_DIAGRAM):   end;
23116     +   else if _dm9 = 'RIGHT_UP'  then do;
MPRINT(EM_DIAGRAM):   else if _dm9 = 'RIGHT_UP' then do;
23117     +      _3_0 = -1;
MPRINT(EM_DIAGRAM):   _3_0 = -1;
23118     +      _3_1 = -1;
MPRINT(EM_DIAGRAM):   _3_1 = -1;
23119     +      _3_2 = -1;
MPRINT(EM_DIAGRAM):   _3_2 = -1;
23120     +      _3_3 = -1;
MPRINT(EM_DIAGRAM):   _3_3 = -1;
23121     +      _3_4 = -1;
MPRINT(EM_DIAGRAM):   _3_4 = -1;
23122     +   end;
MPRINT(EM_DIAGRAM):   end;
23123     +   else if _dm9 = 'CENTRAL'  then do;
MPRINT(EM_DIAGRAM):   else if _dm9 = 'CENTRAL' then do;
23124     +      _3_1 = 1;
MPRINT(EM_DIAGRAM):   _3_1 = 1;
23125     +   end;
MPRINT(EM_DIAGRAM):   end;
23126     +   else if _dm9 = 'RIGHT_LOW'  then do;
MPRINT(EM_DIAGRAM):   else if _dm9 = 'RIGHT_LOW' then do;
23127     +      _3_4 = 1;
MPRINT(EM_DIAGRAM):   _3_4 = 1;
23128     +   end;
MPRINT(EM_DIAGRAM):   end;
23129     +   else if _dm9 = '?'  then do;
MPRINT(EM_DIAGRAM):   else if _dm9 = '?' then do;
23130     +      _3_0 = 1;
MPRINT(EM_DIAGRAM):   _3_0 = 1;
23131     +   end;
MPRINT(EM_DIAGRAM):   end;
23132     +   else do;
MPRINT(EM_DIAGRAM):   else do;
23133     +      _3_0 = .;
MPRINT(EM_DIAGRAM):   _3_0 = .;
23134     +      _3_1 = .;
MPRINT(EM_DIAGRAM):   _3_1 = .;
23135     +      _3_2 = .;
MPRINT(EM_DIAGRAM):   _3_2 = .;
23136     +      _3_3 = .;
MPRINT(EM_DIAGRAM):   _3_3 = .;
23137     +      _3_4 = .;
MPRINT(EM_DIAGRAM):   _3_4 = .;
23138     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
23139     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
23140     +   end;
MPRINT(EM_DIAGRAM):   end;
23141     +end;
MPRINT(EM_DIAGRAM):   end;
23142     +
23143     +*** Generate dummy variables for inv_nodes ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for inv_nodes ;
23144     +drop _4_0 _4_1 _4_2 _4_3 _4_4 ;
MPRINT(EM_DIAGRAM):   drop _4_0 _4_1 _4_2 _4_3 _4_4 ;
23145     +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
23146     +_4_0 = 0;
MPRINT(EM_DIAGRAM):   _4_0 = 0;
23147     +_4_1 = 0;
MPRINT(EM_DIAGRAM):   _4_1 = 0;
23148     +_4_2 = 0;
MPRINT(EM_DIAGRAM):   _4_2 = 0;
23149     +_4_3 = 0;
MPRINT(EM_DIAGRAM):   _4_3 = 0;
23150     +_4_4 = 0;
MPRINT(EM_DIAGRAM):   _4_4 = 0;
23151     +if missing( inv_nodes ) then do;
MPRINT(EM_DIAGRAM):   if missing( inv_nodes ) then do;
23152     +   _4_0 = .;
MPRINT(EM_DIAGRAM):   _4_0 = .;
23153     +   _4_1 = .;
MPRINT(EM_DIAGRAM):   _4_1 = .;
23154     +   _4_2 = .;
MPRINT(EM_DIAGRAM):   _4_2 = .;
23155     +   _4_3 = .;
MPRINT(EM_DIAGRAM):   _4_3 = .;
23156     +   _4_4 = .;
MPRINT(EM_DIAGRAM):   _4_4 = .;
23157     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
23158     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
23159     +end;
MPRINT(EM_DIAGRAM):   end;
23160     +else do;
MPRINT(EM_DIAGRAM):   else do;
23161     +   length _dm5 $ 5; drop _dm5 ;
MPRINT(EM_DIAGRAM):   length _dm5 $ 5;
MPRINT(EM_DIAGRAM):   drop _dm5 ;
23162     +   _dm5 = put( inv_nodes , $5. );
MPRINT(EM_DIAGRAM):   _dm5 = put( inv_nodes , $5. );
23163     +   %DMNORMIP( _dm5 )
MPRINT(DMNORMIP):   call dmnorm(_dm5,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
23164     +   if _dm5 = '0-2'  then do;
MPRINT(EM_DIAGRAM):   if _dm5 = '0-2' then do;
23165     +      _4_0 = 1;
MPRINT(EM_DIAGRAM):   _4_0 = 1;
23166     +   end;
MPRINT(EM_DIAGRAM):   end;
23167     +   else if _dm5 = '44625'  then do;
MPRINT(EM_DIAGRAM):   else if _dm5 = '44625' then do;
23168     +      _4_3 = 1;
MPRINT(EM_DIAGRAM):   _4_3 = 1;
23169     +   end;
MPRINT(EM_DIAGRAM):   end;
23170     +   else if _dm5 = '15-17'  then do;
MPRINT(EM_DIAGRAM):   else if _dm5 = '15-17' then do;
23171     +      _4_1 = 1;
MPRINT(EM_DIAGRAM):   _4_1 = 1;
23172     +   end;
MPRINT(EM_DIAGRAM):   end;
23173     +   else if _dm5 = '44815'  then do;
MPRINT(EM_DIAGRAM):   else if _dm5 = '44815' then do;
23174     +      _4_0 = -1;
MPRINT(EM_DIAGRAM):   _4_0 = -1;
23175     +      _4_1 = -1;
MPRINT(EM_DIAGRAM):   _4_1 = -1;
23176     +      _4_2 = -1;
MPRINT(EM_DIAGRAM):   _4_2 = -1;
23177     +      _4_3 = -1;
MPRINT(EM_DIAGRAM):   _4_3 = -1;
23178     +      _4_4 = -1;
MPRINT(EM_DIAGRAM):   _4_4 = -1;
23179     +   end;
MPRINT(EM_DIAGRAM):   end;
23180     +   else if _dm5 = '44720'  then do;
MPRINT(EM_DIAGRAM):   else if _dm5 = '44720' then do;
23181     +      _4_4 = 1;
MPRINT(EM_DIAGRAM):   _4_4 = 1;
23182     +   end;
MPRINT(EM_DIAGRAM):   end;
23183     +   else if _dm5 = '24-26'  then do;
MPRINT(EM_DIAGRAM):   else if _dm5 = '24-26' then do;
23184     +      _4_2 = 1;
MPRINT(EM_DIAGRAM):   _4_2 = 1;
23185     +   end;
MPRINT(EM_DIAGRAM):   end;
23186     +   else do;
MPRINT(EM_DIAGRAM):   else do;
23187     +      _4_0 = .;
MPRINT(EM_DIAGRAM):   _4_0 = .;
23188     +      _4_1 = .;
MPRINT(EM_DIAGRAM):   _4_1 = .;
23189     +      _4_2 = .;
MPRINT(EM_DIAGRAM):   _4_2 = .;
23190     +      _4_3 = .;
MPRINT(EM_DIAGRAM):   _4_3 = .;
23191     +      _4_4 = .;
MPRINT(EM_DIAGRAM):   _4_4 = .;
23192     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
23193     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
23194     +   end;
MPRINT(EM_DIAGRAM):   end;
23195     +end;
MPRINT(EM_DIAGRAM):   end;
23196     +
23197     +*** Generate dummy variables for irradiat ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for irradiat ;
23198     +drop _5_0 ;
MPRINT(EM_DIAGRAM):   drop _5_0 ;
23199     +if missing( irradiat ) then do;
MPRINT(EM_DIAGRAM):   if missing( irradiat ) then do;
23200     +   _5_0 = .;
MPRINT(EM_DIAGRAM):   _5_0 = .;
23201     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
23202     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
23203     +end;
MPRINT(EM_DIAGRAM):   end;
23204     +else do;
MPRINT(EM_DIAGRAM):   else do;
23205     +   length _dm3 $ 3; drop _dm3 ;
MPRINT(EM_DIAGRAM):   length _dm3 $ 3;
MPRINT(EM_DIAGRAM):   drop _dm3 ;
23206     +   _dm3 = put( irradiat , $3. );
MPRINT(EM_DIAGRAM):   _dm3 = put( irradiat , $3. );
23207     +   %DMNORMIP( _dm3 )
MPRINT(DMNORMIP):   call dmnorm(_dm3,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
23208     +   if _dm3 = 'NO'  then do;
MPRINT(EM_DIAGRAM):   if _dm3 = 'NO' then do;
23209     +      _5_0 = 1;
MPRINT(EM_DIAGRAM):   _5_0 = 1;
23210     +   end;
MPRINT(EM_DIAGRAM):   end;
23211     +   else if _dm3 = 'YES'  then do;
MPRINT(EM_DIAGRAM):   else if _dm3 = 'YES' then do;
23212     +      _5_0 = -1;
MPRINT(EM_DIAGRAM):   _5_0 = -1;
23213     +   end;
MPRINT(EM_DIAGRAM):   end;
23214     +   else do;
MPRINT(EM_DIAGRAM):   else do;
23215     +      _5_0 = .;
MPRINT(EM_DIAGRAM):   _5_0 = .;
23216     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
23217     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
23218     +   end;
MPRINT(EM_DIAGRAM):   end;
23219     +end;
MPRINT(EM_DIAGRAM):   end;
23220     +
23221     +*** Generate dummy variables for menopause ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for menopause ;
23222     +drop _6_0 _6_1 ;
MPRINT(EM_DIAGRAM):   drop _6_0 _6_1 ;
23223     +if missing( menopause ) then do;
MPRINT(EM_DIAGRAM):   if missing( menopause ) then do;
23224     +   _6_0 = .;
MPRINT(EM_DIAGRAM):   _6_0 = .;
23225     +   _6_1 = .;
MPRINT(EM_DIAGRAM):   _6_1 = .;
23226     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
23227     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
23228     +end;
MPRINT(EM_DIAGRAM):   end;
23229     +else do;
MPRINT(EM_DIAGRAM):   else do;
23230     +   length _dm7 $ 7; drop _dm7 ;
MPRINT(EM_DIAGRAM):   length _dm7 $ 7;
MPRINT(EM_DIAGRAM):   drop _dm7 ;
23231     +   _dm7 = put( menopause , $7. );
MPRINT(EM_DIAGRAM):   _dm7 = put( menopause , $7. );
23232     +   %DMNORMIP( _dm7 )
MPRINT(DMNORMIP):   call dmnorm(_dm7,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
23233     +   if _dm7 = 'PREMENO'  then do;
MPRINT(EM_DIAGRAM):   if _dm7 = 'PREMENO' then do;
23234     +      _6_0 = -1;
MPRINT(EM_DIAGRAM):   _6_0 = -1;
23235     +      _6_1 = -1;
MPRINT(EM_DIAGRAM):   _6_1 = -1;
23236     +   end;
MPRINT(EM_DIAGRAM):   end;
23237     +   else if _dm7 = 'GE40'  then do;
MPRINT(EM_DIAGRAM):   else if _dm7 = 'GE40' then do;
23238     +      _6_0 = 1;
MPRINT(EM_DIAGRAM):   _6_0 = 1;
23239     +      _6_1 = 0;
MPRINT(EM_DIAGRAM):   _6_1 = 0;
23240     +   end;
MPRINT(EM_DIAGRAM):   end;
23241     +   else if _dm7 = 'LT40'  then do;
MPRINT(EM_DIAGRAM):   else if _dm7 = 'LT40' then do;
23242     +      _6_0 = 0;
MPRINT(EM_DIAGRAM):   _6_0 = 0;
23243     +      _6_1 = 1;
MPRINT(EM_DIAGRAM):   _6_1 = 1;
23244     +   end;
MPRINT(EM_DIAGRAM):   end;
23245     +   else do;
MPRINT(EM_DIAGRAM):   else do;
23246     +      _6_0 = .;
MPRINT(EM_DIAGRAM):   _6_0 = .;
23247     +      _6_1 = .;
MPRINT(EM_DIAGRAM):   _6_1 = .;
23248     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
23249     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
23250     +   end;
MPRINT(EM_DIAGRAM):   end;
23251     +end;
MPRINT(EM_DIAGRAM):   end;
23252     +
23253     +*** Generate dummy variables for node_caps ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for node_caps ;
23254     +drop _7_0 _7_1 ;
MPRINT(EM_DIAGRAM):   drop _7_0 _7_1 ;
23255     +if missing( node_caps ) then do;
MPRINT(EM_DIAGRAM):   if missing( node_caps ) then do;
23256     +   _7_0 = .;
MPRINT(EM_DIAGRAM):   _7_0 = .;
23257     +   _7_1 = .;
MPRINT(EM_DIAGRAM):   _7_1 = .;
23258     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
23259     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
23260     +end;
MPRINT(EM_DIAGRAM):   end;
23261     +else do;
MPRINT(EM_DIAGRAM):   else do;
23262     +   length _dm3 $ 3; drop _dm3 ;
MPRINT(EM_DIAGRAM):   length _dm3 $ 3;
MPRINT(EM_DIAGRAM):   drop _dm3 ;
23263     +   %DMNORMCP( node_caps , _dm3 )
MPRINT(DMNORMCP):   _dm3=dmnorm(node_caps,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
23264     +   if _dm3 = 'NO'  then do;
MPRINT(EM_DIAGRAM):   if _dm3 = 'NO' then do;
23265     +      _7_0 = 0;
MPRINT(EM_DIAGRAM):   _7_0 = 0;
23266     +      _7_1 = 1;
MPRINT(EM_DIAGRAM):   _7_1 = 1;
23267     +   end;
MPRINT(EM_DIAGRAM):   end;
23268     +   else if _dm3 = 'YES'  then do;
MPRINT(EM_DIAGRAM):   else if _dm3 = 'YES' then do;
23269     +      _7_0 = -1;
MPRINT(EM_DIAGRAM):   _7_0 = -1;
23270     +      _7_1 = -1;
MPRINT(EM_DIAGRAM):   _7_1 = -1;
23271     +   end;
MPRINT(EM_DIAGRAM):   end;
23272     +   else if _dm3 = '?'  then do;
MPRINT(EM_DIAGRAM):   else if _dm3 = '?' then do;
23273     +      _7_0 = 1;
MPRINT(EM_DIAGRAM):   _7_0 = 1;
23274     +      _7_1 = 0;
MPRINT(EM_DIAGRAM):   _7_1 = 0;
23275     +   end;
MPRINT(EM_DIAGRAM):   end;
23276     +   else do;
MPRINT(EM_DIAGRAM):   else do;
23277     +      _7_0 = .;
MPRINT(EM_DIAGRAM):   _7_0 = .;
23278     +      _7_1 = .;
MPRINT(EM_DIAGRAM):   _7_1 = .;
23279     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
23280     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
23281     +   end;
MPRINT(EM_DIAGRAM):   end;
23282     +end;
MPRINT(EM_DIAGRAM):   end;
23283     +
23284     +*** Generate dummy variables for tumor_size ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for tumor_size ;
23285     +drop _8_0 _8_1 _8_2 _8_3 _8_4 _8_5 _8_6 _8_7 _8_8 _8_9 ;
MPRINT(EM_DIAGRAM):   drop _8_0 _8_1 _8_2 _8_3 _8_4 _8_5 _8_6 _8_7 _8_8 _8_9 ;
23286     +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
23287     +_8_0 = 0;
MPRINT(EM_DIAGRAM):   _8_0 = 0;
23288     +_8_1 = 0;
MPRINT(EM_DIAGRAM):   _8_1 = 0;
23289     +_8_2 = 0;
MPRINT(EM_DIAGRAM):   _8_2 = 0;
23290     +_8_3 = 0;
MPRINT(EM_DIAGRAM):   _8_3 = 0;
23291     +_8_4 = 0;
MPRINT(EM_DIAGRAM):   _8_4 = 0;
23292     +_8_5 = 0;
MPRINT(EM_DIAGRAM):   _8_5 = 0;
23293     +_8_6 = 0;
MPRINT(EM_DIAGRAM):   _8_6 = 0;
23294     +_8_7 = 0;
MPRINT(EM_DIAGRAM):   _8_7 = 0;
23295     +_8_8 = 0;
MPRINT(EM_DIAGRAM):   _8_8 = 0;
23296     +_8_9 = 0;
MPRINT(EM_DIAGRAM):   _8_9 = 0;
23297     +if missing( tumor_size ) then do;
MPRINT(EM_DIAGRAM):   if missing( tumor_size ) then do;
23298     +   _8_0 = .;
MPRINT(EM_DIAGRAM):   _8_0 = .;
23299     +   _8_1 = .;
MPRINT(EM_DIAGRAM):   _8_1 = .;
23300     +   _8_2 = .;
MPRINT(EM_DIAGRAM):   _8_2 = .;
23301     +   _8_3 = .;
MPRINT(EM_DIAGRAM):   _8_3 = .;
23302     +   _8_4 = .;
MPRINT(EM_DIAGRAM):   _8_4 = .;
23303     +   _8_5 = .;
MPRINT(EM_DIAGRAM):   _8_5 = .;
23304     +   _8_6 = .;
MPRINT(EM_DIAGRAM):   _8_6 = .;
23305     +   _8_7 = .;
MPRINT(EM_DIAGRAM):   _8_7 = .;
23306     +   _8_8 = .;
MPRINT(EM_DIAGRAM):   _8_8 = .;
23307     +   _8_9 = .;
MPRINT(EM_DIAGRAM):   _8_9 = .;
23308     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
23309     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
23310     +end;
MPRINT(EM_DIAGRAM):   end;
23311     +else do;
MPRINT(EM_DIAGRAM):   else do;
23312     +   length _dm5 $ 5; drop _dm5 ;
MPRINT(EM_DIAGRAM):   length _dm5 $ 5;
MPRINT(EM_DIAGRAM):   drop _dm5 ;
23313     +   %DMNORMCP( tumor_size , _dm5 )
MPRINT(DMNORMCP):   _dm5=dmnorm(tumor_size,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
23314     +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
23315     +   if _dm5 <= '35-39'  then do;
MPRINT(EM_DIAGRAM):   if _dm5 <= '35-39' then do;
23316     +      if _dm5 <= '20-24'  then do;
MPRINT(EM_DIAGRAM):   if _dm5 <= '20-24' then do;
23317     +         if _dm5 <= '15-19'  then do;
MPRINT(EM_DIAGRAM):   if _dm5 <= '15-19' then do;
23318     +            if _dm5 = '0-4'  then do;
MPRINT(EM_DIAGRAM):   if _dm5 = '0-4' then do;
23319     +               _8_0 = 1;
MPRINT(EM_DIAGRAM):   _8_0 = 1;
23320     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
23321     +            end;
MPRINT(EM_DIAGRAM):   end;
23322     +            else do;
MPRINT(EM_DIAGRAM):   else do;
23323     +               if _dm5 = '15-19'  then do;
MPRINT(EM_DIAGRAM):   if _dm5 = '15-19' then do;
23324     +                  _8_1 = 1;
MPRINT(EM_DIAGRAM):   _8_1 = 1;
23325     +                  _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
23326     +               end;
MPRINT(EM_DIAGRAM):   end;
23327     +            end;
MPRINT(EM_DIAGRAM):   end;
23328     +         end;
MPRINT(EM_DIAGRAM):   end;
23329     +         else do;
MPRINT(EM_DIAGRAM):   else do;
23330     +            if _dm5 = '20-24'  then do;
MPRINT(EM_DIAGRAM):   if _dm5 = '20-24' then do;
23331     +               _8_2 = 1;
MPRINT(EM_DIAGRAM):   _8_2 = 1;
23332     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
23333     +            end;
MPRINT(EM_DIAGRAM):   end;
23334     +         end;
MPRINT(EM_DIAGRAM):   end;
23335     +      end;
MPRINT(EM_DIAGRAM):   end;
23336     +      else do;
MPRINT(EM_DIAGRAM):   else do;
23337     +         if _dm5 <= '30-34'  then do;
MPRINT(EM_DIAGRAM):   if _dm5 <= '30-34' then do;
23338     +            if _dm5 = '25-29'  then do;
MPRINT(EM_DIAGRAM):   if _dm5 = '25-29' then do;
23339     +               _8_3 = 1;
MPRINT(EM_DIAGRAM):   _8_3 = 1;
23340     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
23341     +            end;
MPRINT(EM_DIAGRAM):   end;
23342     +            else do;
MPRINT(EM_DIAGRAM):   else do;
23343     +               if _dm5 = '30-34'  then do;
MPRINT(EM_DIAGRAM):   if _dm5 = '30-34' then do;
23344     +                  _8_4 = 1;
MPRINT(EM_DIAGRAM):   _8_4 = 1;
23345     +                  _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
23346     +               end;
MPRINT(EM_DIAGRAM):   end;
23347     +            end;
MPRINT(EM_DIAGRAM):   end;
23348     +         end;
MPRINT(EM_DIAGRAM):   end;
23349     +         else do;
MPRINT(EM_DIAGRAM):   else do;
23350     +            if _dm5 = '35-39'  then do;
MPRINT(EM_DIAGRAM):   if _dm5 = '35-39' then do;
23351     +               _8_5 = 1;
MPRINT(EM_DIAGRAM):   _8_5 = 1;
23352     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
23353     +            end;
MPRINT(EM_DIAGRAM):   end;
23354     +         end;
MPRINT(EM_DIAGRAM):   end;
23355     +      end;
MPRINT(EM_DIAGRAM):   end;
23356     +   end;
MPRINT(EM_DIAGRAM):   end;
23357     +   else do;
MPRINT(EM_DIAGRAM):   else do;
23358     +      if _dm5 <= '44848'  then do;
MPRINT(EM_DIAGRAM):   if _dm5 <= '44848' then do;
23359     +         if _dm5 <= '44690'  then do;
MPRINT(EM_DIAGRAM):   if _dm5 <= '44690' then do;
23360     +            if _dm5 = '40-44'  then do;
MPRINT(EM_DIAGRAM):   if _dm5 = '40-44' then do;
23361     +               _8_6 = 1;
MPRINT(EM_DIAGRAM):   _8_6 = 1;
23362     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
23363     +            end;
MPRINT(EM_DIAGRAM):   end;
23364     +            else do;
MPRINT(EM_DIAGRAM):   else do;
23365     +               if _dm5 = '44690'  then do;
MPRINT(EM_DIAGRAM):   if _dm5 = '44690' then do;
23366     +                  _8_7 = 1;
MPRINT(EM_DIAGRAM):   _8_7 = 1;
23367     +                  _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
23368     +               end;
MPRINT(EM_DIAGRAM):   end;
23369     +            end;
MPRINT(EM_DIAGRAM):   end;
23370     +         end;
MPRINT(EM_DIAGRAM):   end;
23371     +         else do;
MPRINT(EM_DIAGRAM):   else do;
23372     +            if _dm5 = '44848'  then do;
MPRINT(EM_DIAGRAM):   if _dm5 = '44848' then do;
23373     +               _8_8 = 1;
MPRINT(EM_DIAGRAM):   _8_8 = 1;
23374     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
23375     +            end;
MPRINT(EM_DIAGRAM):   end;
23376     +         end;
MPRINT(EM_DIAGRAM):   end;
23377     +      end;
MPRINT(EM_DIAGRAM):   end;
23378     +      else do;
MPRINT(EM_DIAGRAM):   else do;
23379     +         if _dm5 = '45-49'  then do;
MPRINT(EM_DIAGRAM):   if _dm5 = '45-49' then do;
23380     +            _8_9 = 1;
MPRINT(EM_DIAGRAM):   _8_9 = 1;
23381     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
23382     +         end;
MPRINT(EM_DIAGRAM):   end;
23383     +         else do;
MPRINT(EM_DIAGRAM):   else do;
23384     +            if _dm5 = '50-54'  then do;
MPRINT(EM_DIAGRAM):   if _dm5 = '50-54' then do;
23385     +               _8_0 = -1;
MPRINT(EM_DIAGRAM):   _8_0 = -1;
23386     +               _8_1 = -1;
MPRINT(EM_DIAGRAM):   _8_1 = -1;
23387     +               _8_2 = -1;
MPRINT(EM_DIAGRAM):   _8_2 = -1;
23388     +               _8_3 = -1;
MPRINT(EM_DIAGRAM):   _8_3 = -1;
23389     +               _8_4 = -1;
MPRINT(EM_DIAGRAM):   _8_4 = -1;
23390     +               _8_5 = -1;
MPRINT(EM_DIAGRAM):   _8_5 = -1;
23391     +               _8_6 = -1;
MPRINT(EM_DIAGRAM):   _8_6 = -1;
23392     +               _8_7 = -1;
MPRINT(EM_DIAGRAM):   _8_7 = -1;
23393     +               _8_8 = -1;
MPRINT(EM_DIAGRAM):   _8_8 = -1;
23394     +               _8_9 = -1;
MPRINT(EM_DIAGRAM):   _8_9 = -1;
23395     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
23396     +            end;
MPRINT(EM_DIAGRAM):   end;
23397     +         end;
MPRINT(EM_DIAGRAM):   end;
23398     +      end;
MPRINT(EM_DIAGRAM):   end;
23399     +   end;
MPRINT(EM_DIAGRAM):   end;
23400     +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
23401     +      _8_0 = .;
MPRINT(EM_DIAGRAM):   _8_0 = .;
23402     +      _8_1 = .;
MPRINT(EM_DIAGRAM):   _8_1 = .;
23403     +      _8_2 = .;
MPRINT(EM_DIAGRAM):   _8_2 = .;
23404     +      _8_3 = .;
MPRINT(EM_DIAGRAM):   _8_3 = .;
23405     +      _8_4 = .;
MPRINT(EM_DIAGRAM):   _8_4 = .;
23406     +      _8_5 = .;
MPRINT(EM_DIAGRAM):   _8_5 = .;
23407     +      _8_6 = .;
MPRINT(EM_DIAGRAM):   _8_6 = .;
23408     +      _8_7 = .;
MPRINT(EM_DIAGRAM):   _8_7 = .;
23409     +      _8_8 = .;
MPRINT(EM_DIAGRAM):   _8_8 = .;
23410     +      _8_9 = .;
MPRINT(EM_DIAGRAM):   _8_9 = .;
23411     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
23412     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
23413     +   end;
MPRINT(EM_DIAGRAM):   end;
23414     +end;
MPRINT(EM_DIAGRAM):   end;
23415     +
23416     +*** If missing inputs, use averages;
MPRINT(EM_DIAGRAM):   *** If missing inputs, use averages;
23417     +if _DM_BAD > 0 then do;
MPRINT(EM_DIAGRAM):   if _DM_BAD > 0 then do;
23418     +   _P0 = 0.2920353982;
MPRINT(EM_DIAGRAM):   _P0 = 0.2920353982;
23419     +   _P1 = 0.7079646018;
MPRINT(EM_DIAGRAM):   _P1 = 0.7079646018;
23420     +   goto REGDR1;
MPRINT(EM_DIAGRAM):   goto REGDR1;
23421     +end;
MPRINT(EM_DIAGRAM):   end;
23422     +
23423     +*** Compute Linear Predictor;
MPRINT(EM_DIAGRAM):   *** Compute Linear Predictor;
23424     +drop _TEMP;
MPRINT(EM_DIAGRAM):   drop _TEMP;
23425     +drop _LP0 ;
MPRINT(EM_DIAGRAM):   drop _LP0 ;
23426     +_LP0 = 0;
MPRINT(EM_DIAGRAM):   _LP0 = 0;
23427     +
23428     +***  Effect: REP_deg_malig ;
MPRINT(EM_DIAGRAM):   *** Effect: REP_deg_malig ;
23429     +_TEMP = REP_deg_malig ;
MPRINT(EM_DIAGRAM):   _TEMP = REP_deg_malig ;
23430     +_LP0 = _LP0 + (    0.74188815265941 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.74188815265941 * _TEMP);
23431     +
23432     +***  Effect: age ;
MPRINT(EM_DIAGRAM):   *** Effect: age ;
23433     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
23434     +_LP0 = _LP0 + (     1.2711526472824) * _TEMP * _1_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1.2711526472824) * _TEMP * _1_0;
23435     +_LP0 = _LP0 + (    3.51118587377913) * _TEMP * _1_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 3.51118587377913) * _TEMP * _1_1;
23436     +_LP0 = _LP0 + (    1.77015584013962) * _TEMP * _1_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1.77015584013962) * _TEMP * _1_2;
23437     +_LP0 = _LP0 + (    3.24429045271765) * _TEMP * _1_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 3.24429045271765) * _TEMP * _1_3;
23438     +
23439     +***  Effect: breast ;
MPRINT(EM_DIAGRAM):   *** Effect: breast ;
23440     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
23441     +_LP0 = _LP0 + (   -0.55362156774278) * _TEMP * _2_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.55362156774278) * _TEMP * _2_0;
23442     +
23443     +***  Effect: breast_quad ;
MPRINT(EM_DIAGRAM):   *** Effect: breast_quad ;
23444     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
23445     +_LP0 = _LP0 + (    13.7360898428639) * _TEMP * _3_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 13.7360898428639) * _TEMP * _3_0;
23446     +_LP0 = _LP0 + (   -1.34657631410209) * _TEMP * _3_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1.34657631410209) * _TEMP * _3_1;
23447     +_LP0 = _LP0 + (   -2.87020658947285) * _TEMP * _3_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -2.87020658947285) * _TEMP * _3_2;
23448     +_LP0 = _LP0 + (   -3.60528108373917) * _TEMP * _3_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -3.60528108373917) * _TEMP * _3_3;
23449     +_LP0 = _LP0 + (   -2.02455025813794) * _TEMP * _3_4;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -2.02455025813794) * _TEMP * _3_4;
23450     +
23451     +***  Effect: inv_nodes ;
MPRINT(EM_DIAGRAM):   *** Effect: inv_nodes ;
23452     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
23453     +_LP0 = _LP0 + (   -3.92999632834698) * _TEMP * _4_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -3.92999632834698) * _TEMP * _4_0;
23454     +_LP0 = _LP0 + (   -1.85577896916898) * _TEMP * _4_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1.85577896916898) * _TEMP * _4_1;
23455     +_LP0 = _LP0 + (    11.4860062818446) * _TEMP * _4_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 11.4860062818446) * _TEMP * _4_2;
23456     +_LP0 = _LP0 + (   -2.40138030631945) * _TEMP * _4_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -2.40138030631945) * _TEMP * _4_3;
23457     +_LP0 = _LP0 + (   -1.69160020226667) * _TEMP * _4_4;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1.69160020226667) * _TEMP * _4_4;
23458     +
23459     +***  Effect: irradiat ;
MPRINT(EM_DIAGRAM):   *** Effect: irradiat ;
23460     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
23461     +_LP0 = _LP0 + (    0.05106811531383) * _TEMP * _5_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.05106811531383) * _TEMP * _5_0;
23462     +
23463     +***  Effect: menopause ;
MPRINT(EM_DIAGRAM):   *** Effect: menopause ;
23464     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
23465     +_LP0 = _LP0 + (    3.68241923615777) * _TEMP * _6_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 3.68241923615777) * _TEMP * _6_0;
23466     +_LP0 = _LP0 + (   -8.03309066307678) * _TEMP * _6_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -8.03309066307678) * _TEMP * _6_1;
23467     +
23468     +***  Effect: node_caps ;
MPRINT(EM_DIAGRAM):   *** Effect: node_caps ;
23469     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
23470     +_LP0 = _LP0 + (   -9.61607022474882) * _TEMP * _7_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -9.61607022474882) * _TEMP * _7_0;
23471     +_LP0 = _LP0 + (     4.8963217947722) * _TEMP * _7_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 4.8963217947722) * _TEMP * _7_1;
23472     +
23473     +***  Effect: tumor_size ;
MPRINT(EM_DIAGRAM):   *** Effect: tumor_size ;
23474     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
23475     +_LP0 = _LP0 + (   -10.0604143863662) * _TEMP * _8_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -10.0604143863662) * _TEMP * _8_0;
23476     +_LP0 = _LP0 + (     4.6393813293927) * _TEMP * _8_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 4.6393813293927) * _TEMP * _8_1;
23477     +_LP0 = _LP0 + (    5.07127301211026) * _TEMP * _8_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 5.07127301211026) * _TEMP * _8_2;
23478     +_LP0 = _LP0 + (    5.06886354257634) * _TEMP * _8_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 5.06886354257634) * _TEMP * _8_3;
23479     +_LP0 = _LP0 + (    5.07640420879079) * _TEMP * _8_4;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 5.07640420879079) * _TEMP * _8_4;
23480     +_LP0 = _LP0 + (    3.66865920399611) * _TEMP * _8_5;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 3.66865920399611) * _TEMP * _8_5;
23481     +_LP0 = _LP0 + (    5.25094886049268) * _TEMP * _8_6;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 5.25094886049268) * _TEMP * _8_6;
23482     +_LP0 = _LP0 + (   -8.25096914859845) * _TEMP * _8_7;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -8.25096914859845) * _TEMP * _8_7;
23483     +_LP0 = _LP0 + (   -7.96985669817867) * _TEMP * _8_8;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -7.96985669817867) * _TEMP * _8_8;
23484     +_LP0 = _LP0 + (   -8.99285729799633) * _TEMP * _8_9;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -8.99285729799633) * _TEMP * _8_9;
23485     +
23486     +*** Naive Posterior Probabilities;
MPRINT(EM_DIAGRAM):   *** Naive Posterior Probabilities;
23487     +drop _MAXP _IY _P0 _P1;
MPRINT(EM_DIAGRAM):   drop _MAXP _IY _P0 _P1;
23488     +drop _LPMAX;
MPRINT(EM_DIAGRAM):   drop _LPMAX;
23489     +_LPMAX= 0;
MPRINT(EM_DIAGRAM):   _LPMAX= 0;
23490     +_LP0 =    -12.2948238272586 + _LP0;
MPRINT(EM_DIAGRAM):   _LP0 = -12.2948238272586 + _LP0;
23491     +if _LPMAX < _LP0 then _LPMAX = _LP0;
MPRINT(EM_DIAGRAM):   if _LPMAX < _LP0 then _LPMAX = _LP0;
23492     +_LP0 = exp(_LP0 - _LPMAX);
MPRINT(EM_DIAGRAM):   _LP0 = exp(_LP0 - _LPMAX);
23493     +_LPMAX = exp(-_LPMAX);
MPRINT(EM_DIAGRAM):   _LPMAX = exp(-_LPMAX);
23494     +_P1 = 1 / (_LPMAX + _LP0);
MPRINT(EM_DIAGRAM):   _P1 = 1 / (_LPMAX + _LP0);
23495     +_P0 = _LP0 * _P1;
MPRINT(EM_DIAGRAM):   _P0 = _LP0 * _P1;
23496     +_P1 = _LPMAX * _P1;
MPRINT(EM_DIAGRAM):   _P1 = _LPMAX * _P1;
23497     +
23498     +REGDR1:
23499     +
23500     +*** Residuals;
MPRINT(EM_DIAGRAM):   REGDR1: *** Residuals;
23501     +if (_Y = .) then do;
MPRINT(EM_DIAGRAM):   if (_Y = .) then do;
23502     +   R_classrecurrence_events = .;
MPRINT(EM_DIAGRAM):   R_classrecurrence_events = .;
23503     +   R_classno_recurrence_events = .;
MPRINT(EM_DIAGRAM):   R_classno_recurrence_events = .;
23504     +end;
MPRINT(EM_DIAGRAM):   end;
23505     +else do;
MPRINT(EM_DIAGRAM):   else do;
23506     +    label R_classrecurrence_events = 'Residual: class=recurrence-events' ;
MPRINT(EM_DIAGRAM):   label R_classrecurrence_events = 'Residual: class=recurrence-events' ;
23507     +    label R_classno_recurrence_events =
23508     +'Residual: class=no-recurrence-events' ;
MPRINT(EM_DIAGRAM):   label R_classno_recurrence_events = 'Residual: class=no-recurrence-events' ;
23509     +   R_classrecurrence_events = - _P0;
MPRINT(EM_DIAGRAM):   R_classrecurrence_events = - _P0;
23510     +   R_classno_recurrence_events = - _P1;
MPRINT(EM_DIAGRAM):   R_classno_recurrence_events = - _P1;
23511     +   select( _Y );
MPRINT(EM_DIAGRAM):   select( _Y );
23512     +      when (0)  R_classrecurrence_events = R_classrecurrence_events + 1;
MPRINT(EM_DIAGRAM):   when (0) R_classrecurrence_events = R_classrecurrence_events + 1;
23513     +      when (1)  R_classno_recurrence_events = R_classno_recurrence_events + 1;
MPRINT(EM_DIAGRAM):   when (1) R_classno_recurrence_events = R_classno_recurrence_events + 1;
23514     +   end;
MPRINT(EM_DIAGRAM):   end;
23515     +end;
MPRINT(EM_DIAGRAM):   end;
23516     +
23517     +*** Posterior Probabilities and Predicted Level;
MPRINT(EM_DIAGRAM):   *** Posterior Probabilities and Predicted Level;
23518     +label P_classrecurrence_events = 'Predicted: class=recurrence-events' ;
MPRINT(EM_DIAGRAM):   label P_classrecurrence_events = 'Predicted: class=recurrence-events' ;
23519     +label P_classno_recurrence_events = 'Predicted: class=no-recurrence-events' ;
MPRINT(EM_DIAGRAM):   label P_classno_recurrence_events = 'Predicted: class=no-recurrence-events' ;
23520     +P_classrecurrence_events = _P0;
MPRINT(EM_DIAGRAM):   P_classrecurrence_events = _P0;
23521     +_MAXP = _P0;
MPRINT(EM_DIAGRAM):   _MAXP = _P0;
23522     +_IY = 1;
MPRINT(EM_DIAGRAM):   _IY = 1;
23523     +P_classno_recurrence_events = _P1;
MPRINT(EM_DIAGRAM):   P_classno_recurrence_events = _P1;
23524     +if (_P1 >  _MAXP + 1E-8) then do;
MPRINT(EM_DIAGRAM):   if (_P1 > _MAXP + 1E-8) then do;
23525     +   _MAXP = _P1;
MPRINT(EM_DIAGRAM):   _MAXP = _P1;
23526     +   _IY = 2;
MPRINT(EM_DIAGRAM):   _IY = 2;
23527     +end;
MPRINT(EM_DIAGRAM):   end;
23528     +I_class = REGDRF[_IY];
MPRINT(EM_DIAGRAM):   I_class = REGDRF[_IY];
23529     +U_class = REGDRU[_IY];
MPRINT(EM_DIAGRAM):   U_class = REGDRU[_IY];
23530     +
23531     +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
23532     +***** end scoring code for regression;
MPRINT(EM_DIAGRAM):   ***** end scoring code for regression;
23533     +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
23534      run;
 
NOTE: DATA STEP view saved on file EMWS1.REG_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.TRANS_VALIDATE.VIEW used (Total process time):
      real time           0.10 seconds
      cpu time            0.09 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.11 seconds
      cpu time            0.12 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
23535      quit;
23536      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
23537      filename emflow "D:\\BAN210PA\Workspaces\EMWS1\Reg\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "D:\\BAN210PA\Workspaces\EMWS1\Reg\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Reg: Scoring TEST data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
23538      *------------------------------------------------------------*;
23539      * Reg: Scoring TEST data;
23540      *------------------------------------------------------------*;
23541      data EMWS1.Reg_TEST
23542      / view=EMWS1.Reg_TEST
23543      ;
MPRINT(EM_DIAGRAM):   data EMWS1.Reg_TEST / view=EMWS1.Reg_TEST ;
23544      set EMWS1.Trans_TEST
23545      ;
MPRINT(EM_DIAGRAM):   set EMWS1.Trans_TEST ;
23546      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file D:\\BAN210PA\Workspaces\EMWS1\Reg\EMFLOWSCORE.sas.
23547     +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
23548     +*** begin scoring code for regression;
MPRINT(EM_DIAGRAM):   *** begin scoring code for regression;
23549     +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
23550     +
23551     +length _WARN_ $4;
MPRINT(EM_DIAGRAM):   length _WARN_ $4;
23552     +label _WARN_ = 'Warnings' ;
MPRINT(EM_DIAGRAM):   label _WARN_ = 'Warnings' ;
23553     +
23554     +length I_class $ 20;
MPRINT(EM_DIAGRAM):   length I_class $ 20;
23555     +label I_class = 'Into: class' ;
MPRINT(EM_DIAGRAM):   label I_class = 'Into: class' ;
23556     +*** Target Values;
MPRINT(EM_DIAGRAM):   *** Target Values;
23557     +array REGDRF [2] $20 _temporary_ ('RECURRENCE-EVENTS' 'NO-RECURRENCE-EVENTS'
23558     +        );
MPRINT(EM_DIAGRAM):   array REGDRF [2] $20 _temporary_ ('RECURRENCE-EVENTS' 'NO-RECURRENCE-EVENTS' );
23559     +label U_class = 'Unnormalized Into: class' ;
MPRINT(EM_DIAGRAM):   label U_class = 'Unnormalized Into: class' ;
23560     +format U_class $20.;
MPRINT(EM_DIAGRAM):   format U_class $20.;
23561     +length U_class $ 20;
MPRINT(EM_DIAGRAM):   length U_class $ 20;
23562     +*** Unnormalized target values;
MPRINT(EM_DIAGRAM):   *** Unnormalized target values;
23563     +array REGDRU[2] $ 20 _temporary_ ('recurrence-events   '
23564     +'no-recurrence-events' );
MPRINT(EM_DIAGRAM):   array REGDRU[2] $ 20 _temporary_ ('recurrence-events   ' 'no-recurrence-events' );
23565     +
23566     +*** Generate dummy variables for class ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for class ;
23567     +drop _Y ;
MPRINT(EM_DIAGRAM):   drop _Y ;
23568     +label F_class = 'From: class' ;
MPRINT(EM_DIAGRAM):   label F_class = 'From: class' ;
23569     +length F_class $ 20;
MPRINT(EM_DIAGRAM):   length F_class $ 20;
23570     +F_class = put( class , $20. );
MPRINT(EM_DIAGRAM):   F_class = put( class , $20. );
23571     +%DMNORMIP( F_class )
MPRINT(DMNORMIP):   call dmnorm(F_class,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
23572     +if missing( class ) then do;
MPRINT(EM_DIAGRAM):   if missing( class ) then do;
23573     +   _Y = .;
MPRINT(EM_DIAGRAM):   _Y = .;
23574     +end;
MPRINT(EM_DIAGRAM):   end;
23575     +else do;
MPRINT(EM_DIAGRAM):   else do;
23576     +   if F_class = 'NO-RECURRENCE-EVENTS'  then do;
MPRINT(EM_DIAGRAM):   if F_class = 'NO-RECURRENCE-EVENTS' then do;
23577     +      _Y = 1;
MPRINT(EM_DIAGRAM):   _Y = 1;
23578     +   end;
MPRINT(EM_DIAGRAM):   end;
23579     +   else if F_class = 'RECURRENCE-EVENTS'  then do;
MPRINT(EM_DIAGRAM):   else if F_class = 'RECURRENCE-EVENTS' then do;
23580     +      _Y = 0;
MPRINT(EM_DIAGRAM):   _Y = 0;
23581     +   end;
MPRINT(EM_DIAGRAM):   end;
23582     +   else do;
MPRINT(EM_DIAGRAM):   else do;
23583     +      _Y = .;
MPRINT(EM_DIAGRAM):   _Y = .;
23584     +   end;
MPRINT(EM_DIAGRAM):   end;
23585     +end;
MPRINT(EM_DIAGRAM):   end;
23586     +
23587     +drop _DM_BAD;
MPRINT(EM_DIAGRAM):   drop _DM_BAD;
23588     +_DM_BAD=0;
MPRINT(EM_DIAGRAM):   _DM_BAD=0;
23589     +
23590     +*** Check REP_deg_malig for missing values ;
MPRINT(EM_DIAGRAM):   *** Check REP_deg_malig for missing values ;
23591     +if missing( REP_deg_malig ) then do;
MPRINT(EM_DIAGRAM):   if missing( REP_deg_malig ) then do;
23592     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
23593     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
23594     +end;
MPRINT(EM_DIAGRAM):   end;
23595     +
23596     +*** Generate dummy variables for age ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for age ;
23597     +drop _1_0 _1_1 _1_2 _1_3 ;
MPRINT(EM_DIAGRAM):   drop _1_0 _1_1 _1_2 _1_3 ;
23598     +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
23599     +_1_0 = 0;
MPRINT(EM_DIAGRAM):   _1_0 = 0;
23600     +_1_1 = 0;
MPRINT(EM_DIAGRAM):   _1_1 = 0;
23601     +_1_2 = 0;
MPRINT(EM_DIAGRAM):   _1_2 = 0;
23602     +_1_3 = 0;
MPRINT(EM_DIAGRAM):   _1_3 = 0;
23603     +if missing( age ) then do;
MPRINT(EM_DIAGRAM):   if missing( age ) then do;
23604     +   _1_0 = .;
MPRINT(EM_DIAGRAM):   _1_0 = .;
23605     +   _1_1 = .;
MPRINT(EM_DIAGRAM):   _1_1 = .;
23606     +   _1_2 = .;
MPRINT(EM_DIAGRAM):   _1_2 = .;
23607     +   _1_3 = .;
MPRINT(EM_DIAGRAM):   _1_3 = .;
23608     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
23609     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
23610     +end;
MPRINT(EM_DIAGRAM):   end;
23611     +else do;
MPRINT(EM_DIAGRAM):   else do;
23612     +   length _dm5 $ 5; drop _dm5 ;
MPRINT(EM_DIAGRAM):   length _dm5 $ 5;
MPRINT(EM_DIAGRAM):   drop _dm5 ;
23613     +   _dm5 = put( age , $5. );
MPRINT(EM_DIAGRAM):   _dm5 = put( age , $5. );
23614     +   %DMNORMIP( _dm5 )
MPRINT(DMNORMIP):   call dmnorm(_dm5,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
23615     +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
23616     +   if _dm5 <= '50-59'  then do;
MPRINT(EM_DIAGRAM):   if _dm5 <= '50-59' then do;
23617     +      if _dm5 <= '40-49'  then do;
MPRINT(EM_DIAGRAM):   if _dm5 <= '40-49' then do;
23618     +         if _dm5 = '30-39'  then do;
MPRINT(EM_DIAGRAM):   if _dm5 = '30-39' then do;
23619     +            _1_0 = 1;
MPRINT(EM_DIAGRAM):   _1_0 = 1;
23620     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
23621     +         end;
MPRINT(EM_DIAGRAM):   end;
23622     +         else do;
MPRINT(EM_DIAGRAM):   else do;
23623     +            if _dm5 = '40-49'  then do;
MPRINT(EM_DIAGRAM):   if _dm5 = '40-49' then do;
23624     +               _1_1 = 1;
MPRINT(EM_DIAGRAM):   _1_1 = 1;
23625     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
23626     +            end;
MPRINT(EM_DIAGRAM):   end;
23627     +         end;
MPRINT(EM_DIAGRAM):   end;
23628     +      end;
MPRINT(EM_DIAGRAM):   end;
23629     +      else do;
MPRINT(EM_DIAGRAM):   else do;
23630     +         if _dm5 = '50-59'  then do;
MPRINT(EM_DIAGRAM):   if _dm5 = '50-59' then do;
23631     +            _1_2 = 1;
MPRINT(EM_DIAGRAM):   _1_2 = 1;
23632     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
23633     +         end;
MPRINT(EM_DIAGRAM):   end;
23634     +      end;
MPRINT(EM_DIAGRAM):   end;
23635     +   end;
MPRINT(EM_DIAGRAM):   end;
23636     +   else do;
MPRINT(EM_DIAGRAM):   else do;
23637     +      if _dm5 = '60-69'  then do;
MPRINT(EM_DIAGRAM):   if _dm5 = '60-69' then do;
23638     +         _1_3 = 1;
MPRINT(EM_DIAGRAM):   _1_3 = 1;
23639     +         _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
23640     +      end;
MPRINT(EM_DIAGRAM):   end;
23641     +      else do;
MPRINT(EM_DIAGRAM):   else do;
23642     +         if _dm5 = '70-79'  then do;
MPRINT(EM_DIAGRAM):   if _dm5 = '70-79' then do;
23643     +            _1_0 = -1;
MPRINT(EM_DIAGRAM):   _1_0 = -1;
23644     +            _1_1 = -1;
MPRINT(EM_DIAGRAM):   _1_1 = -1;
23645     +            _1_2 = -1;
MPRINT(EM_DIAGRAM):   _1_2 = -1;
23646     +            _1_3 = -1;
MPRINT(EM_DIAGRAM):   _1_3 = -1;
23647     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
23648     +         end;
MPRINT(EM_DIAGRAM):   end;
23649     +      end;
MPRINT(EM_DIAGRAM):   end;
23650     +   end;
MPRINT(EM_DIAGRAM):   end;
23651     +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
23652     +      _1_0 = .;
MPRINT(EM_DIAGRAM):   _1_0 = .;
23653     +      _1_1 = .;
MPRINT(EM_DIAGRAM):   _1_1 = .;
23654     +      _1_2 = .;
MPRINT(EM_DIAGRAM):   _1_2 = .;
23655     +      _1_3 = .;
MPRINT(EM_DIAGRAM):   _1_3 = .;
23656     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
23657     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
23658     +   end;
MPRINT(EM_DIAGRAM):   end;
23659     +end;
MPRINT(EM_DIAGRAM):   end;
23660     +
23661     +*** Generate dummy variables for breast ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for breast ;
23662     +drop _2_0 ;
MPRINT(EM_DIAGRAM):   drop _2_0 ;
23663     +if missing( breast ) then do;
MPRINT(EM_DIAGRAM):   if missing( breast ) then do;
23664     +   _2_0 = .;
MPRINT(EM_DIAGRAM):   _2_0 = .;
23665     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
23666     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
23667     +end;
MPRINT(EM_DIAGRAM):   end;
23668     +else do;
MPRINT(EM_DIAGRAM):   else do;
23669     +   length _dm5 $ 5; drop _dm5 ;
MPRINT(EM_DIAGRAM):   length _dm5 $ 5;
MPRINT(EM_DIAGRAM):   drop _dm5 ;
23670     +   _dm5 = put( breast , $5. );
MPRINT(EM_DIAGRAM):   _dm5 = put( breast , $5. );
23671     +   %DMNORMIP( _dm5 )
MPRINT(DMNORMIP):   call dmnorm(_dm5,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
23672     +   if _dm5 = 'LEFT'  then do;
MPRINT(EM_DIAGRAM):   if _dm5 = 'LEFT' then do;
23673     +      _2_0 = 1;
MPRINT(EM_DIAGRAM):   _2_0 = 1;
23674     +   end;
MPRINT(EM_DIAGRAM):   end;
23675     +   else if _dm5 = 'RIGHT'  then do;
MPRINT(EM_DIAGRAM):   else if _dm5 = 'RIGHT' then do;
23676     +      _2_0 = -1;
MPRINT(EM_DIAGRAM):   _2_0 = -1;
23677     +   end;
MPRINT(EM_DIAGRAM):   end;
23678     +   else do;
MPRINT(EM_DIAGRAM):   else do;
23679     +      _2_0 = .;
MPRINT(EM_DIAGRAM):   _2_0 = .;
23680     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
23681     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
23682     +   end;
MPRINT(EM_DIAGRAM):   end;
23683     +end;
MPRINT(EM_DIAGRAM):   end;
23684     +
23685     +*** Generate dummy variables for breast_quad ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for breast_quad ;
23686     +drop _3_0 _3_1 _3_2 _3_3 _3_4 ;
MPRINT(EM_DIAGRAM):   drop _3_0 _3_1 _3_2 _3_3 _3_4 ;
23687     +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
23688     +_3_0 = 0;
MPRINT(EM_DIAGRAM):   _3_0 = 0;
23689     +_3_1 = 0;
MPRINT(EM_DIAGRAM):   _3_1 = 0;
23690     +_3_2 = 0;
MPRINT(EM_DIAGRAM):   _3_2 = 0;
23691     +_3_3 = 0;
MPRINT(EM_DIAGRAM):   _3_3 = 0;
23692     +_3_4 = 0;
MPRINT(EM_DIAGRAM):   _3_4 = 0;
23693     +if missing( breast_quad ) then do;
MPRINT(EM_DIAGRAM):   if missing( breast_quad ) then do;
23694     +   _3_0 = .;
MPRINT(EM_DIAGRAM):   _3_0 = .;
23695     +   _3_1 = .;
MPRINT(EM_DIAGRAM):   _3_1 = .;
23696     +   _3_2 = .;
MPRINT(EM_DIAGRAM):   _3_2 = .;
23697     +   _3_3 = .;
MPRINT(EM_DIAGRAM):   _3_3 = .;
23698     +   _3_4 = .;
MPRINT(EM_DIAGRAM):   _3_4 = .;
23699     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
23700     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
23701     +end;
MPRINT(EM_DIAGRAM):   end;
23702     +else do;
MPRINT(EM_DIAGRAM):   else do;
23703     +   length _dm9 $ 9; drop _dm9 ;
MPRINT(EM_DIAGRAM):   length _dm9 $ 9;
MPRINT(EM_DIAGRAM):   drop _dm9 ;
23704     +   %DMNORMCP( breast_quad , _dm9 )
MPRINT(DMNORMCP):   _dm9=dmnorm(breast_quad,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
23705     +   if _dm9 = 'LEFT_LOW'  then do;
MPRINT(EM_DIAGRAM):   if _dm9 = 'LEFT_LOW' then do;
23706     +      _3_2 = 1;
MPRINT(EM_DIAGRAM):   _3_2 = 1;
23707     +   end;
MPRINT(EM_DIAGRAM):   end;
23708     +   else if _dm9 = 'LEFT_UP'  then do;
MPRINT(EM_DIAGRAM):   else if _dm9 = 'LEFT_UP' then do;
23709     +      _3_3 = 1;
MPRINT(EM_DIAGRAM):   _3_3 = 1;
23710     +   end;
MPRINT(EM_DIAGRAM):   end;
23711     +   else if _dm9 = 'RIGHT_UP'  then do;
MPRINT(EM_DIAGRAM):   else if _dm9 = 'RIGHT_UP' then do;
23712     +      _3_0 = -1;
MPRINT(EM_DIAGRAM):   _3_0 = -1;
23713     +      _3_1 = -1;
MPRINT(EM_DIAGRAM):   _3_1 = -1;
23714     +      _3_2 = -1;
MPRINT(EM_DIAGRAM):   _3_2 = -1;
23715     +      _3_3 = -1;
MPRINT(EM_DIAGRAM):   _3_3 = -1;
23716     +      _3_4 = -1;
MPRINT(EM_DIAGRAM):   _3_4 = -1;
23717     +   end;
MPRINT(EM_DIAGRAM):   end;
23718     +   else if _dm9 = 'CENTRAL'  then do;
MPRINT(EM_DIAGRAM):   else if _dm9 = 'CENTRAL' then do;
23719     +      _3_1 = 1;
MPRINT(EM_DIAGRAM):   _3_1 = 1;
23720     +   end;
MPRINT(EM_DIAGRAM):   end;
23721     +   else if _dm9 = 'RIGHT_LOW'  then do;
MPRINT(EM_DIAGRAM):   else if _dm9 = 'RIGHT_LOW' then do;
23722     +      _3_4 = 1;
MPRINT(EM_DIAGRAM):   _3_4 = 1;
23723     +   end;
MPRINT(EM_DIAGRAM):   end;
23724     +   else if _dm9 = '?'  then do;
MPRINT(EM_DIAGRAM):   else if _dm9 = '?' then do;
23725     +      _3_0 = 1;
MPRINT(EM_DIAGRAM):   _3_0 = 1;
23726     +   end;
MPRINT(EM_DIAGRAM):   end;
23727     +   else do;
MPRINT(EM_DIAGRAM):   else do;
23728     +      _3_0 = .;
MPRINT(EM_DIAGRAM):   _3_0 = .;
23729     +      _3_1 = .;
MPRINT(EM_DIAGRAM):   _3_1 = .;
23730     +      _3_2 = .;
MPRINT(EM_DIAGRAM):   _3_2 = .;
23731     +      _3_3 = .;
MPRINT(EM_DIAGRAM):   _3_3 = .;
23732     +      _3_4 = .;
MPRINT(EM_DIAGRAM):   _3_4 = .;
23733     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
23734     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
23735     +   end;
MPRINT(EM_DIAGRAM):   end;
23736     +end;
MPRINT(EM_DIAGRAM):   end;
23737     +
23738     +*** Generate dummy variables for inv_nodes ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for inv_nodes ;
23739     +drop _4_0 _4_1 _4_2 _4_3 _4_4 ;
MPRINT(EM_DIAGRAM):   drop _4_0 _4_1 _4_2 _4_3 _4_4 ;
23740     +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
23741     +_4_0 = 0;
MPRINT(EM_DIAGRAM):   _4_0 = 0;
23742     +_4_1 = 0;
MPRINT(EM_DIAGRAM):   _4_1 = 0;
23743     +_4_2 = 0;
MPRINT(EM_DIAGRAM):   _4_2 = 0;
23744     +_4_3 = 0;
MPRINT(EM_DIAGRAM):   _4_3 = 0;
23745     +_4_4 = 0;
MPRINT(EM_DIAGRAM):   _4_4 = 0;
23746     +if missing( inv_nodes ) then do;
MPRINT(EM_DIAGRAM):   if missing( inv_nodes ) then do;
23747     +   _4_0 = .;
MPRINT(EM_DIAGRAM):   _4_0 = .;
23748     +   _4_1 = .;
MPRINT(EM_DIAGRAM):   _4_1 = .;
23749     +   _4_2 = .;
MPRINT(EM_DIAGRAM):   _4_2 = .;
23750     +   _4_3 = .;
MPRINT(EM_DIAGRAM):   _4_3 = .;
23751     +   _4_4 = .;
MPRINT(EM_DIAGRAM):   _4_4 = .;
23752     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
23753     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
23754     +end;
MPRINT(EM_DIAGRAM):   end;
23755     +else do;
MPRINT(EM_DIAGRAM):   else do;
23756     +   length _dm5 $ 5; drop _dm5 ;
MPRINT(EM_DIAGRAM):   length _dm5 $ 5;
MPRINT(EM_DIAGRAM):   drop _dm5 ;
23757     +   _dm5 = put( inv_nodes , $5. );
MPRINT(EM_DIAGRAM):   _dm5 = put( inv_nodes , $5. );
23758     +   %DMNORMIP( _dm5 )
MPRINT(DMNORMIP):   call dmnorm(_dm5,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
23759     +   if _dm5 = '0-2'  then do;
MPRINT(EM_DIAGRAM):   if _dm5 = '0-2' then do;
23760     +      _4_0 = 1;
MPRINT(EM_DIAGRAM):   _4_0 = 1;
23761     +   end;
MPRINT(EM_DIAGRAM):   end;
23762     +   else if _dm5 = '44625'  then do;
MPRINT(EM_DIAGRAM):   else if _dm5 = '44625' then do;
23763     +      _4_3 = 1;
MPRINT(EM_DIAGRAM):   _4_3 = 1;
23764     +   end;
MPRINT(EM_DIAGRAM):   end;
23765     +   else if _dm5 = '15-17'  then do;
MPRINT(EM_DIAGRAM):   else if _dm5 = '15-17' then do;
23766     +      _4_1 = 1;
MPRINT(EM_DIAGRAM):   _4_1 = 1;
23767     +   end;
MPRINT(EM_DIAGRAM):   end;
23768     +   else if _dm5 = '44815'  then do;
MPRINT(EM_DIAGRAM):   else if _dm5 = '44815' then do;
23769     +      _4_0 = -1;
MPRINT(EM_DIAGRAM):   _4_0 = -1;
23770     +      _4_1 = -1;
MPRINT(EM_DIAGRAM):   _4_1 = -1;
23771     +      _4_2 = -1;
MPRINT(EM_DIAGRAM):   _4_2 = -1;
23772     +      _4_3 = -1;
MPRINT(EM_DIAGRAM):   _4_3 = -1;
23773     +      _4_4 = -1;
MPRINT(EM_DIAGRAM):   _4_4 = -1;
23774     +   end;
MPRINT(EM_DIAGRAM):   end;
23775     +   else if _dm5 = '44720'  then do;
MPRINT(EM_DIAGRAM):   else if _dm5 = '44720' then do;
23776     +      _4_4 = 1;
MPRINT(EM_DIAGRAM):   _4_4 = 1;
23777     +   end;
MPRINT(EM_DIAGRAM):   end;
23778     +   else if _dm5 = '24-26'  then do;
MPRINT(EM_DIAGRAM):   else if _dm5 = '24-26' then do;
23779     +      _4_2 = 1;
MPRINT(EM_DIAGRAM):   _4_2 = 1;
23780     +   end;
MPRINT(EM_DIAGRAM):   end;
23781     +   else do;
MPRINT(EM_DIAGRAM):   else do;
23782     +      _4_0 = .;
MPRINT(EM_DIAGRAM):   _4_0 = .;
23783     +      _4_1 = .;
MPRINT(EM_DIAGRAM):   _4_1 = .;
23784     +      _4_2 = .;
MPRINT(EM_DIAGRAM):   _4_2 = .;
23785     +      _4_3 = .;
MPRINT(EM_DIAGRAM):   _4_3 = .;
23786     +      _4_4 = .;
MPRINT(EM_DIAGRAM):   _4_4 = .;
23787     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
23788     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
23789     +   end;
MPRINT(EM_DIAGRAM):   end;
23790     +end;
MPRINT(EM_DIAGRAM):   end;
23791     +
23792     +*** Generate dummy variables for irradiat ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for irradiat ;
23793     +drop _5_0 ;
MPRINT(EM_DIAGRAM):   drop _5_0 ;
23794     +if missing( irradiat ) then do;
MPRINT(EM_DIAGRAM):   if missing( irradiat ) then do;
23795     +   _5_0 = .;
MPRINT(EM_DIAGRAM):   _5_0 = .;
23796     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
23797     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
23798     +end;
MPRINT(EM_DIAGRAM):   end;
23799     +else do;
MPRINT(EM_DIAGRAM):   else do;
23800     +   length _dm3 $ 3; drop _dm3 ;
MPRINT(EM_DIAGRAM):   length _dm3 $ 3;
MPRINT(EM_DIAGRAM):   drop _dm3 ;
23801     +   _dm3 = put( irradiat , $3. );
MPRINT(EM_DIAGRAM):   _dm3 = put( irradiat , $3. );
23802     +   %DMNORMIP( _dm3 )
MPRINT(DMNORMIP):   call dmnorm(_dm3,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
23803     +   if _dm3 = 'NO'  then do;
MPRINT(EM_DIAGRAM):   if _dm3 = 'NO' then do;
23804     +      _5_0 = 1;
MPRINT(EM_DIAGRAM):   _5_0 = 1;
23805     +   end;
MPRINT(EM_DIAGRAM):   end;
23806     +   else if _dm3 = 'YES'  then do;
MPRINT(EM_DIAGRAM):   else if _dm3 = 'YES' then do;
23807     +      _5_0 = -1;
MPRINT(EM_DIAGRAM):   _5_0 = -1;
23808     +   end;
MPRINT(EM_DIAGRAM):   end;
23809     +   else do;
MPRINT(EM_DIAGRAM):   else do;
23810     +      _5_0 = .;
MPRINT(EM_DIAGRAM):   _5_0 = .;
23811     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
23812     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
23813     +   end;
MPRINT(EM_DIAGRAM):   end;
23814     +end;
MPRINT(EM_DIAGRAM):   end;
23815     +
23816     +*** Generate dummy variables for menopause ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for menopause ;
23817     +drop _6_0 _6_1 ;
MPRINT(EM_DIAGRAM):   drop _6_0 _6_1 ;
23818     +if missing( menopause ) then do;
MPRINT(EM_DIAGRAM):   if missing( menopause ) then do;
23819     +   _6_0 = .;
MPRINT(EM_DIAGRAM):   _6_0 = .;
23820     +   _6_1 = .;
MPRINT(EM_DIAGRAM):   _6_1 = .;
23821     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
23822     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
23823     +end;
MPRINT(EM_DIAGRAM):   end;
23824     +else do;
MPRINT(EM_DIAGRAM):   else do;
23825     +   length _dm7 $ 7; drop _dm7 ;
MPRINT(EM_DIAGRAM):   length _dm7 $ 7;
MPRINT(EM_DIAGRAM):   drop _dm7 ;
23826     +   _dm7 = put( menopause , $7. );
MPRINT(EM_DIAGRAM):   _dm7 = put( menopause , $7. );
23827     +   %DMNORMIP( _dm7 )
MPRINT(DMNORMIP):   call dmnorm(_dm7,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
23828     +   if _dm7 = 'PREMENO'  then do;
MPRINT(EM_DIAGRAM):   if _dm7 = 'PREMENO' then do;
23829     +      _6_0 = -1;
MPRINT(EM_DIAGRAM):   _6_0 = -1;
23830     +      _6_1 = -1;
MPRINT(EM_DIAGRAM):   _6_1 = -1;
23831     +   end;
MPRINT(EM_DIAGRAM):   end;
23832     +   else if _dm7 = 'GE40'  then do;
MPRINT(EM_DIAGRAM):   else if _dm7 = 'GE40' then do;
23833     +      _6_0 = 1;
MPRINT(EM_DIAGRAM):   _6_0 = 1;
23834     +      _6_1 = 0;
MPRINT(EM_DIAGRAM):   _6_1 = 0;
23835     +   end;
MPRINT(EM_DIAGRAM):   end;
23836     +   else if _dm7 = 'LT40'  then do;
MPRINT(EM_DIAGRAM):   else if _dm7 = 'LT40' then do;
23837     +      _6_0 = 0;
MPRINT(EM_DIAGRAM):   _6_0 = 0;
23838     +      _6_1 = 1;
MPRINT(EM_DIAGRAM):   _6_1 = 1;
23839     +   end;
MPRINT(EM_DIAGRAM):   end;
23840     +   else do;
MPRINT(EM_DIAGRAM):   else do;
23841     +      _6_0 = .;
MPRINT(EM_DIAGRAM):   _6_0 = .;
23842     +      _6_1 = .;
MPRINT(EM_DIAGRAM):   _6_1 = .;
23843     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
23844     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
23845     +   end;
MPRINT(EM_DIAGRAM):   end;
23846     +end;
MPRINT(EM_DIAGRAM):   end;
23847     +
23848     +*** Generate dummy variables for node_caps ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for node_caps ;
23849     +drop _7_0 _7_1 ;
MPRINT(EM_DIAGRAM):   drop _7_0 _7_1 ;
23850     +if missing( node_caps ) then do;
MPRINT(EM_DIAGRAM):   if missing( node_caps ) then do;
23851     +   _7_0 = .;
MPRINT(EM_DIAGRAM):   _7_0 = .;
23852     +   _7_1 = .;
MPRINT(EM_DIAGRAM):   _7_1 = .;
23853     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
23854     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
23855     +end;
MPRINT(EM_DIAGRAM):   end;
23856     +else do;
MPRINT(EM_DIAGRAM):   else do;
23857     +   length _dm3 $ 3; drop _dm3 ;
MPRINT(EM_DIAGRAM):   length _dm3 $ 3;
MPRINT(EM_DIAGRAM):   drop _dm3 ;
23858     +   %DMNORMCP( node_caps , _dm3 )
MPRINT(DMNORMCP):   _dm3=dmnorm(node_caps,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
23859     +   if _dm3 = 'NO'  then do;
MPRINT(EM_DIAGRAM):   if _dm3 = 'NO' then do;
23860     +      _7_0 = 0;
MPRINT(EM_DIAGRAM):   _7_0 = 0;
23861     +      _7_1 = 1;
MPRINT(EM_DIAGRAM):   _7_1 = 1;
23862     +   end;
MPRINT(EM_DIAGRAM):   end;
23863     +   else if _dm3 = 'YES'  then do;
MPRINT(EM_DIAGRAM):   else if _dm3 = 'YES' then do;
23864     +      _7_0 = -1;
MPRINT(EM_DIAGRAM):   _7_0 = -1;
23865     +      _7_1 = -1;
MPRINT(EM_DIAGRAM):   _7_1 = -1;
23866     +   end;
MPRINT(EM_DIAGRAM):   end;
23867     +   else if _dm3 = '?'  then do;
MPRINT(EM_DIAGRAM):   else if _dm3 = '?' then do;
23868     +      _7_0 = 1;
MPRINT(EM_DIAGRAM):   _7_0 = 1;
23869     +      _7_1 = 0;
MPRINT(EM_DIAGRAM):   _7_1 = 0;
23870     +   end;
MPRINT(EM_DIAGRAM):   end;
23871     +   else do;
MPRINT(EM_DIAGRAM):   else do;
23872     +      _7_0 = .;
MPRINT(EM_DIAGRAM):   _7_0 = .;
23873     +      _7_1 = .;
MPRINT(EM_DIAGRAM):   _7_1 = .;
23874     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
23875     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
23876     +   end;
MPRINT(EM_DIAGRAM):   end;
23877     +end;
MPRINT(EM_DIAGRAM):   end;
23878     +
23879     +*** Generate dummy variables for tumor_size ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for tumor_size ;
23880     +drop _8_0 _8_1 _8_2 _8_3 _8_4 _8_5 _8_6 _8_7 _8_8 _8_9 ;
MPRINT(EM_DIAGRAM):   drop _8_0 _8_1 _8_2 _8_3 _8_4 _8_5 _8_6 _8_7 _8_8 _8_9 ;
23881     +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
23882     +_8_0 = 0;
MPRINT(EM_DIAGRAM):   _8_0 = 0;
23883     +_8_1 = 0;
MPRINT(EM_DIAGRAM):   _8_1 = 0;
23884     +_8_2 = 0;
MPRINT(EM_DIAGRAM):   _8_2 = 0;
23885     +_8_3 = 0;
MPRINT(EM_DIAGRAM):   _8_3 = 0;
23886     +_8_4 = 0;
MPRINT(EM_DIAGRAM):   _8_4 = 0;
23887     +_8_5 = 0;
MPRINT(EM_DIAGRAM):   _8_5 = 0;
23888     +_8_6 = 0;
MPRINT(EM_DIAGRAM):   _8_6 = 0;
23889     +_8_7 = 0;
MPRINT(EM_DIAGRAM):   _8_7 = 0;
23890     +_8_8 = 0;
MPRINT(EM_DIAGRAM):   _8_8 = 0;
23891     +_8_9 = 0;
MPRINT(EM_DIAGRAM):   _8_9 = 0;
23892     +if missing( tumor_size ) then do;
MPRINT(EM_DIAGRAM):   if missing( tumor_size ) then do;
23893     +   _8_0 = .;
MPRINT(EM_DIAGRAM):   _8_0 = .;
23894     +   _8_1 = .;
MPRINT(EM_DIAGRAM):   _8_1 = .;
23895     +   _8_2 = .;
MPRINT(EM_DIAGRAM):   _8_2 = .;
23896     +   _8_3 = .;
MPRINT(EM_DIAGRAM):   _8_3 = .;
23897     +   _8_4 = .;
MPRINT(EM_DIAGRAM):   _8_4 = .;
23898     +   _8_5 = .;
MPRINT(EM_DIAGRAM):   _8_5 = .;
23899     +   _8_6 = .;
MPRINT(EM_DIAGRAM):   _8_6 = .;
23900     +   _8_7 = .;
MPRINT(EM_DIAGRAM):   _8_7 = .;
23901     +   _8_8 = .;
MPRINT(EM_DIAGRAM):   _8_8 = .;
23902     +   _8_9 = .;
MPRINT(EM_DIAGRAM):   _8_9 = .;
23903     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
23904     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
23905     +end;
MPRINT(EM_DIAGRAM):   end;
23906     +else do;
MPRINT(EM_DIAGRAM):   else do;
23907     +   length _dm5 $ 5; drop _dm5 ;
MPRINT(EM_DIAGRAM):   length _dm5 $ 5;
MPRINT(EM_DIAGRAM):   drop _dm5 ;
23908     +   %DMNORMCP( tumor_size , _dm5 )
MPRINT(DMNORMCP):   _dm5=dmnorm(tumor_size,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
23909     +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
23910     +   if _dm5 <= '35-39'  then do;
MPRINT(EM_DIAGRAM):   if _dm5 <= '35-39' then do;
23911     +      if _dm5 <= '20-24'  then do;
MPRINT(EM_DIAGRAM):   if _dm5 <= '20-24' then do;
23912     +         if _dm5 <= '15-19'  then do;
MPRINT(EM_DIAGRAM):   if _dm5 <= '15-19' then do;
23913     +            if _dm5 = '0-4'  then do;
MPRINT(EM_DIAGRAM):   if _dm5 = '0-4' then do;
23914     +               _8_0 = 1;
MPRINT(EM_DIAGRAM):   _8_0 = 1;
23915     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
23916     +            end;
MPRINT(EM_DIAGRAM):   end;
23917     +            else do;
MPRINT(EM_DIAGRAM):   else do;
23918     +               if _dm5 = '15-19'  then do;
MPRINT(EM_DIAGRAM):   if _dm5 = '15-19' then do;
23919     +                  _8_1 = 1;
MPRINT(EM_DIAGRAM):   _8_1 = 1;
23920     +                  _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
23921     +               end;
MPRINT(EM_DIAGRAM):   end;
23922     +            end;
MPRINT(EM_DIAGRAM):   end;
23923     +         end;
MPRINT(EM_DIAGRAM):   end;
23924     +         else do;
MPRINT(EM_DIAGRAM):   else do;
23925     +            if _dm5 = '20-24'  then do;
MPRINT(EM_DIAGRAM):   if _dm5 = '20-24' then do;
23926     +               _8_2 = 1;
MPRINT(EM_DIAGRAM):   _8_2 = 1;
23927     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
23928     +            end;
MPRINT(EM_DIAGRAM):   end;
23929     +         end;
MPRINT(EM_DIAGRAM):   end;
23930     +      end;
MPRINT(EM_DIAGRAM):   end;
23931     +      else do;
MPRINT(EM_DIAGRAM):   else do;
23932     +         if _dm5 <= '30-34'  then do;
MPRINT(EM_DIAGRAM):   if _dm5 <= '30-34' then do;
23933     +            if _dm5 = '25-29'  then do;
MPRINT(EM_DIAGRAM):   if _dm5 = '25-29' then do;
23934     +               _8_3 = 1;
MPRINT(EM_DIAGRAM):   _8_3 = 1;
23935     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
23936     +            end;
MPRINT(EM_DIAGRAM):   end;
23937     +            else do;
MPRINT(EM_DIAGRAM):   else do;
23938     +               if _dm5 = '30-34'  then do;
MPRINT(EM_DIAGRAM):   if _dm5 = '30-34' then do;
23939     +                  _8_4 = 1;
MPRINT(EM_DIAGRAM):   _8_4 = 1;
23940     +                  _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
23941     +               end;
MPRINT(EM_DIAGRAM):   end;
23942     +            end;
MPRINT(EM_DIAGRAM):   end;
23943     +         end;
MPRINT(EM_DIAGRAM):   end;
23944     +         else do;
MPRINT(EM_DIAGRAM):   else do;
23945     +            if _dm5 = '35-39'  then do;
MPRINT(EM_DIAGRAM):   if _dm5 = '35-39' then do;
23946     +               _8_5 = 1;
MPRINT(EM_DIAGRAM):   _8_5 = 1;
23947     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
23948     +            end;
MPRINT(EM_DIAGRAM):   end;
23949     +         end;
MPRINT(EM_DIAGRAM):   end;
23950     +      end;
MPRINT(EM_DIAGRAM):   end;
23951     +   end;
MPRINT(EM_DIAGRAM):   end;
23952     +   else do;
MPRINT(EM_DIAGRAM):   else do;
23953     +      if _dm5 <= '44848'  then do;
MPRINT(EM_DIAGRAM):   if _dm5 <= '44848' then do;
23954     +         if _dm5 <= '44690'  then do;
MPRINT(EM_DIAGRAM):   if _dm5 <= '44690' then do;
23955     +            if _dm5 = '40-44'  then do;
MPRINT(EM_DIAGRAM):   if _dm5 = '40-44' then do;
23956     +               _8_6 = 1;
MPRINT(EM_DIAGRAM):   _8_6 = 1;
23957     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
23958     +            end;
MPRINT(EM_DIAGRAM):   end;
23959     +            else do;
MPRINT(EM_DIAGRAM):   else do;
23960     +               if _dm5 = '44690'  then do;
MPRINT(EM_DIAGRAM):   if _dm5 = '44690' then do;
23961     +                  _8_7 = 1;
MPRINT(EM_DIAGRAM):   _8_7 = 1;
23962     +                  _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
23963     +               end;
MPRINT(EM_DIAGRAM):   end;
23964     +            end;
MPRINT(EM_DIAGRAM):   end;
23965     +         end;
MPRINT(EM_DIAGRAM):   end;
23966     +         else do;
MPRINT(EM_DIAGRAM):   else do;
23967     +            if _dm5 = '44848'  then do;
MPRINT(EM_DIAGRAM):   if _dm5 = '44848' then do;
23968     +               _8_8 = 1;
MPRINT(EM_DIAGRAM):   _8_8 = 1;
23969     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
23970     +            end;
MPRINT(EM_DIAGRAM):   end;
23971     +         end;
MPRINT(EM_DIAGRAM):   end;
23972     +      end;
MPRINT(EM_DIAGRAM):   end;
23973     +      else do;
MPRINT(EM_DIAGRAM):   else do;
23974     +         if _dm5 = '45-49'  then do;
MPRINT(EM_DIAGRAM):   if _dm5 = '45-49' then do;
23975     +            _8_9 = 1;
MPRINT(EM_DIAGRAM):   _8_9 = 1;
23976     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
23977     +         end;
MPRINT(EM_DIAGRAM):   end;
23978     +         else do;
MPRINT(EM_DIAGRAM):   else do;
23979     +            if _dm5 = '50-54'  then do;
MPRINT(EM_DIAGRAM):   if _dm5 = '50-54' then do;
23980     +               _8_0 = -1;
MPRINT(EM_DIAGRAM):   _8_0 = -1;
23981     +               _8_1 = -1;
MPRINT(EM_DIAGRAM):   _8_1 = -1;
23982     +               _8_2 = -1;
MPRINT(EM_DIAGRAM):   _8_2 = -1;
23983     +               _8_3 = -1;
MPRINT(EM_DIAGRAM):   _8_3 = -1;
23984     +               _8_4 = -1;
MPRINT(EM_DIAGRAM):   _8_4 = -1;
23985     +               _8_5 = -1;
MPRINT(EM_DIAGRAM):   _8_5 = -1;
23986     +               _8_6 = -1;
MPRINT(EM_DIAGRAM):   _8_6 = -1;
23987     +               _8_7 = -1;
MPRINT(EM_DIAGRAM):   _8_7 = -1;
23988     +               _8_8 = -1;
MPRINT(EM_DIAGRAM):   _8_8 = -1;
23989     +               _8_9 = -1;
MPRINT(EM_DIAGRAM):   _8_9 = -1;
23990     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
23991     +            end;
MPRINT(EM_DIAGRAM):   end;
23992     +         end;
MPRINT(EM_DIAGRAM):   end;
23993     +      end;
MPRINT(EM_DIAGRAM):   end;
23994     +   end;
MPRINT(EM_DIAGRAM):   end;
23995     +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
23996     +      _8_0 = .;
MPRINT(EM_DIAGRAM):   _8_0 = .;
23997     +      _8_1 = .;
MPRINT(EM_DIAGRAM):   _8_1 = .;
23998     +      _8_2 = .;
MPRINT(EM_DIAGRAM):   _8_2 = .;
23999     +      _8_3 = .;
MPRINT(EM_DIAGRAM):   _8_3 = .;
24000     +      _8_4 = .;
MPRINT(EM_DIAGRAM):   _8_4 = .;
24001     +      _8_5 = .;
MPRINT(EM_DIAGRAM):   _8_5 = .;
24002     +      _8_6 = .;
MPRINT(EM_DIAGRAM):   _8_6 = .;
24003     +      _8_7 = .;
MPRINT(EM_DIAGRAM):   _8_7 = .;
24004     +      _8_8 = .;
MPRINT(EM_DIAGRAM):   _8_8 = .;
24005     +      _8_9 = .;
MPRINT(EM_DIAGRAM):   _8_9 = .;
24006     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
24007     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
24008     +   end;
MPRINT(EM_DIAGRAM):   end;
24009     +end;
MPRINT(EM_DIAGRAM):   end;
24010     +
24011     +*** If missing inputs, use averages;
MPRINT(EM_DIAGRAM):   *** If missing inputs, use averages;
24012     +if _DM_BAD > 0 then do;
MPRINT(EM_DIAGRAM):   if _DM_BAD > 0 then do;
24013     +   _P0 = 0.2920353982;
MPRINT(EM_DIAGRAM):   _P0 = 0.2920353982;
24014     +   _P1 = 0.7079646018;
MPRINT(EM_DIAGRAM):   _P1 = 0.7079646018;
24015     +   goto REGDR1;
MPRINT(EM_DIAGRAM):   goto REGDR1;
24016     +end;
MPRINT(EM_DIAGRAM):   end;
24017     +
24018     +*** Compute Linear Predictor;
MPRINT(EM_DIAGRAM):   *** Compute Linear Predictor;
24019     +drop _TEMP;
MPRINT(EM_DIAGRAM):   drop _TEMP;
24020     +drop _LP0 ;
MPRINT(EM_DIAGRAM):   drop _LP0 ;
24021     +_LP0 = 0;
MPRINT(EM_DIAGRAM):   _LP0 = 0;
24022     +
24023     +***  Effect: REP_deg_malig ;
MPRINT(EM_DIAGRAM):   *** Effect: REP_deg_malig ;
24024     +_TEMP = REP_deg_malig ;
MPRINT(EM_DIAGRAM):   _TEMP = REP_deg_malig ;
24025     +_LP0 = _LP0 + (    0.74188815265941 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.74188815265941 * _TEMP);
24026     +
24027     +***  Effect: age ;
MPRINT(EM_DIAGRAM):   *** Effect: age ;
24028     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
24029     +_LP0 = _LP0 + (     1.2711526472824) * _TEMP * _1_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1.2711526472824) * _TEMP * _1_0;
24030     +_LP0 = _LP0 + (    3.51118587377913) * _TEMP * _1_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 3.51118587377913) * _TEMP * _1_1;
24031     +_LP0 = _LP0 + (    1.77015584013962) * _TEMP * _1_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1.77015584013962) * _TEMP * _1_2;
24032     +_LP0 = _LP0 + (    3.24429045271765) * _TEMP * _1_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 3.24429045271765) * _TEMP * _1_3;
24033     +
24034     +***  Effect: breast ;
MPRINT(EM_DIAGRAM):   *** Effect: breast ;
24035     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
24036     +_LP0 = _LP0 + (   -0.55362156774278) * _TEMP * _2_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.55362156774278) * _TEMP * _2_0;
24037     +
24038     +***  Effect: breast_quad ;
MPRINT(EM_DIAGRAM):   *** Effect: breast_quad ;
24039     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
24040     +_LP0 = _LP0 + (    13.7360898428639) * _TEMP * _3_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 13.7360898428639) * _TEMP * _3_0;
24041     +_LP0 = _LP0 + (   -1.34657631410209) * _TEMP * _3_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1.34657631410209) * _TEMP * _3_1;
24042     +_LP0 = _LP0 + (   -2.87020658947285) * _TEMP * _3_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -2.87020658947285) * _TEMP * _3_2;
24043     +_LP0 = _LP0 + (   -3.60528108373917) * _TEMP * _3_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -3.60528108373917) * _TEMP * _3_3;
24044     +_LP0 = _LP0 + (   -2.02455025813794) * _TEMP * _3_4;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -2.02455025813794) * _TEMP * _3_4;
24045     +
24046     +***  Effect: inv_nodes ;
MPRINT(EM_DIAGRAM):   *** Effect: inv_nodes ;
24047     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
24048     +_LP0 = _LP0 + (   -3.92999632834698) * _TEMP * _4_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -3.92999632834698) * _TEMP * _4_0;
24049     +_LP0 = _LP0 + (   -1.85577896916898) * _TEMP * _4_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1.85577896916898) * _TEMP * _4_1;
24050     +_LP0 = _LP0 + (    11.4860062818446) * _TEMP * _4_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 11.4860062818446) * _TEMP * _4_2;
24051     +_LP0 = _LP0 + (   -2.40138030631945) * _TEMP * _4_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -2.40138030631945) * _TEMP * _4_3;
24052     +_LP0 = _LP0 + (   -1.69160020226667) * _TEMP * _4_4;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1.69160020226667) * _TEMP * _4_4;
24053     +
24054     +***  Effect: irradiat ;
MPRINT(EM_DIAGRAM):   *** Effect: irradiat ;
24055     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
24056     +_LP0 = _LP0 + (    0.05106811531383) * _TEMP * _5_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.05106811531383) * _TEMP * _5_0;
24057     +
24058     +***  Effect: menopause ;
MPRINT(EM_DIAGRAM):   *** Effect: menopause ;
24059     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
24060     +_LP0 = _LP0 + (    3.68241923615777) * _TEMP * _6_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 3.68241923615777) * _TEMP * _6_0;
24061     +_LP0 = _LP0 + (   -8.03309066307678) * _TEMP * _6_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -8.03309066307678) * _TEMP * _6_1;
24062     +
24063     +***  Effect: node_caps ;
MPRINT(EM_DIAGRAM):   *** Effect: node_caps ;
24064     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
24065     +_LP0 = _LP0 + (   -9.61607022474882) * _TEMP * _7_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -9.61607022474882) * _TEMP * _7_0;
24066     +_LP0 = _LP0 + (     4.8963217947722) * _TEMP * _7_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 4.8963217947722) * _TEMP * _7_1;
24067     +
24068     +***  Effect: tumor_size ;
MPRINT(EM_DIAGRAM):   *** Effect: tumor_size ;
24069     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
24070     +_LP0 = _LP0 + (   -10.0604143863662) * _TEMP * _8_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -10.0604143863662) * _TEMP * _8_0;
24071     +_LP0 = _LP0 + (     4.6393813293927) * _TEMP * _8_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 4.6393813293927) * _TEMP * _8_1;
24072     +_LP0 = _LP0 + (    5.07127301211026) * _TEMP * _8_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 5.07127301211026) * _TEMP * _8_2;
24073     +_LP0 = _LP0 + (    5.06886354257634) * _TEMP * _8_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 5.06886354257634) * _TEMP * _8_3;
24074     +_LP0 = _LP0 + (    5.07640420879079) * _TEMP * _8_4;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 5.07640420879079) * _TEMP * _8_4;
24075     +_LP0 = _LP0 + (    3.66865920399611) * _TEMP * _8_5;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 3.66865920399611) * _TEMP * _8_5;
24076     +_LP0 = _LP0 + (    5.25094886049268) * _TEMP * _8_6;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 5.25094886049268) * _TEMP * _8_6;
24077     +_LP0 = _LP0 + (   -8.25096914859845) * _TEMP * _8_7;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -8.25096914859845) * _TEMP * _8_7;
24078     +_LP0 = _LP0 + (   -7.96985669817867) * _TEMP * _8_8;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -7.96985669817867) * _TEMP * _8_8;
24079     +_LP0 = _LP0 + (   -8.99285729799633) * _TEMP * _8_9;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -8.99285729799633) * _TEMP * _8_9;
24080     +
24081     +*** Naive Posterior Probabilities;
MPRINT(EM_DIAGRAM):   *** Naive Posterior Probabilities;
24082     +drop _MAXP _IY _P0 _P1;
MPRINT(EM_DIAGRAM):   drop _MAXP _IY _P0 _P1;
24083     +drop _LPMAX;
MPRINT(EM_DIAGRAM):   drop _LPMAX;
24084     +_LPMAX= 0;
MPRINT(EM_DIAGRAM):   _LPMAX= 0;
24085     +_LP0 =    -12.2948238272586 + _LP0;
MPRINT(EM_DIAGRAM):   _LP0 = -12.2948238272586 + _LP0;
24086     +if _LPMAX < _LP0 then _LPMAX = _LP0;
MPRINT(EM_DIAGRAM):   if _LPMAX < _LP0 then _LPMAX = _LP0;
24087     +_LP0 = exp(_LP0 - _LPMAX);
MPRINT(EM_DIAGRAM):   _LP0 = exp(_LP0 - _LPMAX);
24088     +_LPMAX = exp(-_LPMAX);
MPRINT(EM_DIAGRAM):   _LPMAX = exp(-_LPMAX);
24089     +_P1 = 1 / (_LPMAX + _LP0);
MPRINT(EM_DIAGRAM):   _P1 = 1 / (_LPMAX + _LP0);
24090     +_P0 = _LP0 * _P1;
MPRINT(EM_DIAGRAM):   _P0 = _LP0 * _P1;
24091     +_P1 = _LPMAX * _P1;
MPRINT(EM_DIAGRAM):   _P1 = _LPMAX * _P1;
24092     +
24093     +REGDR1:
24094     +
24095     +*** Residuals;
MPRINT(EM_DIAGRAM):   REGDR1: *** Residuals;
24096     +if (_Y = .) then do;
MPRINT(EM_DIAGRAM):   if (_Y = .) then do;
24097     +   R_classrecurrence_events = .;
MPRINT(EM_DIAGRAM):   R_classrecurrence_events = .;
24098     +   R_classno_recurrence_events = .;
MPRINT(EM_DIAGRAM):   R_classno_recurrence_events = .;
24099     +end;
MPRINT(EM_DIAGRAM):   end;
24100     +else do;
MPRINT(EM_DIAGRAM):   else do;
24101     +    label R_classrecurrence_events = 'Residual: class=recurrence-events' ;
MPRINT(EM_DIAGRAM):   label R_classrecurrence_events = 'Residual: class=recurrence-events' ;
24102     +    label R_classno_recurrence_events =
24103     +'Residual: class=no-recurrence-events' ;
MPRINT(EM_DIAGRAM):   label R_classno_recurrence_events = 'Residual: class=no-recurrence-events' ;
24104     +   R_classrecurrence_events = - _P0;
MPRINT(EM_DIAGRAM):   R_classrecurrence_events = - _P0;
24105     +   R_classno_recurrence_events = - _P1;
MPRINT(EM_DIAGRAM):   R_classno_recurrence_events = - _P1;
24106     +   select( _Y );
MPRINT(EM_DIAGRAM):   select( _Y );
24107     +      when (0)  R_classrecurrence_events = R_classrecurrence_events + 1;
MPRINT(EM_DIAGRAM):   when (0) R_classrecurrence_events = R_classrecurrence_events + 1;
24108     +      when (1)  R_classno_recurrence_events = R_classno_recurrence_events + 1;
MPRINT(EM_DIAGRAM):   when (1) R_classno_recurrence_events = R_classno_recurrence_events + 1;
24109     +   end;
MPRINT(EM_DIAGRAM):   end;
24110     +end;
MPRINT(EM_DIAGRAM):   end;
24111     +
24112     +*** Posterior Probabilities and Predicted Level;
MPRINT(EM_DIAGRAM):   *** Posterior Probabilities and Predicted Level;
24113     +label P_classrecurrence_events = 'Predicted: class=recurrence-events' ;
MPRINT(EM_DIAGRAM):   label P_classrecurrence_events = 'Predicted: class=recurrence-events' ;
24114     +label P_classno_recurrence_events = 'Predicted: class=no-recurrence-events' ;
MPRINT(EM_DIAGRAM):   label P_classno_recurrence_events = 'Predicted: class=no-recurrence-events' ;
24115     +P_classrecurrence_events = _P0;
MPRINT(EM_DIAGRAM):   P_classrecurrence_events = _P0;
24116     +_MAXP = _P0;
MPRINT(EM_DIAGRAM):   _MAXP = _P0;
24117     +_IY = 1;
MPRINT(EM_DIAGRAM):   _IY = 1;
24118     +P_classno_recurrence_events = _P1;
MPRINT(EM_DIAGRAM):   P_classno_recurrence_events = _P1;
24119     +if (_P1 >  _MAXP + 1E-8) then do;
MPRINT(EM_DIAGRAM):   if (_P1 > _MAXP + 1E-8) then do;
24120     +   _MAXP = _P1;
MPRINT(EM_DIAGRAM):   _MAXP = _P1;
24121     +   _IY = 2;
MPRINT(EM_DIAGRAM):   _IY = 2;
24122     +end;
MPRINT(EM_DIAGRAM):   end;
24123     +I_class = REGDRF[_IY];
MPRINT(EM_DIAGRAM):   I_class = REGDRF[_IY];
24124     +U_class = REGDRU[_IY];
MPRINT(EM_DIAGRAM):   U_class = REGDRU[_IY];
24125     +
24126     +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
24127     +***** end scoring code for regression;
MPRINT(EM_DIAGRAM):   ***** end scoring code for regression;
24128     +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
24129      run;
 
NOTE: DATA STEP view saved on file EMWS1.REG_TEST.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.TRANS_TEST.VIEW used (Total process time):
      real time           0.11 seconds
      cpu time            0.11 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.13 seconds
      cpu time            0.14 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
24130      quit;
24131      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
24132      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
24133      * Reg: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * Reg: Computing metadata for TRAIN data;
24134      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
 
NOTE: View EMWS1.REG_TRAIN.VIEW used (Total process time):
      real time           0.10 seconds
      cpu time            0.09 seconds
 
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta "D:\\BAN210PA\Workspaces\EMWS1\Reg\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS1.Reg_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS1.Reg_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS1.Reg_TRAIN out=WORK.M0W67_CQ noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0W67_CQ;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M0W67_CQ(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne '' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(format)!!strip(put(formatl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(informat)!!strip(put(informl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0W67_CQ;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M0W67_CQ;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M03K9BDZ NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M03K9BDZ;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M03K9BDZ;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0QCZHDY(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M03K9BDZ;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M03K9BDZ;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M03K9BDZ;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX"
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if compress(tempfmt, '0123456789.', '') = '' then formattype='NUM';
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('Q') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   if symexist('dmwb_product') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('dmwb_product')) = 'FACTORYMINER_DATASOURCE' then do;
MPRINT(EMADVISECOLUMNS):   if ROLE ^in('INPUT', 'TARGET', 'REJECTED', 'SEGMENT', 'FREQ', 'ID', 'KEY') then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M03K9BDZ;
MPRINT(EMADVISECOLUMNS):   set WORK.M03K9BDZ;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= "Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= "Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower
limit" UPPERLIMIT= "Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= "Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.Trans_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Trans_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Reg_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Reg";
MPRINT(EM_DIAGRAM):   length model $200;
MPRINT(EM_DIAGRAM):   label MODEL = "Model Node";
MPRINT(EM_DIAGRAM):   select(upcase(name));
MPRINT(EM_DIAGRAM):   when("CLASS") model = "Reg";
MPRINT(EM_DIAGRAM):   when('');
MPRINT(EM_DIAGRAM):   otherwise;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Reg: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
24479      data EMWS1.Reg_EMINFO;
MPRINT(EM_DIAGRAM):    data EMWS1.Reg_EMINFO;
24480      length TARGET KEY $32 DATA $43;
MPRINT(EM_DIAGRAM):   length TARGET KEY $32 DATA $43;
24481      input TARGET KEY DATA $;
MPRINT(EM_DIAGRAM):   input TARGET KEY DATA $;
24482      cards;
MPRINT(EM_DIAGRAM):   cards;
 
NOTE: The data set EMWS1.REG_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):   run;
24486      run;
24487      proc sort data = EMWS1.Reg_EMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS1.Reg_EMINFO NOTHREADS;
24488      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
24489      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set EMWS1.REG_EMINFO.
NOTE: The data set EMWS1.REG_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
NOTE: View EMWS1.REG_TRAIN.VIEW used (Total process time):
      real time           0.10 seconds
      cpu time            0.09 seconds
 
NOTE: View EMWS1.REG_VALIDATE.VIEW used (Total process time):
      real time           0.10 seconds
      cpu time            0.09 seconds
 
NOTE: View EMWS1.REG_TEST.VIEW used (Total process time):
      real time           0.10 seconds
      cpu time            0.09 seconds
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "August 07, 2022" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "18:56:17" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Report Log
Date:                August 07, 2022
Time:                18:56:17
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O2NFU1B1 "D:\\BAN210PA\Workspaces\EMWS1\Reg\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O2NFU1B1 new;
MPRINT(EM_DIAGRAM):   run;
24513      data WORK.DMREGTEMP;
MPRINT(EM_DIAGRAM):    data WORK.DMREGTEMP;
24514      merge EMWS1.Reg_EMESTIMATE EMWS1.Reg_FITTEST;
MPRINT(EM_DIAGRAM):   merge EMWS1.Reg_EMESTIMATE EMWS1.Reg_FITTEST;
24515      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set EMWS1.REG_EMESTIMATE.
NOTE: There were 1 observations read from the data set EMWS1.REG_FITTEST.
NOTE: The data set WORK.DMREGTEMP has 3 observations and 80 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
24516      data EMWS1.Reg_EMOUTFIT;
MPRINT(EM_DIAGRAM):    data EMWS1.Reg_EMOUTFIT;
24517      length TARGET $32;
MPRINT(EM_DIAGRAM):   length TARGET $32;
24518      set WORK.DMREGTEMP end=eof;
MPRINT(EM_DIAGRAM):   set WORK.DMREGTEMP end=eof;
24519      where (_TYPE_='PARMS');
MPRINT(EM_DIAGRAM):   where (_TYPE_='PARMS');
24520      drop _TYPE_--tumor_size45N49_RECURRENCE_EVENT;
MPRINT(EM_DIAGRAM):   drop _TYPE_--tumor_size45N49_RECURRENCE_EVENT;
24521      if eof then do;
MPRINT(EM_DIAGRAM):   if eof then do;
24522      TARGET = "class";
MPRINT(EM_DIAGRAM):   TARGET = "class";
24523      output;
MPRINT(EM_DIAGRAM):   output;
24524      end;
MPRINT(EM_DIAGRAM):   end;
24525      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set WORK.DMREGTEMP.
      WHERE _TYPE_='PARMS';
NOTE: The data set EMWS1.REG_EMOUTFIT has 1 observations and 47 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
24526      data EMWS1.Reg_EMOUTFIT;
MPRINT(EM_DIAGRAM):    data EMWS1.Reg_EMOUTFIT;
24527      set EMWS1.Reg_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg_EMOUTFIT;
24528      length TargetLabel $200;
MPRINT(EM_DIAGRAM):   length TargetLabel $200;
24529      label targetLabel = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label targetLabel = "Target Label";
24530      if upcase(TARGET) eq "CLASS" then TargetLabel = 'class';
MPRINT(EM_DIAGRAM):   if upcase(TARGET) eq "CLASS" then TargetLabel = 'class';
24531      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.REG_EMOUTFIT.
NOTE: The data set EMWS1.REG_EMOUTFIT has 1 observations and 48 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
24532      proc sort data=EMWS1.Reg_EMREPORTFIT nothreads;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.Reg_EMREPORTFIT nothreads;
24533      by TARGET;
MPRINT(EM_DIAGRAM):   by TARGET;
24534      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 20 observations read from the data set EMWS1.REG_EMREPORTFIT.
NOTE: The data set EMWS1.REG_EMREPORTFIT has 20 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
24535      %let _EMwarndup = 0;
24536      %let _EMtargetdup =;
24537      %let _EMASEtargetdup =;
24538      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
24539      set EMWS1.Reg_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg_EMOUTFIT;
24540      if .<_ASE_<0.000001 then do;
MPRINT(EM_DIAGRAM):   if .<_ASE_<0.000001 then do;
24541      call symput('_EMwarndup', '1');
MPRINT(EM_DIAGRAM):   call symput('_EMwarndup', '1');
24542      call symput('_EMtargetdup', target);
MPRINT(EM_DIAGRAM):   call symput('_EMtargetdup', target);
24543      call symput('_EMASEtargetdup', put(_ASE_, best.));
MPRINT(EM_DIAGRAM):   call symput('_EMASEtargetdup', put(_ASE_, best.));
24544      end;
MPRINT(EM_DIAGRAM):   end;
24545      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.REG_EMOUTFIT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
24546      proc sort data=EMWS1.Trans_CMeta_TRAIN out=WORK.SUBSETINMETA;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.Trans_CMeta_TRAIN out=WORK.SUBSETINMETA;
24547      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
24548      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 12 observations read from the data set EMWS1.TRANS_CMETA_TRAIN.
NOTE: The data set WORK.SUBSETINMETA has 12 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
24549      proc sort data=EMWS1.Reg_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Reg_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
24550      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
24551      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 11 observations read from the data set EMWS1.REG_VARIABLESET.
NOTE: The data set WORK.SUBSETVARSET has 11 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
24552      data WORK.ASSESS_META;
MPRINT(EM_DIAGRAM):   data WORK.ASSESS_META;
24553      merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
MPRINT(EM_DIAGRAM):   merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
24554      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
24555      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 12 observations read from the data set WORK.SUBSETINMETA.
NOTE: There were 11 observations read from the data set WORK.SUBSETVARSET.
NOTE: The data set WORK.ASSESS_META has 12 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
24556      data EM_temp_assessMeta;
MPRINT(EM_DIAGRAM):    data EM_temp_assessMeta;
24557      set EMWS1.Reg_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg_CMeta_TRAIN;
24558      where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
MPRINT(EM_DIAGRAM):   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
24559      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 8 observations read from the data set EMWS1.REG_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 8 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
24560      data EM_temp_assessdata;
MPRINT(EM_DIAGRAM):    data EM_temp_assessdata;
24561      set EMWS1.Reg_TRAIN(keep=
24562      F_class
24563      I_class
24564      P_classno_recurrence_events
24565      P_classrecurrence_events
24566      R_classno_recurrence_events
24567      R_classrecurrence_events
24568      U_class
24569      _WARN_
24570      class
24571      );
MPRINT(EM_DIAGRAM):   set EMWS1.Reg_TRAIN(keep= F_class I_class P_classno_recurrence_events P_classrecurrence_events R_classno_recurrence_events R_classrecurrence_events U_class _WARN_ class );
24572      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 113 observations read from the data set EMWS1.PART_TRAIN.
NOTE: There were 113 observations read from the data set EMWS1.REPL_TRAIN.
NOTE: There were 113 observations read from the data set EMWS1.IMPT_TRAIN.
NOTE: View EMWS1.REG_TRAIN.VIEW used (Total process time):
      real time           0.11 seconds
      cpu time            0.10 seconds
 
NOTE: There were 113 observations read from the data set EMWS1.TRANS_TRAIN.
NOTE: There were 113 observations read from the data set EMWS1.REG_TRAIN.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 113 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.12 seconds
      cpu time            0.10 seconds
 
 
MPRINT(EM_DIAGRAM):    proc freq data=EM_temp_assessdata noprint;
MPRINT(EM_DIAGRAM):   table I_class*F_class / out = WORK.Reg_1DFO1WL nocol norow outpct;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Reg_1DFO1WL;
MPRINT(EM_DIAGRAM):   length _TYPE_ $10 DATAROLE TARGET $32 TARGETLABEL $200 FROM INTO $32 CORRECTTEXT $40 ;
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Outcome Type";
MPRINT(EM_DIAGRAM):   label DATAROLE = "Data Role";
MPRINT(EM_DIAGRAM):   label TARGET = "Target Variable";
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   label FROM = "Target";
MPRINT(EM_DIAGRAM):   label INTO = "Outcome";
MPRINT(EM_DIAGRAM):   label PCT_ROW = "Target Percentage";
MPRINT(EM_DIAGRAM):   label PCT_COL = "Outcome Percentage";
MPRINT(EM_DIAGRAM):   label COUNT = "Frequency Count";
MPRINT(EM_DIAGRAM):   label PERCENT = "Total Percentage";
MPRINT(EM_DIAGRAM):   label CORRECTTEXT = "Correct Text";
MPRINT(EM_DIAGRAM):   label CORRECT = "Correct";
MPRINT(EM_DIAGRAM):   set WORK.Reg_1DFO1WL(rename=(F_class=FROM I_class=INTO));
MPRINT(EM_DIAGRAM):   retain _TYPE_ 'PREDICTION' DATAROLE "TRAIN" TARGET "class";
MPRINT(EM_DIAGRAM):   if upcase(TARGET) eq "CLASS" then TARGETLABEL = 'class';
MPRINT(EM_DIAGRAM):   if FROM eq INTO then do;
MPRINT(EM_DIAGRAM):   CORRECT = 0;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Correct";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   CORRECT = 1;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Incorrect";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS1.Reg_EMCLASSIFICATION;
MPRINT(EM_DIAGRAM):   set WORK.Reg_1DFO1WL;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   set WORK.Reg_1DFO1WL;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT(drop=INTO FROM _TYPE_);
MPRINT(EM_DIAGRAM):   set WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   length MISC $12;
MPRINT(EM_DIAGRAM):   if FROM='RECURRENCE-EVENTS' and INTO='RECURRENCE-EVENTS' then MISC='TRUEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM='RECURRENCE-EVENTS' and INTO ne 'RECURRENCE-EVENTS' then MISC='FALSENEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne 'RECURRENCE-EVENTS' and INTO='RECURRENCE-EVENTS' then MISC='FALSEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne'RECURRENCE-EVENTS' and INTO ne 'RECURRENCE-EVENTS' then MISC='TRUENEVENT';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.MISCREPORT nothreads;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc summary data=WORK.MISCREPORT NWAY;
MPRINT(EM_DIAGRAM):   output out=WORK.MISCCOUNT(drop=_FREQ_ _TYPE_) SUM=COUNT;
MPRINT(EM_DIAGRAM):   CLASS MISC;
MPRINT(EM_DIAGRAM):   VAR COUNT;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc transpose data=WORK.MISCCOUNT out=WORK.MISCREPORT(drop=_NAME_ _LABEL_);
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   ID MISC;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS1.Reg_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   if upcase(TARGET) eq "CLASS" then TARGETLABEL = 'class';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data ASSESS_REPORTMETA;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg_VariableSet;
MPRINT(EM_DIAGRAM):   where REPORT='Y';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emassmt.em_assess.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg_class_DM;
MPRINT(EM_DIAGRAM):   where _TYPE_="TARGET";
MPRINT(EM_DIAGRAM):   call symput('ASSMT_EVENT', strip(event));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):
MPRINT(EM_ASSESS):   data _ea_tmpdata;
MPRINT(EM_ASSESS):   set EM_temp_assessdata;
MPRINT(EM_ASSESS):   _tmpfreqvar_=1;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_CHECKEMSETINIT):   DATA _NULL_;
MPRINT(EM_CHECKEMSETINIT):   EM_SETINIT = 'N';
MPRINT(EM_CHECKEMSETINIT):   IF SYSPROD('PRODNUM50') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM448') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM102') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM103') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   CALL SYMPUT('EM_SETINIT', EM_SETINIT);
MPRINT(EM_CHECKEMSETINIT):   RUN;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Reading in reporting data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET ASSESS_REPORTMETA END = EOF;
MPRINT(EM_ASSESS):   IF TYPE = "C" OR UPCASE (LEVEL) IN ("NOMINAL", "BINARY" , "ORDINAL") THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) NE UPCASE ("F_class") THEN DO;
MPRINT(EM_ASSESS):   NUMCTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTC" || LEFT (PUT (NUMCTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "C");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE(NAME) NE UPCASE ("F_class") THEN DO;
MPRINT(EM_ASSESS):   NUMNTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTN" || LEFT (PUT (NUMNTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMNTOREPORT", NUMNTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMCTOREPORT", NUMCTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMTOREPORT", SUM (NUMNTOREPORT, NUMCTOREPORT));
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   PROC DMDB DATA = _ea_tmpdata VAROUT = VAROUT DMDBCAT = _D CLASSOUT = _ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   CLASS F_class ;
 
MPRINT(EM_ASSESS):   VAR P_classrecurrence_events _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_;
MPRINT(EM_ASSESS):   RUN ;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   PROC SORT DATA = _ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _auxeventname (keep = __event__) ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ...FLAG0_1 = ..... TARGET IS 0, 1 & EVENT = 1;
 
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   length __event__ $ 32;
MPRINT(EM_ASSESS):   RETAIN FLAG0_1 1 NUM1 . NUM0 . __event__ "_missing_" ;
 
MPRINT(EM_ASSESS):   SET _ASSMT_CLASSOUT END = EOF;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ....... LEVEL = BINARY OR NOMINAL OR ORDINAL;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   IF UPCASE(NAME) = UPCASE ("F_class") THEN DO;
MPRINT(EM_ASSESS):   CUMFREQ + FREQUENCY;
MPRINT(EM_ASSESS):   IF LEVEL NE "." THEN DO;
MPRINT(EM_ASSESS):   N1 + 1;
MPRINT(EM_ASSESS):   IF (NRAW NE 0 AND NRAW NE 1) OR TYPE NE "N" OR "" > " " THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ......................... IF EVENT NE BLANK;
MPRINT(EM_ASSESS):   * ....................LEVEL IS CHAR VAR ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   IF UPCASE("RECURRENCE-EVENTS") = UPCASE(LEVEL) THEN DO;
MPRINT(EM_ASSESS):   NUM1 = FREQUENCY;
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", CRAW );
MPRINT(EM_ASSESS):   __event__ = craw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   ELSE do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", NRAW );
MPRINT(EM_ASSESS):   __event__ = nraw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF LAST.NAME THEN DO;
 
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * .............. IN NOMINAL CASE, NEED TO GROUP ALL '0' ;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   NUM0 = SUM (CUMFREQ, - NUM1);
MPRINT(EM_ASSESS):   IF NUM0 < 0 THEN NUM0 = 0;
MPRINT(EM_ASSESS):   IF NUM1 = . THEN NUM1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM0", NUM0 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM1", NUM1);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM1", NUM1 / CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM0", (CUMFREQ - NUM1) / CUMFREQ);
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN DO;
MPRINT(EM_ASSESS):   FLAG0_1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "C" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF "" = " " THEN DO;
MPRINT(EM_ASSESS):   IF "RECURRENCE-EVENTS" NE "1" THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "N" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ................... IF TYPE = N;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("FLAG0_1", FLAG0_1 );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................IF LAST.NAME ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ...............IF LEVEL NE '.' ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * .............. IF NAME = TARGET;
MPRINT(EM_ASSESS):   ELSE IF "" > " " AND UPCASE(NAME) = UPCASE("") THEN DO;
MPRINT(EM_ASSESS):   NUMDECISIONS + 1;
MPRINT(EM_ASSESS):   LEVEL = TRANSLATE (LEVEL, "_", "'", "_", '"');
MPRINT(EM_ASSESS):   CALL SYMPUTX ("D_LABEL" || LEFT (PUT (NUMDECISIONS, 3.)), LEVEL );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................... ELSE IF UPCASE;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   output _auxeventname;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMOBS", CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMDECISIONS", NUMDECISIONS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET VAROUT END = EOF;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) = UPCASE ("P_classrecurrence_events") THEN DO;
MPRINT(EM_ASSESS):   IF N = 0 THEN DO;
MPRINT(EM_ASSESS):   PUT //// "          Warning: All posterior probabilities are missing values ";
MPRINT(EM_ASSESS):   PUT ///;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("ALLMISS", 1);
MPRINT(EM_ASSESS):   STOP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("ALLMISS", 0);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB", MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB", MAX);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("DIFF", MAX - MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NMISSPROB", NMISS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF UPCASE (NAME) = UPCASE ("_tmpfreqvar_") THEN DO;
MPRINT(EM_ASSESS):   AUXMIN = MIN - INT (MIN);
MPRINT(EM_ASSESS):   AUXMAX = MAX - INT (MAX);
MPRINT(EM_ASSESS):   IF AUXMIN > 0 OR AUXMAX > 0 THEN CALL SYMPUTX ("USEWEIGHT", "Y");
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("USEWEIGHT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _ANY0;
MPRINT(EM_ASSESS):   SET _ea_tmpdata (KEEP = F_class P_classrecurrence_events _tmpfreqvar_ );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................... No Formats;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF LEFT ( F_class ) = "RECURRENCE-EVENTS" THEN NTARGET = 1;
MPRINT(EM_ASSESS):   ELSE NTARGET = 0;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Before proc summary of binary case;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC SUMMARY DATA = _ANY0 (KEEP = P_classrecurrence_events NTARGET _tmpfreqvar_ WHERE = (NTARGET > . )) NWAY MISSING;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   CLASS P_classrecurrence_events ;
MPRINT(EM_ASSESS):   VAR NTARGET ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   OUTPUT OUT = ANYSUM (DROP = _TYPE_) MEAN = _MEANTARGET _MEANFREQVAR ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... Main Data Set Processing, Binary case;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK (KEEP = BASECAPC BASECAP __EVENT__ BASEEVENTS BASEGAIN BASELIFT BASERESP BASERESPC BESTCAP BESTCAPC BESTGAIN BESTLIFT BESTLIFTC BESTNUMEVENTS BESTRESP BESTRESPC BIN CBASELIFT C_LIFT C_P_CAPT_RESP C_P_RESP GAIN LIFT
MAXPROB MINPROB MNPROB NUMNONRESP NUMOBS NUMRESP PERCENTILE P_CAPT_RESP P_RESP ) WORK._TEMPSCOREDIST (KEEP = BIN LOWERPROB UPPERPROB EVENTVALUE SCR_NUMEVENTS MODELSCORE SCR_NUMNONEVENTS RANGE NUMOBSINGROUP PERCOBSINGROUP C_PERCOBSINGROUP SCR_P_EVENTS
SCR_CP_EVENTS SCR_P_NONEVENTS SCR_CP_NONEVENTS SCR_MNPROB SCR_MINPROB SCR_MAXPROB ) ;
 
MPRINT(EM_ASSESS):   SET ANYSUM END = EOF;
 
MPRINT(EM_ASSESS):   IF _N_ = 1 THEN SET _AUXEVENTNAME;
 
MPRINT(EM_ASSESS):   RETAIN MINPROB1 - MINPROB20 1 MAXPROB1 - MAXPROB20 0 MNPROB1 - MNPROB20 0 NUMOBS1 - NUMOBS20 0 NUMRESP1 - NUMRESP20 0 TRUEPOS1 - TRUEPOS100 0 TRUENEG1 - TRUENEG100 0 FALSEPOS1 - FALSEPOS100 0 FALSENEG1 - FALSENEG100 0 EVENTS1 -
EVENTS100 NONEVENTS1 - NONEVENTS100 0 FIRSTIN1 - FIRSTIN100 . LASTIN1 - LASTIN100 . RESPRATE 0.2920353982 _NEVENTS 33 _NNONEVENTS 80 TARGET "NTARGET" ;
MPRINT(EM_ASSESS):   ARRAY MINPROBS (20) MINPROB1 - MINPROB20;
MPRINT(EM_ASSESS):   ARRAY MAXPROBS (20) MAXPROB1 - MAXPROB20;
MPRINT(EM_ASSESS):   ARRAY MNPROBS (20) MNPROB1 - MNPROB20;
MPRINT(EM_ASSESS):   ARRAY NUMOBSS (20) NUMOBS1 - NUMOBS20;
MPRINT(EM_ASSESS):   ARRAY NUMRESPS (20) NUMRESP1 - NUMRESP20;
MPRINT(EM_ASSESS):   ARRAY TRUEPOSX (100) TRUEPOS1 - TRUEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSEPOSX (100) FALSEPOS1 - FALSEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSENEGX (100) FALSENEG1 - FALSENEG100;
MPRINT(EM_ASSESS):   ARRAY TRUENEGX (100) TRUENEG1 - TRUENEG100;
MPRINT(EM_ASSESS):   ARRAY _EVENTS (100) EVENTS1 - EVENTS100;
MPRINT(EM_ASSESS):   ARRAY NONEVENTS (100) NONEVENTS1 - NONEVENTS100;
MPRINT(EM_ASSESS):   ARRAY FIRSTIN (100) FIRSTIN1 - FIRSTIN100;
MPRINT(EM_ASSESS):   ARRAY LASTIN (100) LASTIN1 - LASTIN100;
MPRINT(EM_ASSESS):   RETAIN SCR_MNPROB1 - SCR_MNPROB100 0 SCR_MINPROB1 - SCR_MINPROB100 1 SCR_MAXPROB1 - SCR_MAXPROB100 0;
MPRINT(EM_ASSESS):   ARRAY SCR_MNPROBS (100) SCR_MNPROB1 - SCR_MNPROB100;
MPRINT(EM_ASSESS):   ARRAY SCR_MINPROBS (100) SCR_MINPROB1 - SCR_MINPROB100;
MPRINT(EM_ASSESS):   ARRAY SCR_MAXPROBS (100) SCR_MAXPROB1 - SCR_MAXPROB100;
MPRINT(EM_ASSESS):   DROP SCR_MINPROB1 - SCR_MINPROB100 SCR_MAXPROB1 - SCR_MAXPROB100 SCR_MNPROB1 - SCR_MNPROB100 ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...... Area For 8 Financials ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF _MEANTARGET = . THEN _MEANTARGET = RESPRATE;
MPRINT(EM_ASSESS):   DROP N1 _K SUMWEIGHTS ;
MPRINT(EM_ASSESS):   SUMWEIGHTS = 1;
 
MPRINT(EM_ASSESS):   DO _K = 1 TO CEIL (_FREQ_);
MPRINT(EM_ASSESS):   IF _K = CEIL (_FREQ_) THEN DO;
MPRINT(EM_ASSESS):   IF _FREQ_ < CEIL (_FREQ_) THEN _WEIGHT = _FREQ_ - FLOOR (_FREQ_);
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   N1 + _WEIGHT;
MPRINT(EM_ASSESS):   NTARGET = _MEANTARGET ;
MPRINT(EM_ASSESS):   DECILE = MIN (20, CEIL (N1 * 20 / 113));
MPRINT(EM_ASSESS):   MINPROBS ( DECILE) = MIN (MINPROBS ( DECILE), P_classrecurrence_events );
MPRINT(EM_ASSESS):   MAXPROBS ( DECILE) = MAX (MAXPROBS ( DECILE), P_classrecurrence_events );
MPRINT(EM_ASSESS):   MNPROBS ( DECILE) = SUM (MNPROBS ( DECILE), P_classrecurrence_events * _WEIGHT);
MPRINT(EM_ASSESS):   NUMOBSS ( DECILE) = NUMOBSS ( DECILE) + _WEIGHT;
MPRINT(EM_ASSESS):   NUMRESPS ( DECILE) = NUMRESPS ( DECILE) + _MEANTARGET * _WEIGHT;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ outside of do loop, Area for final ROC;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   RANKDELTA = (ROUND ( _FREQ_ ) + 1) / 2;
MPRINT(EM_ASSESS):   RANK = UNTIEDRANK + RANKDELTA;
MPRINT(EM_ASSESS):   DROP RANK ;
MPRINT(EM_ASSESS):   SUMRANK1 + RANK * ROUND (_MEANTARGET * _FREQ_, .0000001);
MPRINT(EM_ASSESS):   UNTIEDRANK + ROUND (_FREQ_, .00000001);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Area For ROC Curve;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DO _K = 1 TO 100;
MPRINT(EM_ASSESS):   IF P_classrecurrence_events * 100 >= _K THEN DO;
MPRINT(EM_ASSESS):   TRUEPOSX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   FALSEPOSX ( _K ) + _FREQ_ * (1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   TRUENEGX ( _K ) + _FREQ_ * ( 1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   FALSENEGX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SLOT = MIN (MAX (CEIL (P_classrecurrence_events * 100), 1), 100) ;
MPRINT(EM_ASSESS):   DROP SLOT;
MPRINT(EM_ASSESS):   FIRSTIN ( SLOT ) = MIN ( FIRSTIN ( SLOT ), P_classrecurrence_events);
MPRINT(EM_ASSESS):   LASTIN ( SLOT ) = MAX ( LASTIN ( SLOT ), P_classrecurrence_events);
MPRINT(EM_ASSESS):   _EVENTS ( SLOT) = _EVENTS ( SLOT) + _FREQ_ * _MEANTARGET;
MPRINT(EM_ASSESS):   NONEVENTS ( SLOT) = NONEVENTS ( SLOT) + _FREQ_ * (1 - _MEANTARGET);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ START OF OUTDIST IN BINARY CASE MAIN DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   SCR_MNPROBS ( SLOT ) = SUM (SCR_MNPROBS (SLOT), P_classrecurrence_events * _FREQ_ );
MPRINT(EM_ASSESS):   SCR_MINPROBS ( SLOT ) = MIN (SCR_MINPROBS (SLOT), P_classrecurrence_events );
MPRINT(EM_ASSESS):   SCR_MAXPROBS ( SLOT ) = MAX (SCR_MAXPROBS (SLOT), P_classrecurrence_events );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ End of Outdist in Binary case main DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   PUT //;
MPRINT(EM_ASSESS):   DO K = 1 TO 20;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LENGTH EVENTVALUE $ 32;
MPRINT(EM_ASSESS):   RETAIN EVENTVALUE "RECURRENCE-EVENTS" ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ......... Start of EOF area of BINARY processing of main data set ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SUMRANK1", SUMRANK1);
MPRINT(EM_ASSESS):   LENGTH DATAROLE $ 10;
MPRINT(EM_ASSESS):   RETAIN DATAROLE "TRAIN" ;
MPRINT(EM_ASSESS):   RETAIN OVLMIN 8.991772947833E-13 OVLMAX 0.9999995701 ;
MPRINT(EM_ASSESS):   DROP OVLMIN OVLMAX ;
MPRINT(EM_ASSESS):   C_NUMOBS = 0;
MPRINT(EM_ASSESS):   C_NUM_RESP = 0;
MPRINT(EM_ASSESS):   C_NUM_NONRESP = 0;
MPRINT(EM_ASSESS):   C_P_RESP = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   PREVIOUSPROFIT = 0;
MPRINT(EM_ASSESS):   MAXPROFIT = 0;
MPRINT(EM_ASSESS):   _KS_BIN_ = 0;
MPRINT(EM_ASSESS):   DROP _KS_BIN_;
MPRINT(EM_ASSESS):   AVGNUMRESP = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASERESP = 100 * RESPRATE;
MPRINT(EM_ASSESS):   BASERESPC = BASERESP;
MPRINT(EM_ASSESS):   BASECAP = 100 / 20;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................Start OF Gainschart = Outranks Area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = 0;
MPRINT(EM_ASSESS):   DO GROUP = 20 TO 1 BY -1;
 
MPRINT(EM_ASSESS):   BASECAPC + BASECAP;
MPRINT(EM_ASSESS):   PERCENTILE = GROUP * (100 / 20);
MPRINT(EM_ASSESS):   MINPROB = MINPROBS ( GROUP);
MPRINT(EM_ASSESS):   MAXPROB = MAXPROBS ( GROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB" || LEFT ( PUT (GROUP, 3.)), MINPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB" || LEFT ( PUT (GROUP, 3.)), MAXPROB);
MPRINT(EM_ASSESS):   NUMOBS = NUMOBSS ( GROUP);
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN MNPROB = MNPROBS ( GROUP) / NUMOBS;
MPRINT(EM_ASSESS):   ELSE MNPROB = .;
MPRINT(EM_ASSESS):   C_NUMOBS = SUM (NUMOBS, C_NUMOBS);
MPRINT(EM_ASSESS):   NUMRESP = NUMRESPS ( GROUP);
MPRINT(EM_ASSESS):   NUMNONRESP = NUMOBS - NUMRESP;
MPRINT(EM_ASSESS):   C_AVGNUM_RESP + AVGNUMRESP;
MPRINT(EM_ASSESS):   IF C_NUMOBS <= _NEVENTS THEN DO;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   BESTCAPC = C_NUMOBS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   BASEEVENTS = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASENONEVENTS = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   FLAG + 1;
MPRINT(EM_ASSESS):   DROP FLAG;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = _NEVENTS - C_NUMOBS + NUMOBS;
MPRINT(EM_ASSESS):   IF FLAG > 1 THEN BESTNUMEVENTS = 0;
MPRINT(EM_ASSESS):   BESTCAPC = 100;
MPRINT(EM_ASSESS):   IF C_NUMOBS - _NEVENTS <= NUMOBS THEN DO;
MPRINT(EM_ASSESS):   BASEEVENTS = C_NUMOBS - _NEVENTS;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS - C_NUMOBS + _NEVENTS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BASEEVENTS = 0;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   BESTCAP = BESTNUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   IF C_NUMOBS <= _NEVENTS THEN DO;
MPRINT(EM_ASSESS):   BESTLIFT = ((_NEVENTS+_NNONEVENTS) / 20) /AVGNUMRESP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTLIFT = BESTNUMEVENTS / AVGNUMRESP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   C_BESTNUMEVENTS + BESTNUMEVENTS;
MPRINT(EM_ASSESS):   DROP C_BESTNUMEVENTS;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN BESTLIFTC = C_BESTNUMEVENTS / (_NEVENTS / 113 * C_NUMOBS);
MPRINT(EM_ASSESS):   ELSE BESTLIFTC = .;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESP = BESTNUMEVENTS * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_RESP = NUMRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_NONRESP = NUMNONRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESP = .;
MPRINT(EM_ASSESS):   P_RESP = .;
MPRINT(EM_ASSESS):   P_NONRESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESPC = C_BESTNUMEVENTS * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   BESTGAIN = MAX (0, ((C_BESTNUMEVENTS / C_NUMOBS ) / ( AVGNUMRESP / (113/20)) - 1) * 100);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESPC = .;
MPRINT(EM_ASSESS):   BESTGAIN = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMNONRESP > 0 THEN ODDS = NUMRESP / NUMNONRESP;
MPRINT(EM_ASSESS):   ELSE ODDS = .;
MPRINT(EM_ASSESS):   C_NUM_RESP = SUM (C_NUM_RESP , NUMRESP );
MPRINT(EM_ASSESS):   C_NUM_NONRESP = SUM (C_NUM_NONRESP, NUMNONRESP );
MPRINT(EM_ASSESS):   IF C_NUM_NONRESP > 0 THEN C_ODDS = C_NUM_RESP / C_NUM_NONRESP;
MPRINT(EM_ASSESS):   ELSE C_ODDS = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   C_P_RESP = C_NUM_RESP * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   GAIN = ABS(100 * (((C_NUM_RESP / C_NUMOBS ) / (_NEVENTS / 113)) - 1));
MPRINT(EM_ASSESS):   BASEGAIN = 100 * (( (C_AVGNUM_RESP /((20-GROUP+1)* 113/20) ) / ( AVGNUMRESP / (113/20))) - 1);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   GAIN = .;
MPRINT(EM_ASSESS):   BASEGAIN = .;
MPRINT(EM_ASSESS):   C_P_RESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF BASEGAIN <= 0 THEN BASEGAIN = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = NUMRESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   P_CAPT_NONRESP = NUMNONRESP * 100 / ( 113 - _NEVENTS);
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = C_NUM_RESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   C_P_CAPT_NONRESP = C_NUM_NONRESP * 100 / ( 113 - _NEVENTS);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Area For Binned KS in Outranks area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _DIFFERENCE = C_P_CAPT_RESP - C_P_CAPT_NONRESP ;
MPRINT(EM_ASSESS):   IF _KS_BIN_ < _DIFFERENCE THEN DO;
MPRINT(EM_ASSESS):   _KS_BIN_ = _DIFFERENCE;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = MINPROB + (MAXPROB - MINPROB) / 2 ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LIFT = P_RESP * .01 / RESPRATE ;
MPRINT(EM_ASSESS):   C_LIFT = C_P_RESP * .01 / RESPRATE;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BASELIFT = AVGNUMRESP / ( RESPRATE * 113/20 );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE BASELIFT = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN CBASELIFT = C_AVGNUM_RESP / (RESPRATE * ((20-GROUP+1)* 113/20));
MPRINT(EM_ASSESS):   ELSE CBASELIFT = .;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ WITHIN DO LOOP FOR OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 + 1 - GROUP;
MPRINT(EM_ASSESS):   PERCENTILE = BIN * (100 / 20);
MPRINT(EM_ASSESS):   B_C_P_RESP = PERCENTILE;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPRANK ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................ END OF GAINSCHART = OUTRANKS AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFITGROUP" , MAXPROFITGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFIT" , MAXPROFIT );
MPRINT(EM_ASSESS):   KS_ABSDIFF = 0 ;
MPRINT(EM_ASSESS):   MINPRECTPR = 9999;
MPRINT(EM_ASSESS):   Y0 = 1 - RESPRATE;
MPRINT(EM_ASSESS):   Y1 = RESPRATE;
MPRINT(EM_ASSESS):   MAXMUTUAL = 0;
MPRINT(EM_ASSESS):   DROP MAXMUTUAL KSPROB Y0 Y1 KS_ABSDIFF MINPRECTPR;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .....................About to start Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................... Finished Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Outdist ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS96 - EVENTS100 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS96 - NONEVENTS100);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB96 - SCR_MNPROB100) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB96 - SCR_MINPROB100) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB96 - SCR_MAXPROB100) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 113;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 20;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 19 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS91 - EVENTS95 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS91 - NONEVENTS95);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB91 - SCR_MNPROB95) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB91 - SCR_MINPROB95) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB91 - SCR_MAXPROB95) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 113;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 19;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 18 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS86 - EVENTS90 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS86 - NONEVENTS90);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB86 - SCR_MNPROB90) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB86 - SCR_MINPROB90) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB86 - SCR_MAXPROB90) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 113;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 18;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 17 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS81 - EVENTS85 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS81 - NONEVENTS85);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB81 - SCR_MNPROB85) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB81 - SCR_MINPROB85) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB81 - SCR_MAXPROB85) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 113;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 17;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 16 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS76 - EVENTS80 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS76 - NONEVENTS80);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB76 - SCR_MNPROB80) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB76 - SCR_MINPROB80) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB76 - SCR_MAXPROB80) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 113;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 16;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 15 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS71 - EVENTS75 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS71 - NONEVENTS75);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB71 - SCR_MNPROB75) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB71 - SCR_MINPROB75) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB71 - SCR_MAXPROB75) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 113;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 15;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 14 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS66 - EVENTS70 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS66 - NONEVENTS70);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB66 - SCR_MNPROB70) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB66 - SCR_MINPROB70) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB66 - SCR_MAXPROB70) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 113;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 14;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 13 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS61 - EVENTS65 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS61 - NONEVENTS65);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB61 - SCR_MNPROB65) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB61 - SCR_MINPROB65) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB61 - SCR_MAXPROB65) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 113;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 13;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 12 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS56 - EVENTS60 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS56 - NONEVENTS60);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB56 - SCR_MNPROB60) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB56 - SCR_MINPROB60) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB56 - SCR_MAXPROB60) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 113;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 12;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 11 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS51 - EVENTS55 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS51 - NONEVENTS55);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB51 - SCR_MNPROB55) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB51 - SCR_MINPROB55) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB51 - SCR_MAXPROB55) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 113;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 11;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 10 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS46 - EVENTS50 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS46 - NONEVENTS50);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB46 - SCR_MNPROB50) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB46 - SCR_MINPROB50) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB46 - SCR_MAXPROB50) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 113;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 10;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 9 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS41 - EVENTS45 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS41 - NONEVENTS45);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB41 - SCR_MNPROB45) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB41 - SCR_MINPROB45) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB41 - SCR_MAXPROB45) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 113;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 9;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 8 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS36 - EVENTS40 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS36 - NONEVENTS40);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB36 - SCR_MNPROB40) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB36 - SCR_MINPROB40) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB36 - SCR_MAXPROB40) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 113;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 8;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 7 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS31 - EVENTS35 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS31 - NONEVENTS35);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB31 - SCR_MNPROB35) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB31 - SCR_MINPROB35) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB31 - SCR_MAXPROB35) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 113;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 7;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 6 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS26 - EVENTS30 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS26 - NONEVENTS30);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB26 - SCR_MNPROB30) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB26 - SCR_MINPROB30) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB26 - SCR_MAXPROB30) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 113;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 6;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 5 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS21 - EVENTS25 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS21 - NONEVENTS25);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB21 - SCR_MNPROB25) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB21 - SCR_MINPROB25) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB21 - SCR_MAXPROB25) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 113;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 5;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 4 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS16 - EVENTS20 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS16 - NONEVENTS20);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB16 - SCR_MNPROB20) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB16 - SCR_MINPROB20) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB16 - SCR_MAXPROB20) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 113;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 4;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 3 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS11 - EVENTS15 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS11 - NONEVENTS15);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB11 - SCR_MNPROB15) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB11 - SCR_MINPROB15) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB11 - SCR_MAXPROB15) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 113;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 3;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 2 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS6 - EVENTS10 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS6 - NONEVENTS10);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB6 - SCR_MNPROB10) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB6 - SCR_MINPROB10) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB6 - SCR_MAXPROB10) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 113;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 2;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 1 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS1 - EVENTS5 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS1 - NONEVENTS5);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB1 - SCR_MNPROB5) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB1 - SCR_MINPROB5) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB1 - SCR_MAXPROB5) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 113;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 1;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSPROB" , PUT (KSPROB, 5.3 ) );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_PROB" , _KS_BIN_PROB );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_" , _KS_BIN_ / 100 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSDIFF" , KS_ABSDIFF );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PRECTPR" , PRECTPR );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXMUTUALPROB" , MAXMUTUALPROB);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LABEL __EVENT__ = "Event" DECILE = "Depth" BIN = "Bin" NUMOBS = "Number of Observations" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * RUN for large data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST;
MPRINT(EM_ASSESS):   DELETE _AUXEVENTNAME;
MPRINT(EM_ASSESS):   QUIT;
 
MPRINT(EM_ASSESS):   OPTION NOCENTER LS = 95;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Report Vars Area.;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start OF Outdist Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPSCOREDIST;
MPRINT(EM_ASSESS):   RENAME MODELSCORE = SCORE UPPERPROB = UPPOSTERIOR SCR_CP_EVENTS =
CUMULATIVEPERCENTAGEOFEVENTS SCR_CP_NONEVENTS = CUMULATIVEPERCENTAGEOFNONEVENTS EVENTVALUE =
EVENT LOWERPROB = LOWPOSTERIOR NUMOBSINGROUP = N PERCOBSINGROUP = PERCENTAGE SCR_MINPROB =
_MINP_ SCR_MAXPROB = _MAXP_ SCR_MNPROB = _MEANP_ RANGE = P_LABEL C_PERCOBSINGROUP =
CUMULATIVEPERCENTAGE SCR_NUMEVENTS = NUMBEROFEVENTS SCR_NUMNONEVENTS = NUMBEROFNONEVENTS
SCR_P_EVENTS = PERCENTAGEOFEVENTS SCR_P_NONEVENTS = PERCENTAGEOFNONEVENTS ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... OUTDIST MODIFICATION LABEL AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL BIN = "Bin" N = "Number of Observations" P_LABEL = "Posterior
Probability Range" EVENT = "Event" LOWPOSTERIOR = "Lower Bound Posterior Probability"
PERCENTAGEOFEVENTS = "Percentage of Events" CUMULATIVEPERCENTAGEOFNONEVENTS = "Cumulative
Percentage of Nonevents" CUMULATIVEPERCENTAGE = "Cumulative Percentage" PERCENTAGEOFEVENTS =
"Percentage of Events" PERCENTAGEOFNONEVENTS = "Percentage of Nonevents"
CUMULATIVEPERCENTAGEOFEVENTS = "Cumulative Percentage of Events" UPPOSTERIOR = "Upper Bound
Posterior Probability" NUMBEROFEVENTS = "Number of Events" PERCENTAGE = "Percentage"
NUMBEROFNONEVENTS = "Number of Nonevents" _MEANP_ = "Mean Posterior Probability" _MINP_ = "Min
Posterior Probability" _MAXP_ = "Max Posterior Probability" SCORE = "Model Score" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   SET WORK._TEMPSCOREDIST (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........... END OF OUTDIST MODIFICATION;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start of OUTRANKS Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPRANK;
MPRINT(EM_ASSESS):   RENAME __EVENT__ = EVENT P_RESP = RESP C_P_CAPT_RESP = CAPC P_CAPT_RESP =
CAP NUMNONRESP = NUMNEVENT NUMRESP = NUMEVENT BASEEVENTS = BASENUMBEROFEVENTS BESTNUMEVENTS =
BESTNUMBEROFEVENTS MAXPROB = _MAXP_ MINPROB = _MINP_ CBASELIFT = BASELIFTC C_LIFT = LIFTC
MNPROB = _MEANP_ PERCENTILE = DECILE NUMOBS = N NUMEVENT = NUMBEROFEVENTS C_P_RESP = RESPC ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................. OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL _MAXP_ = "Max Posterior Probability" _MINP_ = "Min Posterior
Probability" _MEANP_ = "Mean Posterior Probability" BASECAP = "Baseline % Captured Response"
BASECAPC = "Baseline Cumulative % Captured Response" BASENUMBEROFEVENTS = "Baseline Number of
Events" BASEGAIN = "Baseline Gain" BASELIFT = "Baseline Lift" BASELIFTC = "Baseline Cumulative
Lift" BASERESP = "Baseline % Response" BASERESPC = "Baseline Cumulative % Response" BASELIFTC
= "Baseline Cumulative Lift" BESTCAP = "Best % Captured Response" BESTCAPC = "Best Cumulative
% Captured Response" BESTGAIN = "Best Gain" BESTRESP = "Best % Response" BESTRESPC = "Best
Cumulative % Response" BESTLIFT = "Best Lift" BESTLIFTC = "Best Cumulative Lift"
BESTNUMBEROFEVENTS = "Best Number of Events" CAP = "% Captured Response" CAPC = "Cumulative %
Captured Response" DECILE = "Depth" GAIN = "Gain" LIFT = "Lift" LIFTC = "Cumulative Lift"
NUMNEVENT = "Number of Nonevents" N = "Number of Observations" EVENT = "Event" RESPC =
"Cumulative % Response" NUMBEROFEVENTS = "Number of Events" RESP = "% Response" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK;
MPRINT(EM_ASSESS):   SET WORK._TEMPRANK (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   proc datasets lib=work nolist;
MPRINT(EM_ASSESS):   delete _ea_tmpdata;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_ASSESS):   quit;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   OPTION ERRORS = 20;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    data WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   retain target "class";
MPRINT(EM_DIAGRAM):   retain TARGETLABEL 'class';
MPRINT(EM_DIAGRAM):   retain dataRole "TRAIN";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Reg_EMRANK;
MPRINT(EM_DIAGRAM):   set WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   retain target "class";
MPRINT(EM_DIAGRAM):   retain TARGETLABEL 'class';
MPRINT(EM_DIAGRAM):   retain dataRole "TRAIN";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Reg_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   set WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   run;
28857      data EM_temp_assessMeta;
MPRINT(EM_DIAGRAM):    data EM_temp_assessMeta;
28858      set EMWS1.Reg_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg_CMeta_TRAIN;
28859      where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST')
28859    ! ;
MPRINT(EM_DIAGRAM):   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION',
'ASSESS', 'COST');
28860      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 8 observations read from the data set EMWS1.REG_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 8 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
28861      data EM_temp_assessdata;
MPRINT(EM_DIAGRAM):    data EM_temp_assessdata;
28862      set EMWS1.Reg_VALIDATE(keep=
28863      F_class
28864      I_class
28865      P_classno_recurrence_events
28866      P_classrecurrence_events
28867      R_classno_recurrence_events
28868      R_classrecurrence_events
28869      U_class
28870      _WARN_
28871      class
28872      );
MPRINT(EM_DIAGRAM):   set EMWS1.Reg_VALIDATE(keep= F_class I_class P_classno_recurrence_events
P_classrecurrence_events R_classno_recurrence_events R_classrecurrence_events U_class _WARN_
class );
28873      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 85 observations read from the data set EMWS1.PART_VALIDATE.
NOTE: There were 85 observations read from the data set EMWS1.REPL_VALIDATE.
NOTE: There were 85 observations read from the data set EMWS1.IMPT_VALIDATE.
NOTE: View EMWS1.REG_VALIDATE.VIEW used (Total process time):
      real time           0.11 seconds
      cpu time            0.10 seconds
 
NOTE: There were 85 observations read from the data set EMWS1.TRANS_VALIDATE.
NOTE: There were 85 observations read from the data set EMWS1.REG_VALIDATE.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 85 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.12 seconds
      cpu time            0.12 seconds
 
 
MPRINT(EM_DIAGRAM):    proc freq data=EM_temp_assessdata noprint;
MPRINT(EM_DIAGRAM):   table I_class*F_class / out = WORK.Reg_0TFGOU3 nocol norow outpct;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Reg_0TFGOU3;
MPRINT(EM_DIAGRAM):   length _TYPE_ $10 DATAROLE TARGET $32 TARGETLABEL $200 FROM INTO $32
CORRECTTEXT $40 ;
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Outcome Type";
MPRINT(EM_DIAGRAM):   label DATAROLE = "Data Role";
MPRINT(EM_DIAGRAM):   label TARGET = "Target Variable";
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   label FROM = "Target";
MPRINT(EM_DIAGRAM):   label INTO = "Outcome";
MPRINT(EM_DIAGRAM):   label PCT_ROW = "Target Percentage";
MPRINT(EM_DIAGRAM):   label PCT_COL = "Outcome Percentage";
MPRINT(EM_DIAGRAM):   label COUNT = "Frequency Count";
MPRINT(EM_DIAGRAM):   label PERCENT = "Total Percentage";
MPRINT(EM_DIAGRAM):   label CORRECTTEXT = "Correct Text";
MPRINT(EM_DIAGRAM):   label CORRECT = "Correct";
MPRINT(EM_DIAGRAM):   set WORK.Reg_0TFGOU3(rename=(F_class=FROM I_class=INTO));
MPRINT(EM_DIAGRAM):   retain _TYPE_ 'PREDICTION' DATAROLE "VALIDATE" TARGET "class";
MPRINT(EM_DIAGRAM):   if upcase(TARGET) eq "CLASS" then TARGETLABEL = 'class';
MPRINT(EM_DIAGRAM):   if FROM eq INTO then do;
MPRINT(EM_DIAGRAM):   CORRECT = 0;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Correct";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   CORRECT = 1;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Incorrect";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS1.Reg_EMCLASSIFICATION;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg_EMCLASSIFICATION WORK.Reg_0TFGOU3;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   set WORK.Reg_0TFGOU3;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT(drop=INTO FROM _TYPE_);
MPRINT(EM_DIAGRAM):   set WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   length MISC $12;
MPRINT(EM_DIAGRAM):   if FROM='RECURRENCE-EVENTS' and INTO='RECURRENCE-EVENTS' then
MISC='TRUEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM='RECURRENCE-EVENTS' and INTO ne 'RECURRENCE-EVENTS' then
MISC='FALSENEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne 'RECURRENCE-EVENTS' and INTO='RECURRENCE-EVENTS' then
MISC='FALSEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne'RECURRENCE-EVENTS' and INTO ne 'RECURRENCE-EVENTS' then
MISC='TRUENEVENT';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.MISCREPORT nothreads;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc summary data=WORK.MISCREPORT NWAY;
MPRINT(EM_DIAGRAM):   output out=WORK.MISCCOUNT(drop=_FREQ_ _TYPE_) SUM=COUNT;
MPRINT(EM_DIAGRAM):   CLASS MISC;
MPRINT(EM_DIAGRAM):   VAR COUNT;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc transpose data=WORK.MISCCOUNT out=WORK.MISCREPORT(drop=_NAME_
_LABEL_);
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   ID MISC;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS1.Reg_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set EMWS1.Reg_EMEVENTREPORT WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   if upcase(TARGET) eq "CLASS" then TARGETLABEL = 'class';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data ASSESS_REPORTMETA;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg_VariableSet;
MPRINT(EM_DIAGRAM):   where REPORT='Y';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emassmt.em_assess.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg_class_DM;
MPRINT(EM_DIAGRAM):   where _TYPE_="TARGET";
MPRINT(EM_DIAGRAM):   call symput('ASSMT_EVENT', strip(event));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):
MPRINT(EM_ASSESS):   data _ea_tmpdata;
MPRINT(EM_ASSESS):   set EM_temp_assessdata;
MPRINT(EM_ASSESS):   _tmpfreqvar_=1;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_CHECKEMSETINIT):   DATA _NULL_;
MPRINT(EM_CHECKEMSETINIT):   EM_SETINIT = 'N';
MPRINT(EM_CHECKEMSETINIT):   IF SYSPROD('PRODNUM50') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM448') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM102') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM103') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   CALL SYMPUT('EM_SETINIT', EM_SETINIT);
MPRINT(EM_CHECKEMSETINIT):   RUN;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Reading in reporting data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET ASSESS_REPORTMETA END = EOF;
MPRINT(EM_ASSESS):   IF TYPE = "C" OR UPCASE (LEVEL) IN ("NOMINAL", "BINARY" , "ORDINAL") THEN
DO;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) NE UPCASE ("F_class") THEN DO;
MPRINT(EM_ASSESS):   NUMCTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTC" || LEFT (PUT (NUMCTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "C");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE(NAME) NE UPCASE ("F_class") THEN DO;
MPRINT(EM_ASSESS):   NUMNTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTN" || LEFT (PUT (NUMNTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMNTOREPORT", NUMNTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMCTOREPORT", NUMCTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMTOREPORT", SUM (NUMNTOREPORT, NUMCTOREPORT));
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   PROC DMDB DATA = _ea_tmpdata VAROUT = VAROUT DMDBCAT = _D CLASSOUT =
_ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   CLASS F_class ;
 
MPRINT(EM_ASSESS):   VAR P_classrecurrence_events _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_;
MPRINT(EM_ASSESS):   RUN ;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   PROC SORT DATA = _ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _auxeventname (keep = __event__) ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ...FLAG0_1 = ..... TARGET IS 0, 1 & EVENT = 1;
 
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   length __event__ $ 32;
MPRINT(EM_ASSESS):   RETAIN FLAG0_1 1 NUM1 . NUM0 . __event__ "_missing_" ;
 
MPRINT(EM_ASSESS):   SET _ASSMT_CLASSOUT END = EOF;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ....... LEVEL = BINARY OR NOMINAL OR ORDINAL;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   IF UPCASE(NAME) = UPCASE ("F_class") THEN DO;
MPRINT(EM_ASSESS):   CUMFREQ + FREQUENCY;
MPRINT(EM_ASSESS):   IF LEVEL NE "." THEN DO;
MPRINT(EM_ASSESS):   N1 + 1;
MPRINT(EM_ASSESS):   IF (NRAW NE 0 AND NRAW NE 1) OR TYPE NE "N" OR "" > " " THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ......................... IF EVENT NE BLANK;
MPRINT(EM_ASSESS):   * ....................LEVEL IS CHAR VAR ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   IF UPCASE("RECURRENCE-EVENTS") = UPCASE(LEVEL) THEN DO;
MPRINT(EM_ASSESS):   NUM1 = FREQUENCY;
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", CRAW );
MPRINT(EM_ASSESS):   __event__ = craw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   ELSE do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", NRAW );
MPRINT(EM_ASSESS):   __event__ = nraw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF LAST.NAME THEN DO;
 
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * .............. IN NOMINAL CASE, NEED TO GROUP ALL '0' ;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   NUM0 = SUM (CUMFREQ, - NUM1);
MPRINT(EM_ASSESS):   IF NUM0 < 0 THEN NUM0 = 0;
MPRINT(EM_ASSESS):   IF NUM1 = . THEN NUM1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM0", NUM0 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM1", NUM1);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM1", NUM1 / CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM0", (CUMFREQ - NUM1) / CUMFREQ);
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN DO;
MPRINT(EM_ASSESS):   FLAG0_1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "C" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF "" = " " THEN DO;
MPRINT(EM_ASSESS):   IF "RECURRENCE-EVENTS" NE "1" THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "N" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ................... IF TYPE = N;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("FLAG0_1", FLAG0_1 );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................IF LAST.NAME ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ...............IF LEVEL NE '.' ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * .............. IF NAME = TARGET;
MPRINT(EM_ASSESS):   ELSE IF "" > " " AND UPCASE(NAME) = UPCASE("") THEN DO;
MPRINT(EM_ASSESS):   NUMDECISIONS + 1;
MPRINT(EM_ASSESS):   LEVEL = TRANSLATE (LEVEL, "_", "'", "_", '"');
MPRINT(EM_ASSESS):   CALL SYMPUTX ("D_LABEL" || LEFT (PUT (NUMDECISIONS, 3.)), LEVEL );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................... ELSE IF UPCASE;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   output _auxeventname;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMOBS", CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMDECISIONS", NUMDECISIONS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET VAROUT END = EOF;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) = UPCASE ("P_classrecurrence_events") THEN DO;
MPRINT(EM_ASSESS):   IF N = 0 THEN DO;
MPRINT(EM_ASSESS):   PUT //// "          Warning: All posterior probabilities are missing
values ";
MPRINT(EM_ASSESS):   PUT ///;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("ALLMISS", 1);
MPRINT(EM_ASSESS):   STOP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("ALLMISS", 0);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB", MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB", MAX);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("DIFF", MAX - MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NMISSPROB", NMISS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF UPCASE (NAME) = UPCASE ("_tmpfreqvar_") THEN DO;
MPRINT(EM_ASSESS):   AUXMIN = MIN - INT (MIN);
MPRINT(EM_ASSESS):   AUXMAX = MAX - INT (MAX);
MPRINT(EM_ASSESS):   IF AUXMIN > 0 OR AUXMAX > 0 THEN CALL SYMPUTX ("USEWEIGHT", "Y");
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("USEWEIGHT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _ANY0;
MPRINT(EM_ASSESS):   SET _ea_tmpdata (KEEP = F_class P_classrecurrence_events _tmpfreqvar_ );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................... No Formats;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF LEFT ( F_class ) = "RECURRENCE-EVENTS" THEN NTARGET = 1;
MPRINT(EM_ASSESS):   ELSE NTARGET = 0;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Before proc summary of binary case;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC SUMMARY DATA = _ANY0 (KEEP = P_classrecurrence_events NTARGET
_tmpfreqvar_ WHERE = (NTARGET > . )) NWAY MISSING;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   CLASS P_classrecurrence_events ;
MPRINT(EM_ASSESS):   VAR NTARGET ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   OUTPUT OUT = ANYSUM (DROP = _TYPE_) MEAN = _MEANTARGET _MEANFREQVAR ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... Main Data Set Processing, Binary case;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK (KEEP = BASECAPC BASECAP __EVENT__ BASEEVENTS
BASEGAIN BASELIFT BASERESP BASERESPC BESTCAP BESTCAPC BESTGAIN BESTLIFT BESTLIFTC
BESTNUMEVENTS BESTRESP BESTRESPC BIN CBASELIFT C_LIFT C_P_CAPT_RESP C_P_RESP GAIN LIFT MAXPROB
MINPROB MNPROB NUMNONRESP NUMOBS NUMRESP PERCENTILE P_CAPT_RESP P_RESP ) WORK._TEMPSCOREDIST
(KEEP = BIN LOWERPROB UPPERPROB EVENTVALUE SCR_NUMEVENTS MODELSCORE SCR_NUMNONEVENTS RANGE
NUMOBSINGROUP PERCOBSINGROUP C_PERCOBSINGROUP SCR_P_EVENTS SCR_CP_EVENTS SCR_P_NONEVENTS
SCR_CP_NONEVENTS SCR_MNPROB SCR_MINPROB SCR_MAXPROB ) ;
 
MPRINT(EM_ASSESS):   SET ANYSUM END = EOF;
 
MPRINT(EM_ASSESS):   IF _N_ = 1 THEN SET _AUXEVENTNAME;
 
MPRINT(EM_ASSESS):   RETAIN MINPROB1 - MINPROB20 1 MAXPROB1 - MAXPROB20 0 MNPROB1 - MNPROB20 0
NUMOBS1 - NUMOBS20 0 NUMRESP1 - NUMRESP20 0 TRUEPOS1 - TRUEPOS100 0 TRUENEG1 - TRUENEG100 0
FALSEPOS1 - FALSEPOS100 0 FALSENEG1 - FALSENEG100 0 EVENTS1 - EVENTS100 NONEVENTS1 -
NONEVENTS100 0 FIRSTIN1 - FIRSTIN100 . LASTIN1 - LASTIN100 . RESPRATE 0.3058823529 _NEVENTS 26
_NNONEVENTS 59 TARGET "NTARGET" ;
MPRINT(EM_ASSESS):   ARRAY MINPROBS (20) MINPROB1 - MINPROB20;
MPRINT(EM_ASSESS):   ARRAY MAXPROBS (20) MAXPROB1 - MAXPROB20;
MPRINT(EM_ASSESS):   ARRAY MNPROBS (20) MNPROB1 - MNPROB20;
MPRINT(EM_ASSESS):   ARRAY NUMOBSS (20) NUMOBS1 - NUMOBS20;
MPRINT(EM_ASSESS):   ARRAY NUMRESPS (20) NUMRESP1 - NUMRESP20;
MPRINT(EM_ASSESS):   ARRAY TRUEPOSX (100) TRUEPOS1 - TRUEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSEPOSX (100) FALSEPOS1 - FALSEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSENEGX (100) FALSENEG1 - FALSENEG100;
MPRINT(EM_ASSESS):   ARRAY TRUENEGX (100) TRUENEG1 - TRUENEG100;
MPRINT(EM_ASSESS):   ARRAY _EVENTS (100) EVENTS1 - EVENTS100;
MPRINT(EM_ASSESS):   ARRAY NONEVENTS (100) NONEVENTS1 - NONEVENTS100;
MPRINT(EM_ASSESS):   ARRAY FIRSTIN (100) FIRSTIN1 - FIRSTIN100;
MPRINT(EM_ASSESS):   ARRAY LASTIN (100) LASTIN1 - LASTIN100;
MPRINT(EM_ASSESS):   RETAIN SCR_MNPROB1 - SCR_MNPROB100 0 SCR_MINPROB1 - SCR_MINPROB100 1
SCR_MAXPROB1 - SCR_MAXPROB100 0;
MPRINT(EM_ASSESS):   ARRAY SCR_MNPROBS (100) SCR_MNPROB1 - SCR_MNPROB100;
MPRINT(EM_ASSESS):   ARRAY SCR_MINPROBS (100) SCR_MINPROB1 - SCR_MINPROB100;
MPRINT(EM_ASSESS):   ARRAY SCR_MAXPROBS (100) SCR_MAXPROB1 - SCR_MAXPROB100;
MPRINT(EM_ASSESS):   DROP SCR_MINPROB1 - SCR_MINPROB100 SCR_MAXPROB1 - SCR_MAXPROB100
SCR_MNPROB1 - SCR_MNPROB100 ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...... Area For 8 Financials ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF _MEANTARGET = . THEN _MEANTARGET = RESPRATE;
MPRINT(EM_ASSESS):   DROP N1 _K SUMWEIGHTS ;
MPRINT(EM_ASSESS):   SUMWEIGHTS = 1;
 
MPRINT(EM_ASSESS):   DO _K = 1 TO CEIL (_FREQ_);
MPRINT(EM_ASSESS):   IF _K = CEIL (_FREQ_) THEN DO;
MPRINT(EM_ASSESS):   IF _FREQ_ < CEIL (_FREQ_) THEN _WEIGHT = _FREQ_ - FLOOR (_FREQ_);
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   N1 + _WEIGHT;
MPRINT(EM_ASSESS):   NTARGET = _MEANTARGET ;
MPRINT(EM_ASSESS):   DECILE = MIN (20, CEIL (N1 * 20 / 85));
MPRINT(EM_ASSESS):   MINPROBS ( DECILE) = MIN (MINPROBS ( DECILE), P_classrecurrence_events );
MPRINT(EM_ASSESS):   MAXPROBS ( DECILE) = MAX (MAXPROBS ( DECILE), P_classrecurrence_events );
MPRINT(EM_ASSESS):   MNPROBS ( DECILE) = SUM (MNPROBS ( DECILE), P_classrecurrence_events *
_WEIGHT);
MPRINT(EM_ASSESS):   NUMOBSS ( DECILE) = NUMOBSS ( DECILE) + _WEIGHT;
MPRINT(EM_ASSESS):   NUMRESPS ( DECILE) = NUMRESPS ( DECILE) + _MEANTARGET * _WEIGHT;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ outside of do loop, Area for final ROC;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   RANKDELTA = (ROUND ( _FREQ_ ) + 1) / 2;
MPRINT(EM_ASSESS):   RANK = UNTIEDRANK + RANKDELTA;
MPRINT(EM_ASSESS):   DROP RANK ;
MPRINT(EM_ASSESS):   SUMRANK1 + RANK * ROUND (_MEANTARGET * _FREQ_, .0000001);
MPRINT(EM_ASSESS):   UNTIEDRANK + ROUND (_FREQ_, .00000001);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Area For ROC Curve;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DO _K = 1 TO 100;
MPRINT(EM_ASSESS):   IF P_classrecurrence_events * 100 >= _K THEN DO;
MPRINT(EM_ASSESS):   TRUEPOSX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   FALSEPOSX ( _K ) + _FREQ_ * (1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   TRUENEGX ( _K ) + _FREQ_ * ( 1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   FALSENEGX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SLOT = MIN (MAX (CEIL (P_classrecurrence_events * 100), 1), 100) ;
MPRINT(EM_ASSESS):   DROP SLOT;
MPRINT(EM_ASSESS):   FIRSTIN ( SLOT ) = MIN ( FIRSTIN ( SLOT ), P_classrecurrence_events);
MPRINT(EM_ASSESS):   LASTIN ( SLOT ) = MAX ( LASTIN ( SLOT ), P_classrecurrence_events);
MPRINT(EM_ASSESS):   _EVENTS ( SLOT) = _EVENTS ( SLOT) + _FREQ_ * _MEANTARGET;
MPRINT(EM_ASSESS):   NONEVENTS ( SLOT) = NONEVENTS ( SLOT) + _FREQ_ * (1 - _MEANTARGET);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ START OF OUTDIST IN BINARY CASE MAIN DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   SCR_MNPROBS ( SLOT ) = SUM (SCR_MNPROBS (SLOT), P_classrecurrence_events
* _FREQ_ );
MPRINT(EM_ASSESS):   SCR_MINPROBS ( SLOT ) = MIN (SCR_MINPROBS (SLOT),
P_classrecurrence_events );
MPRINT(EM_ASSESS):   SCR_MAXPROBS ( SLOT ) = MAX (SCR_MAXPROBS (SLOT),
P_classrecurrence_events );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ End of Outdist in Binary case main DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   PUT //;
MPRINT(EM_ASSESS):   DO K = 1 TO 20;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LENGTH EVENTVALUE $ 32;
MPRINT(EM_ASSESS):   RETAIN EVENTVALUE "RECURRENCE-EVENTS" ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ......... Start of EOF area of BINARY processing of main data set ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SUMRANK1", SUMRANK1);
MPRINT(EM_ASSESS):   LENGTH DATAROLE $ 10;
MPRINT(EM_ASSESS):   RETAIN DATAROLE "VALIDATE" ;
MPRINT(EM_ASSESS):   RETAIN OVLMIN 6.2820271766825E-14 OVLMAX 0.950694224 ;
MPRINT(EM_ASSESS):   DROP OVLMIN OVLMAX ;
MPRINT(EM_ASSESS):   C_NUMOBS = 0;
MPRINT(EM_ASSESS):   C_NUM_RESP = 0;
MPRINT(EM_ASSESS):   C_NUM_NONRESP = 0;
MPRINT(EM_ASSESS):   C_P_RESP = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   PREVIOUSPROFIT = 0;
MPRINT(EM_ASSESS):   MAXPROFIT = 0;
MPRINT(EM_ASSESS):   _KS_BIN_ = 0;
MPRINT(EM_ASSESS):   DROP _KS_BIN_;
MPRINT(EM_ASSESS):   AVGNUMRESP = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASERESP = 100 * RESPRATE;
MPRINT(EM_ASSESS):   BASERESPC = BASERESP;
MPRINT(EM_ASSESS):   BASECAP = 100 / 20;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................Start OF Gainschart = Outranks Area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = 0;
MPRINT(EM_ASSESS):   DO GROUP = 20 TO 1 BY -1;
 
MPRINT(EM_ASSESS):   BASECAPC + BASECAP;
MPRINT(EM_ASSESS):   PERCENTILE = GROUP * (100 / 20);
MPRINT(EM_ASSESS):   MINPROB = MINPROBS ( GROUP);
MPRINT(EM_ASSESS):   MAXPROB = MAXPROBS ( GROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB" || LEFT ( PUT (GROUP, 3.)), MINPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB" || LEFT ( PUT (GROUP, 3.)), MAXPROB);
MPRINT(EM_ASSESS):   NUMOBS = NUMOBSS ( GROUP);
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN MNPROB = MNPROBS ( GROUP) / NUMOBS;
MPRINT(EM_ASSESS):   ELSE MNPROB = .;
MPRINT(EM_ASSESS):   C_NUMOBS = SUM (NUMOBS, C_NUMOBS);
MPRINT(EM_ASSESS):   NUMRESP = NUMRESPS ( GROUP);
MPRINT(EM_ASSESS):   NUMNONRESP = NUMOBS - NUMRESP;
MPRINT(EM_ASSESS):   C_AVGNUM_RESP + AVGNUMRESP;
MPRINT(EM_ASSESS):   IF C_NUMOBS <= _NEVENTS THEN DO;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   BESTCAPC = C_NUMOBS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   BASEEVENTS = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASENONEVENTS = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   FLAG + 1;
MPRINT(EM_ASSESS):   DROP FLAG;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = _NEVENTS - C_NUMOBS + NUMOBS;
MPRINT(EM_ASSESS):   IF FLAG > 1 THEN BESTNUMEVENTS = 0;
MPRINT(EM_ASSESS):   BESTCAPC = 100;
MPRINT(EM_ASSESS):   IF C_NUMOBS - _NEVENTS <= NUMOBS THEN DO;
MPRINT(EM_ASSESS):   BASEEVENTS = C_NUMOBS - _NEVENTS;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS - C_NUMOBS + _NEVENTS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BASEEVENTS = 0;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   BESTCAP = BESTNUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   IF C_NUMOBS <= _NEVENTS THEN DO;
MPRINT(EM_ASSESS):   BESTLIFT = ((_NEVENTS+_NNONEVENTS) / 20) /AVGNUMRESP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTLIFT = BESTNUMEVENTS / AVGNUMRESP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   C_BESTNUMEVENTS + BESTNUMEVENTS;
MPRINT(EM_ASSESS):   DROP C_BESTNUMEVENTS;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN BESTLIFTC = C_BESTNUMEVENTS / (_NEVENTS / 85 *
C_NUMOBS);
MPRINT(EM_ASSESS):   ELSE BESTLIFTC = .;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESP = BESTNUMEVENTS * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_RESP = NUMRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_NONRESP = NUMNONRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESP = .;
MPRINT(EM_ASSESS):   P_RESP = .;
MPRINT(EM_ASSESS):   P_NONRESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESPC = C_BESTNUMEVENTS * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   BESTGAIN = MAX (0, ((C_BESTNUMEVENTS / C_NUMOBS ) / ( AVGNUMRESP /
(85/20)) - 1) * 100);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESPC = .;
MPRINT(EM_ASSESS):   BESTGAIN = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMNONRESP > 0 THEN ODDS = NUMRESP / NUMNONRESP;
MPRINT(EM_ASSESS):   ELSE ODDS = .;
MPRINT(EM_ASSESS):   C_NUM_RESP = SUM (C_NUM_RESP , NUMRESP );
MPRINT(EM_ASSESS):   C_NUM_NONRESP = SUM (C_NUM_NONRESP, NUMNONRESP );
MPRINT(EM_ASSESS):   IF C_NUM_NONRESP > 0 THEN C_ODDS = C_NUM_RESP / C_NUM_NONRESP;
MPRINT(EM_ASSESS):   ELSE C_ODDS = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   C_P_RESP = C_NUM_RESP * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   GAIN = ABS(100 * (((C_NUM_RESP / C_NUMOBS ) / (_NEVENTS / 85)) - 1));
MPRINT(EM_ASSESS):   BASEGAIN = 100 * (( (C_AVGNUM_RESP /((20-GROUP+1)* 85/20) ) / (
AVGNUMRESP / (85/20))) - 1);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   GAIN = .;
MPRINT(EM_ASSESS):   BASEGAIN = .;
MPRINT(EM_ASSESS):   C_P_RESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF BASEGAIN <= 0 THEN BASEGAIN = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = NUMRESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   P_CAPT_NONRESP = NUMNONRESP * 100 / ( 85 - _NEVENTS);
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = C_NUM_RESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   C_P_CAPT_NONRESP = C_NUM_NONRESP * 100 / ( 85 - _NEVENTS);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Area For Binned KS in Outranks area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _DIFFERENCE = C_P_CAPT_RESP - C_P_CAPT_NONRESP ;
MPRINT(EM_ASSESS):   IF _KS_BIN_ < _DIFFERENCE THEN DO;
MPRINT(EM_ASSESS):   _KS_BIN_ = _DIFFERENCE;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = MINPROB + (MAXPROB - MINPROB) / 2 ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LIFT = P_RESP * .01 / RESPRATE ;
MPRINT(EM_ASSESS):   C_LIFT = C_P_RESP * .01 / RESPRATE;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BASELIFT = AVGNUMRESP / ( RESPRATE * 85/20 );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE BASELIFT = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN CBASELIFT = C_AVGNUM_RESP / (RESPRATE *
((20-GROUP+1)* 85/20));
MPRINT(EM_ASSESS):   ELSE CBASELIFT = .;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ WITHIN DO LOOP FOR OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 + 1 - GROUP;
MPRINT(EM_ASSESS):   PERCENTILE = BIN * (100 / 20);
MPRINT(EM_ASSESS):   B_C_P_RESP = PERCENTILE;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPRANK ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................ END OF GAINSCHART = OUTRANKS AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFITGROUP" , MAXPROFITGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFIT" , MAXPROFIT );
MPRINT(EM_ASSESS):   KS_ABSDIFF = 0 ;
MPRINT(EM_ASSESS):   MINPRECTPR = 9999;
MPRINT(EM_ASSESS):   Y0 = 1 - RESPRATE;
MPRINT(EM_ASSESS):   Y1 = RESPRATE;
MPRINT(EM_ASSESS):   MAXMUTUAL = 0;
MPRINT(EM_ASSESS):   DROP MAXMUTUAL KSPROB Y0 Y1 KS_ABSDIFF MINPRECTPR;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .....................About to start Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................... Finished Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Outdist ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS96 - EVENTS100 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS96 - NONEVENTS100);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB96 -
SCR_MNPROB100) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB96 - SCR_MINPROB100) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB96 - SCR_MAXPROB100) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 85;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 20;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 19 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS91 - EVENTS95 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS91 - NONEVENTS95);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB91 -
SCR_MNPROB95) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB91 - SCR_MINPROB95) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB91 - SCR_MAXPROB95) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 85;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 19;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 18 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS86 - EVENTS90 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS86 - NONEVENTS90);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB86 -
SCR_MNPROB90) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB86 - SCR_MINPROB90) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB86 - SCR_MAXPROB90) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 85;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 18;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 17 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS81 - EVENTS85 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS81 - NONEVENTS85);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB81 -
SCR_MNPROB85) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB81 - SCR_MINPROB85) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB81 - SCR_MAXPROB85) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 85;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 17;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 16 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS76 - EVENTS80 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS76 - NONEVENTS80);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB76 -
SCR_MNPROB80) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB76 - SCR_MINPROB80) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB76 - SCR_MAXPROB80) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 85;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 16;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 15 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS71 - EVENTS75 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS71 - NONEVENTS75);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB71 -
SCR_MNPROB75) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB71 - SCR_MINPROB75) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB71 - SCR_MAXPROB75) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 85;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 15;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 14 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS66 - EVENTS70 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS66 - NONEVENTS70);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB66 -
SCR_MNPROB70) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB66 - SCR_MINPROB70) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB66 - SCR_MAXPROB70) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 85;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 14;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 13 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS61 - EVENTS65 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS61 - NONEVENTS65);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB61 -
SCR_MNPROB65) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB61 - SCR_MINPROB65) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB61 - SCR_MAXPROB65) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 85;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 13;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 12 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS56 - EVENTS60 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS56 - NONEVENTS60);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB56 -
SCR_MNPROB60) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB56 - SCR_MINPROB60) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB56 - SCR_MAXPROB60) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 85;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 12;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 11 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS51 - EVENTS55 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS51 - NONEVENTS55);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB51 -
SCR_MNPROB55) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB51 - SCR_MINPROB55) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB51 - SCR_MAXPROB55) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 85;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 11;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 10 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS46 - EVENTS50 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS46 - NONEVENTS50);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB46 -
SCR_MNPROB50) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB46 - SCR_MINPROB50) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB46 - SCR_MAXPROB50) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 85;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 10;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 9 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS41 - EVENTS45 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS41 - NONEVENTS45);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB41 -
SCR_MNPROB45) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB41 - SCR_MINPROB45) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB41 - SCR_MAXPROB45) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 85;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 9;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 8 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS36 - EVENTS40 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS36 - NONEVENTS40);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB36 -
SCR_MNPROB40) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB36 - SCR_MINPROB40) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB36 - SCR_MAXPROB40) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 85;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 8;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 7 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS31 - EVENTS35 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS31 - NONEVENTS35);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB31 -
SCR_MNPROB35) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB31 - SCR_MINPROB35) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB31 - SCR_MAXPROB35) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 85;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 7;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 6 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS26 - EVENTS30 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS26 - NONEVENTS30);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB26 -
SCR_MNPROB30) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB26 - SCR_MINPROB30) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB26 - SCR_MAXPROB30) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 85;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 6;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 5 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS21 - EVENTS25 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS21 - NONEVENTS25);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB21 -
SCR_MNPROB25) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB21 - SCR_MINPROB25) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB21 - SCR_MAXPROB25) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 85;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 5;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 4 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS16 - EVENTS20 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS16 - NONEVENTS20);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB16 -
SCR_MNPROB20) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB16 - SCR_MINPROB20) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB16 - SCR_MAXPROB20) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 85;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 4;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 3 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS11 - EVENTS15 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS11 - NONEVENTS15);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB11 -
SCR_MNPROB15) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB11 - SCR_MINPROB15) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB11 - SCR_MAXPROB15) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 85;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 3;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 2 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS6 - EVENTS10 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS6 - NONEVENTS10);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB6 -
SCR_MNPROB10) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB6 - SCR_MINPROB10) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB6 - SCR_MAXPROB10) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 85;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 2;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 1 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS1 - EVENTS5 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS1 - NONEVENTS5);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB1 - SCR_MNPROB5)
/ NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB1 - SCR_MINPROB5) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB1 - SCR_MAXPROB5) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 85;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 1;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSPROB" , PUT (KSPROB, 5.3 ) );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_PROB" , _KS_BIN_PROB );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_" , _KS_BIN_ / 100 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSDIFF" , KS_ABSDIFF );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PRECTPR" , PRECTPR );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXMUTUALPROB" , MAXMUTUALPROB);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LABEL __EVENT__ = "Event" DECILE = "Depth" BIN = "Bin" NUMOBS = "Number
of Observations" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * RUN for large data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST;
MPRINT(EM_ASSESS):   DELETE _AUXEVENTNAME;
MPRINT(EM_ASSESS):   QUIT;
 
MPRINT(EM_ASSESS):   OPTION NOCENTER LS = 95;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Report Vars Area.;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start OF Outdist Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPSCOREDIST;
MPRINT(EM_ASSESS):   RENAME MODELSCORE = SCORE UPPERPROB = UPPOSTERIOR SCR_CP_EVENTS =
CUMULATIVEPERCENTAGEOFEVENTS SCR_CP_NONEVENTS = CUMULATIVEPERCENTAGEOFNONEVENTS EVENTVALUE =
EVENT LOWERPROB = LOWPOSTERIOR NUMOBSINGROUP = N PERCOBSINGROUP = PERCENTAGE SCR_MINPROB =
_MINP_ SCR_MAXPROB = _MAXP_ SCR_MNPROB = _MEANP_ RANGE = P_LABEL C_PERCOBSINGROUP =
CUMULATIVEPERCENTAGE SCR_NUMEVENTS = NUMBEROFEVENTS SCR_NUMNONEVENTS = NUMBEROFNONEVENTS
SCR_P_EVENTS = PERCENTAGEOFEVENTS SCR_P_NONEVENTS = PERCENTAGEOFNONEVENTS ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... OUTDIST MODIFICATION LABEL AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL BIN = "Bin" N = "Number of Observations" P_LABEL = "Posterior
Probability Range" EVENT = "Event" LOWPOSTERIOR = "Lower Bound Posterior Probability"
PERCENTAGEOFEVENTS = "Percentage of Events" CUMULATIVEPERCENTAGEOFNONEVENTS = "Cumulative
Percentage of Nonevents" CUMULATIVEPERCENTAGE = "Cumulative Percentage" PERCENTAGEOFEVENTS =
"Percentage of Events" PERCENTAGEOFNONEVENTS = "Percentage of Nonevents"
CUMULATIVEPERCENTAGEOFEVENTS = "Cumulative Percentage of Events" UPPOSTERIOR = "Upper Bound
Posterior Probability" NUMBEROFEVENTS = "Number of Events" PERCENTAGE = "Percentage"
NUMBEROFNONEVENTS = "Number of Nonevents" _MEANP_ = "Mean Posterior Probability" _MINP_ = "Min
Posterior Probability" _MAXP_ = "Max Posterior Probability" SCORE = "Model Score" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   SET WORK._TEMPSCOREDIST (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........... END OF OUTDIST MODIFICATION;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start of OUTRANKS Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPRANK;
MPRINT(EM_ASSESS):   RENAME __EVENT__ = EVENT P_RESP = RESP C_P_CAPT_RESP = CAPC P_CAPT_RESP =
CAP NUMNONRESP = NUMNEVENT NUMRESP = NUMEVENT BASEEVENTS = BASENUMBEROFEVENTS BESTNUMEVENTS =
BESTNUMBEROFEVENTS MAXPROB = _MAXP_ MINPROB = _MINP_ CBASELIFT = BASELIFTC C_LIFT = LIFTC
MNPROB = _MEANP_ PERCENTILE = DECILE NUMOBS = N NUMEVENT = NUMBEROFEVENTS C_P_RESP = RESPC ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................. OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL _MAXP_ = "Max Posterior Probability" _MINP_ = "Min Posterior
Probability" _MEANP_ = "Mean Posterior Probability" BASECAP = "Baseline % Captured Response"
BASECAPC = "Baseline Cumulative % Captured Response" BASENUMBEROFEVENTS = "Baseline Number of
Events" BASEGAIN = "Baseline Gain" BASELIFT = "Baseline Lift" BASELIFTC = "Baseline Cumulative
Lift" BASERESP = "Baseline % Response" BASERESPC = "Baseline Cumulative % Response" BASELIFTC
= "Baseline Cumulative Lift" BESTCAP = "Best % Captured Response" BESTCAPC = "Best Cumulative
% Captured Response" BESTGAIN = "Best Gain" BESTRESP = "Best % Response" BESTRESPC = "Best
Cumulative % Response" BESTLIFT = "Best Lift" BESTLIFTC = "Best Cumulative Lift"
BESTNUMBEROFEVENTS = "Best Number of Events" CAP = "% Captured Response" CAPC = "Cumulative %
Captured Response" DECILE = "Depth" GAIN = "Gain" LIFT = "Lift" LIFTC = "Cumulative Lift"
NUMNEVENT = "Number of Nonevents" N = "Number of Observations" EVENT = "Event" RESPC =
"Cumulative % Response" NUMBEROFEVENTS = "Number of Events" RESP = "% Response" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK;
MPRINT(EM_ASSESS):   SET WORK._TEMPRANK (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   proc datasets lib=work nolist;
MPRINT(EM_ASSESS):   delete _ea_tmpdata;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_ASSESS):   quit;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   OPTION ERRORS = 20;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    data WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   retain target "class";
MPRINT(EM_DIAGRAM):   retain TARGETLABEL 'class';
MPRINT(EM_DIAGRAM):   retain dataRole "VALIDATE";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Reg_EMRANK;
MPRINT(EM_DIAGRAM):   length target $32;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   length dataRole $20;
MPRINT(EM_DIAGRAM):   length EVENT $32;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg_EMRANK WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   retain target "class";
MPRINT(EM_DIAGRAM):   retain TARGETLABEL 'class';
MPRINT(EM_DIAGRAM):   retain dataRole "VALIDATE";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Reg_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   length target $32;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   length dataRole $20;
MPRINT(EM_DIAGRAM):   length EVENT $32;
MPRINT(EM_DIAGRAM):   length P_LABEL $9;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg_EMSCOREDIST WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   run;
33167      %let _cn = %sysfunc(getoption(CENTER));
33168      options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
33169      proc print data=EMWS1.Reg_EMREPORTFIT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.Reg_EMREPORTFIT noobs label;
33170      var STAT LABEL TRAIN
33171      VALIDATE
33172      TEST
33173      ;
MPRINT(EM_DIAGRAM):   var STAT LABEL TRAIN VALIDATE TEST ;
33174      by TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by TARGET TARGETLABEL;
33175      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
33176      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Fit Statistics";
MPRINT(EM_DIAGRAM):   run;
33177      run;
 
NOTE: There were 20 observations read from the data set EMWS1.REG_EMREPORTFIT.
NOTE: The PROCEDURE PRINT printed page 6.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
33178      title10;
MPRINT(EM_DIAGRAM):   title10;
33179      options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
33180      proc sort data=EMWS1.Reg_EMCLASSIFICATION nothreads;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.Reg_EMCLASSIFICATION nothreads;
33181      by DATAROLE TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET TARGETLABEL;
33182      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 8 observations read from the data set EMWS1.REG_EMCLASSIFICATION.
NOTE: The data set EMWS1.REG_EMCLASSIFICATION has 8 observations and 12 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
33183      %let _cn = %sysfunc(getoption(CENTER));
33184      options nocenter;
MPRINT(EM_DIAGRAM):   options nocenter;
33185      proc print data=EMWS1.Reg_EMCLASSIFICATION noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.Reg_EMCLASSIFICATION noobs label;
33186      var from into pct_row pct_col count percent
33187      ;
MPRINT(EM_DIAGRAM):   var from into pct_row pct_col count percent ;
33188      by DATAROLE TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET TARGETLABEL;
33189      label FROM = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,     NOQUOTE))";
MPRINT(EM_DIAGRAM):   label FROM = "Target";
33190      label INTO = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcome_vlabel ,    NOQUOTE))";
MPRINT(EM_DIAGRAM):   label INTO = "Outcome";
33191      label PCT_ROW = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetpct_vlabel ,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PCT_ROW = "Target Percentage";
33192      label PCT_COL = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcomepct_vlabel , NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PCT_COL = "Outcome Percentage";
33193      label COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel ,      NOQUOTE))";
MPRINT(EM_DIAGRAM):   label COUNT = "Frequency Count";
33194      label PERCENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_totalpct_vlabel ,   NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PERCENT = "Total Percentage";
33195      where _TYPE_='PREDICTION';
MPRINT(EM_DIAGRAM):   where _TYPE_='PREDICTION';
33196      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
33197      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_classification_title    , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Classification Table";
MPRINT(EM_DIAGRAM):   run;
33198      run;
 
NOTE: There were 8 observations read from the data set EMWS1.REG_EMCLASSIFICATION.
      WHERE _TYPE_='PREDICTION';
NOTE: The PROCEDURE PRINT printed page 7.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
 
 
33199      title9;
MPRINT(EM_DIAGRAM):   title9;
33200      title10;
MPRINT(EM_DIAGRAM):   title10;
33201      options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
33202      %let _cn = %sysfunc(getoption(CENTER));
33203      options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
33204      data EMWS1.Reg_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   data EMWS1.Reg_EMEVENTREPORT;
33205      length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT FALSEEVENT
33205    ! TRUEEVENT 8;
MPRINT(EM_DIAGRAM):   length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT
FALSEEVENT TRUEEVENT 8;
33206      label DATAROLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))"
33206    !  TARGET = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,      NOQUOTE))"
33206    ! TARGETLABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))"
33206    ! FALSEEVENT
33207      = "%sysfunc(sasmsg(sashelp.dmine, rpt_falseevent_vlabel ,  NOQUOTE))" FALSENEVENT =
33207    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_falsenevent_vlabel , NOQUOTE))" TRUEEVENT =
33207    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_trueevent_vlabel ,   NOQUOTE))" TRUENEVENT =
33208         "%sysfunc(sasmsg(sashelp.dmine, rpt_truenevent_vlabel ,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label DATAROLE = "Data Role" TARGET = "Target" TARGETLABEL = "Target
Label" FALSEEVENT = "False Positive" FALSENEVENT = "False Negative" TRUEEVENT = "True
Positive" TRUENEVENT = "True Negative";
33209      FALSEEVENT=0;
MPRINT(EM_DIAGRAM):   FALSEEVENT=0;
33210      FALSENEVENT=0;
MPRINT(EM_DIAGRAM):   FALSENEVENT=0;
33211      TRUEEVENT=0;
MPRINT(EM_DIAGRAM):   TRUEEVENT=0;
33212      TRUENEVENT=0;
MPRINT(EM_DIAGRAM):   TRUENEVENT=0;
33213      set EMWS1.Reg_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg_EMEVENTREPORT;
33214      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2 observations read from the data set EMWS1.REG_EMEVENTREPORT.
NOTE: The data set EMWS1.REG_EMEVENTREPORT has 2 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.03 seconds
 
 
33215      proc print data=EMWS1.Reg_EMEVENTREPORT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.Reg_EMEVENTREPORT noobs label;
33216      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
33217      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_eventtable_title    , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Event Classification Table";
MPRINT(EM_DIAGRAM):   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL;
MPRINT(EM_DIAGRAM):   run;
33218      by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL;
33219      run;
 
NOTE: There were 2 observations read from the data set EMWS1.REG_EMEVENTREPORT.
NOTE: The PROCEDURE PRINT printed page 8.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
33220      title10;
MPRINT(EM_DIAGRAM):   title10;
33221      options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
33222      proc datasets library=EMWS1 nolist;
MPRINT(EM_DIAGRAM):    proc datasets library=EMWS1 nolist;
33223      modify Reg_EMRANK;
MPRINT(EM_DIAGRAM):   modify Reg_EMRANK;
MPRINT(EM_DIAGRAM):   label target = "Target Variable";
33224      label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,   NOQUOTE))";
MPRINT(EM_DIAGRAM):   label datarole = "Data Role";
33225      label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))"
33225    ! ;
MPRINT(EM_DIAGRAM):   run;
33226      run;
 
NOTE: MODIFY was successful for EMWS1.REG_EMRANK.DATA.
33227      quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
33228      %let _cn = %sysfunc(getoption(CENTER));
33229      options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
33230      proc print data=EMWS1.Reg_EMRANK label noobs;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.Reg_EMRANK label noobs;
33231      var
33232      decile gain lift liftc resp respc N _meanP_;
MPRINT(EM_DIAGRAM):   var decile gain lift liftc resp respc N _meanP_;
33233      by
33234      notsorted DATAROLE
33235      notsorted TARGET
33236      notsorted TARGETLABEL
33237      ;
MPRINT(EM_DIAGRAM):   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL ;
33238      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
33239      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreranking_title , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Assessment Score Rankings";
MPRINT(EM_DIAGRAM):   run;
33240      run;
 
NOTE: There were 40 observations read from the data set EMWS1.REG_EMRANK.
NOTE: The PROCEDURE PRINT printed page 9.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
33241      title10;
MPRINT(EM_DIAGRAM):   title10;
33242      options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
33243      proc datasets library=EMWS1 nolist;
MPRINT(EM_DIAGRAM):    proc datasets library=EMWS1 nolist;
33244      modify Reg_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   modify Reg_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   label target = "Target Variable";
33245      label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,
33245    ! NOQUOTE))";
MPRINT(EM_DIAGRAM):   label datarole = "Data Role";
33246      label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))"
33246    ! ;
MPRINT(EM_DIAGRAM):   run;
33247      run;
 
NOTE: MODIFY was successful for EMWS1.REG_EMSCOREDIST.DATA.
33248      quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_DIAGRAM):    options nocenter;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.Reg_EMSCOREDIST label noobs;
MPRINT(EM_DIAGRAM):   var p_label numberOfEvents numberOfNonEvents _meanp_ percentage;
MPRINT(EM_DIAGRAM):   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL ;
MPRINT(EM_DIAGRAM):   where TARGET in( "class" );
MPRINT(EM_DIAGRAM):   title9 ' ';
MPRINT(EM_DIAGRAM):   title10 "Assessment Score Distribution";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   title10;
MPRINT(EM_DIAGRAM):   options NOCENTER;
MPRINT(EM_DIAGRAM):   proc printto;
MPRINT(EM_DIAGRAM):   run;
